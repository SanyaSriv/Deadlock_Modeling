/******************************
  Program "BoundedTokenOscillation_router.m" compiled by "Caching Murphi Release 5.4.9"

  Murphi Last Compiled date: "Sep  6 2024"
 ******************************/

/********************
  Parameter
 ********************/
#define MURPHI_VERSION "Caching Murphi Release 5.4.9"
#define MURPHI_DATE "Sep  6 2024"
#define PROTOCOL_NAME "BoundedTokenOscillation_router"
#define BITS_IN_WORLD 534
#define HASHC

/********************
  Include
 ********************/
#include "mu_prolog.hpp"

/********************
  Decl declaration
 ********************/

class mu_1_MessageState: public mu__byte
{
 public:
  inline int operator=(int val) { return value(val); };
  inline int operator=(const mu_1_MessageState& val) { return value(val.value()); };
  static const char *values[];
  friend ostream& operator<< (ostream& s, mu_1_MessageState& val)
  {
    if (val.defined())
      return ( s << mu_1_MessageState::values[ int(val) - 1] );
    else return ( s << "Undefined" );
  };

  mu_1_MessageState (const char *name, int os): mu__byte(1, 5, 3, name, os) {};
  mu_1_MessageState (void): mu__byte(1, 5, 3) {};
  mu_1_MessageState (int val): mu__byte(1, 5, 3, "Parameter or function result.", 0)
  {
     operator=(val);
  };
  const char * Name() { return values[ value() -1]; };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
  virtual void print()
  {
    if (defined())
      cout << name << ":" << values[ value() -1] << '\n';
    else
      cout << name << ":Undefined\n";
  };
};

const char *mu_1_MessageState::values[] = {"empty","response","request","fwd_request","fwd_response",NULL };

/*** end of enum declaration ***/
mu_1_MessageState mu_1_MessageState_undefined_var;

class mu_1_NodeIDs: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu_1_NodeIDs& val) { return mu__byte::operator=((int) val); };
  mu_1_NodeIDs (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu_1_NodeIDs (void): mu__byte(0, 3, 3) {};
  mu_1_NodeIDs (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu_1_NodeIDs mu_1_NodeIDs_undefined_var;

class mu_1_Message
{
 public:
  char *name;
  char longname[BUFFER_SIZE/4];
  void set_self_2( const char *n, const char *n2, int os);
  void set_self_ar( const char *n, const char *n2, int os);
  void set_self(const char *n, int os);
  mu_1_MessageState mu_msg_type;
  mu_1_NodeIDs mu_dest_nid;
  mu_1_NodeIDs mu_src_nid;
  mu_1_Message ( const char *n, int os ) { set_self(n,os); };
  mu_1_Message ( void ) {};

  virtual ~mu_1_Message(); 
friend int CompareWeight(mu_1_Message& a, mu_1_Message& b)
  {
    int w;
    w = CompareWeight(a.mu_msg_type, b.mu_msg_type);
    if (w!=0) return w;
    w = CompareWeight(a.mu_dest_nid, b.mu_dest_nid);
    if (w!=0) return w;
    w = CompareWeight(a.mu_src_nid, b.mu_src_nid);
    if (w!=0) return w;
  return 0;
}
friend int Compare(mu_1_Message& a, mu_1_Message& b)
  {
    int w;
    w = Compare(a.mu_msg_type, b.mu_msg_type);
    if (w!=0) return w;
    w = Compare(a.mu_dest_nid, b.mu_dest_nid);
    if (w!=0) return w;
    w = Compare(a.mu_src_nid, b.mu_src_nid);
    if (w!=0) return w;
  return 0;
}
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort()
  {
    mu_msg_type.MultisetSort();
    mu_dest_nid.MultisetSort();
    mu_src_nid.MultisetSort();
  }
  void print_statistic()
  {
    mu_msg_type.print_statistic();
    mu_dest_nid.print_statistic();
    mu_src_nid.print_statistic();
  }
  void clear() {
    mu_msg_type.clear();
    mu_dest_nid.clear();
    mu_src_nid.clear();
 };
  void undefine() {
    mu_msg_type.undefine();
    mu_dest_nid.undefine();
    mu_src_nid.undefine();
 };
  void reset() {
    mu_msg_type.reset();
    mu_dest_nid.reset();
    mu_src_nid.reset();
 };
  void print() {
    mu_msg_type.print();
    mu_dest_nid.print();
    mu_src_nid.print();
  };
  void print_diff(state *prevstate) {
    mu_msg_type.print_diff(prevstate);
    mu_dest_nid.print_diff(prevstate);
    mu_src_nid.print_diff(prevstate);
  };
  void to_state(state *thestate) {
    mu_msg_type.to_state(thestate);
    mu_dest_nid.to_state(thestate);
    mu_src_nid.to_state(thestate);
  };
virtual bool isundefined() { Error.Error("Checking undefinedness of a non-base type"); return TRUE;}
virtual bool ismember() { Error.Error("Checking membership for a non-base type"); return TRUE;}
  mu_1_Message& operator= (const mu_1_Message& from) {
    mu_msg_type.value(from.mu_msg_type.value());
    mu_dest_nid.value(from.mu_dest_nid.value());
    mu_src_nid.value(from.mu_src_nid.value());
    return *this;
  };
};

  void mu_1_Message::set_self_ar( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    int l1 = strlen(n1), l2 = strlen(n2);
    strcpy( longname, n1 );
    longname[l1] = '[';
    strcpy( longname+l1+1, n2 );
    longname[l1+l2+1] = ']';
    longname[l1+l2+2] = 0;
    set_self( longname, os );
  };
  void mu_1_Message::set_self_2( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    strcpy( longname, n1 );
    strcat( longname, n2 );
    set_self( longname, os );
  };
void mu_1_Message::set_self(const char *n, int os)
{
  name = (char *)n;

  if (name) mu_msg_type.set_self_2(name, ".msg_type", os + 0 ); else mu_msg_type.set_self_2(NULL, NULL, 0);
  if (name) mu_dest_nid.set_self_2(name, ".dest_nid", os + 3 ); else mu_dest_nid.set_self_2(NULL, NULL, 0);
  if (name) mu_src_nid.set_self_2(name, ".src_nid", os + 6 ); else mu_src_nid.set_self_2(NULL, NULL, 0);
}

mu_1_Message::~mu_1_Message()
{
}

/*** end record declaration ***/
mu_1_Message mu_1_Message_undefined_var;

class mu__subrange_6: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_6& val) { return mu__byte::operator=((int) val); };
  mu__subrange_6 (const char *name, int os): mu__byte(0, 2, 2, name, os) {};
  mu__subrange_6 (void): mu__byte(0, 2, 2) {};
  mu__subrange_6 (int val): mu__byte(0, 2, 2, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_6 mu__subrange_6_undefined_var;

class mu_1_Queue
{
 public:
  mu_1_Message array[ 3 ];
 public:
  char *name;
  char longname[BUFFER_SIZE/4];
  void set_self( const char *n, int os);
  void set_self_2( const char *n, const char *n2, int os);
  void set_self_ar( const char *n, const char *n2, int os);
  mu_1_Queue (const char *n, int os) { set_self(n, os); };
  mu_1_Queue ( void ) {};
  virtual ~mu_1_Queue ();
  mu_1_Message& operator[] (int index) /* const */
  {
#ifndef NO_RUN_TIME_CHECKING
    if ( ( index >= 0 ) && ( index <= 2 ) )
      return array[ index - 0 ];
    else {
      if (index==UNDEFVAL) 
	Error.Error("Indexing to %s using an undefined value.", name);
      else
	Error.Error("%d not in index range of %s.", index, name);
      return array[0];
    }
#else
    return array[ index - 0 ];
#endif
  };
  mu_1_Queue& operator= (const mu_1_Queue& from)
  {
    for (int i = 0; i < 3; i++)
      array[i] = from.array[i];
    return *this;
  }

friend int CompareWeight(mu_1_Queue& a, mu_1_Queue& b)
  {
    int w;
    for (int i=0; i<3; i++) {
      w = CompareWeight(a.array[i], b.array[i]);
      if (w!=0) return w;
    }
    return 0;
  }
friend int Compare(mu_1_Queue& a, mu_1_Queue& b)
  {
    int w;
    for (int i=0; i<3; i++) {
      w = Compare(a.array[i], b.array[i]);
      if (w!=0) return w;
    }
    return 0;
  }
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort()
  {
    for (int i=0; i<3; i++)
      array[i].MultisetSort();
  }
  void print_statistic()
  {
    for (int i=0; i<3; i++)
      array[i].print_statistic();
  }
  void clear() { for (int i = 0; i < 3; i++) array[i].clear(); };

  void undefine() { for (int i = 0; i < 3; i++) array[i].undefine(); };

  void reset() { for (int i = 0; i < 3; i++) array[i].reset(); };

  void to_state(state *thestate)
  {
    for (int i = 0; i < 3; i++)
      array[i].to_state(thestate);
  };

  void print()
  {
    for (int i = 0; i < 3; i++)
      array[i].print(); };

  void print_diff(state *prevstate)
  {
    for (int i = 0; i < 3; i++)
      array[i].print_diff(prevstate);
  };
};

  void mu_1_Queue::set_self_ar( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    int l1 = strlen(n1), l2 = strlen(n2);
    strcpy( longname, n1 );
    longname[l1] = '[';
    strcpy( longname+l1+1, n2 );
    longname[l1+l2+1] = ']';
    longname[l1+l2+2] = 0;
    set_self( longname, os );
  };
  void mu_1_Queue::set_self_2( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    strcpy( longname, n1 );
    strcat( longname, n2 );
    set_self( longname, os );
  };
void mu_1_Queue::set_self( const char *n, int os)
{
  char* s;
  name = (char *)n;
  for(int i = 0; i < 3; i++) {
    array[i].set_self_ar(n, s=tsprintf("%d",i + 0), i * 9 + os);
    delete[] s;
  }
};
mu_1_Queue::~mu_1_Queue()
{
}
/*** end array declaration ***/
mu_1_Queue mu_1_Queue_undefined_var;

class mu_1__type_0
{
 public:
  mu_1_Queue array[ 4 ];
 public:
  char *name;
  char longname[BUFFER_SIZE/4];
  void set_self( const char *n, int os);
  void set_self_2( const char *n, const char *n2, int os);
  void set_self_ar( const char *n, const char *n2, int os);
  mu_1__type_0 (const char *n, int os) { set_self(n, os); };
  mu_1__type_0 ( void ) {};
  virtual ~mu_1__type_0 ();
  mu_1_Queue& operator[] (int index) /* const */
  {
#ifndef NO_RUN_TIME_CHECKING
    if ( ( index >= 0 ) && ( index <= 3 ) )
      return array[ index - 0 ];
    else {
      if (index==UNDEFVAL) 
	Error.Error("Indexing to %s using an undefined value.", name);
      else
	Error.Error("%d not in index range of %s.", index, name);
      return array[0];
    }
#else
    return array[ index - 0 ];
#endif
  };
  mu_1__type_0& operator= (const mu_1__type_0& from)
  {
    for (int i = 0; i < 4; i++)
      array[i] = from.array[i];
    return *this;
  }

friend int CompareWeight(mu_1__type_0& a, mu_1__type_0& b)
  {
    int w;
    for (int i=0; i<4; i++) {
      w = CompareWeight(a.array[i], b.array[i]);
      if (w!=0) return w;
    }
    return 0;
  }
friend int Compare(mu_1__type_0& a, mu_1__type_0& b)
  {
    int w;
    for (int i=0; i<4; i++) {
      w = Compare(a.array[i], b.array[i]);
      if (w!=0) return w;
    }
    return 0;
  }
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort()
  {
    for (int i=0; i<4; i++)
      array[i].MultisetSort();
  }
  void print_statistic()
  {
    for (int i=0; i<4; i++)
      array[i].print_statistic();
  }
  void clear() { for (int i = 0; i < 4; i++) array[i].clear(); };

  void undefine() { for (int i = 0; i < 4; i++) array[i].undefine(); };

  void reset() { for (int i = 0; i < 4; i++) array[i].reset(); };

  void to_state(state *thestate)
  {
    for (int i = 0; i < 4; i++)
      array[i].to_state(thestate);
  };

  void print()
  {
    for (int i = 0; i < 4; i++)
      array[i].print(); };

  void print_diff(state *prevstate)
  {
    for (int i = 0; i < 4; i++)
      array[i].print_diff(prevstate);
  };
};

  void mu_1__type_0::set_self_ar( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    int l1 = strlen(n1), l2 = strlen(n2);
    strcpy( longname, n1 );
    longname[l1] = '[';
    strcpy( longname+l1+1, n2 );
    longname[l1+l2+1] = ']';
    longname[l1+l2+2] = 0;
    set_self( longname, os );
  };
  void mu_1__type_0::set_self_2( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    strcpy( longname, n1 );
    strcat( longname, n2 );
    set_self( longname, os );
  };
void mu_1__type_0::set_self( const char *n, int os)
{
  char* s;
  name = (char *)n;
  for(int i = 0; i < 4; i++) {
    array[i].set_self_ar(n, s=tsprintf("%d",i + 0), i * 27 + os);
    delete[] s;
  }
};
mu_1__type_0::~mu_1__type_0()
{
}
/*** end array declaration ***/
mu_1__type_0 mu_1__type_0_undefined_var;

class mu_1__type_1
{
 public:
  mu_1__type_0 array[ 4 ];
 public:
  char *name;
  char longname[BUFFER_SIZE/4];
  void set_self( const char *n, int os);
  void set_self_2( const char *n, const char *n2, int os);
  void set_self_ar( const char *n, const char *n2, int os);
  mu_1__type_1 (const char *n, int os) { set_self(n, os); };
  mu_1__type_1 ( void ) {};
  virtual ~mu_1__type_1 ();
  mu_1__type_0& operator[] (int index) /* const */
  {
#ifndef NO_RUN_TIME_CHECKING
    if ( ( index >= 0 ) && ( index <= 3 ) )
      return array[ index - 0 ];
    else {
      if (index==UNDEFVAL) 
	Error.Error("Indexing to %s using an undefined value.", name);
      else
	Error.Error("%d not in index range of %s.", index, name);
      return array[0];
    }
#else
    return array[ index - 0 ];
#endif
  };
  mu_1__type_1& operator= (const mu_1__type_1& from)
  {
    for (int i = 0; i < 4; i++)
      array[i] = from.array[i];
    return *this;
  }

friend int CompareWeight(mu_1__type_1& a, mu_1__type_1& b)
  {
    int w;
    for (int i=0; i<4; i++) {
      w = CompareWeight(a.array[i], b.array[i]);
      if (w!=0) return w;
    }
    return 0;
  }
friend int Compare(mu_1__type_1& a, mu_1__type_1& b)
  {
    int w;
    for (int i=0; i<4; i++) {
      w = Compare(a.array[i], b.array[i]);
      if (w!=0) return w;
    }
    return 0;
  }
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort()
  {
    for (int i=0; i<4; i++)
      array[i].MultisetSort();
  }
  void print_statistic()
  {
    for (int i=0; i<4; i++)
      array[i].print_statistic();
  }
  void clear() { for (int i = 0; i < 4; i++) array[i].clear(); };

  void undefine() { for (int i = 0; i < 4; i++) array[i].undefine(); };

  void reset() { for (int i = 0; i < 4; i++) array[i].reset(); };

  void to_state(state *thestate)
  {
    for (int i = 0; i < 4; i++)
      array[i].to_state(thestate);
  };

  void print()
  {
    for (int i = 0; i < 4; i++)
      array[i].print(); };

  void print_diff(state *prevstate)
  {
    for (int i = 0; i < 4; i++)
      array[i].print_diff(prevstate);
  };
};

  void mu_1__type_1::set_self_ar( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    int l1 = strlen(n1), l2 = strlen(n2);
    strcpy( longname, n1 );
    longname[l1] = '[';
    strcpy( longname+l1+1, n2 );
    longname[l1+l2+1] = ']';
    longname[l1+l2+2] = 0;
    set_self( longname, os );
  };
  void mu_1__type_1::set_self_2( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    strcpy( longname, n1 );
    strcat( longname, n2 );
    set_self( longname, os );
  };
void mu_1__type_1::set_self( const char *n, int os)
{
  char* s;
  name = (char *)n;
  for(int i = 0; i < 4; i++) {
    array[i].set_self_ar(n, s=tsprintf("%d",i + 0), i * 108 + os);
    delete[] s;
  }
};
mu_1__type_1::~mu_1__type_1()
{
}
/*** end array declaration ***/
mu_1__type_1 mu_1__type_1_undefined_var;

class mu_1__type_2: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu_1__type_2& val) { return mu__byte::operator=((int) val); };
  mu_1__type_2 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu_1__type_2 (void): mu__byte(0, 3, 3) {};
  mu_1__type_2 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu_1__type_2 mu_1__type_2_undefined_var;

class mu_1__type_3
{
 public:
  mu_1__type_2 array[ 4 ];
 public:
  char *name;
  char longname[BUFFER_SIZE/4];
  void set_self( const char *n, int os);
  void set_self_2( const char *n, const char *n2, int os);
  void set_self_ar( const char *n, const char *n2, int os);
  mu_1__type_3 (const char *n, int os) { set_self(n, os); };
  mu_1__type_3 ( void ) {};
  virtual ~mu_1__type_3 ();
  mu_1__type_2& operator[] (int index) /* const */
  {
#ifndef NO_RUN_TIME_CHECKING
    if ( ( index >= 0 ) && ( index <= 3 ) )
      return array[ index - 0 ];
    else {
      if (index==UNDEFVAL) 
	Error.Error("Indexing to %s using an undefined value.", name);
      else
	Error.Error("%d not in index range of %s.", index, name);
      return array[0];
    }
#else
    return array[ index - 0 ];
#endif
  };
  mu_1__type_3& operator= (const mu_1__type_3& from)
  {
    for (int i = 0; i < 4; i++)
      array[i].value(from.array[i].value());
    return *this;
  }

friend int CompareWeight(mu_1__type_3& a, mu_1__type_3& b)
  {
    int w;
    for (int i=0; i<4; i++) {
      w = CompareWeight(a.array[i], b.array[i]);
      if (w!=0) return w;
    }
    return 0;
  }
friend int Compare(mu_1__type_3& a, mu_1__type_3& b)
  {
    int w;
    for (int i=0; i<4; i++) {
      w = Compare(a.array[i], b.array[i]);
      if (w!=0) return w;
    }
    return 0;
  }
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort()
  {
    for (int i=0; i<4; i++)
      array[i].MultisetSort();
  }
  void print_statistic()
  {
    for (int i=0; i<4; i++)
      array[i].print_statistic();
  }
  void clear() { for (int i = 0; i < 4; i++) array[i].clear(); };

  void undefine() { for (int i = 0; i < 4; i++) array[i].undefine(); };

  void reset() { for (int i = 0; i < 4; i++) array[i].reset(); };

  void to_state(state *thestate)
  {
    for (int i = 0; i < 4; i++)
      array[i].to_state(thestate);
  };

  void print()
  {
    for (int i = 0; i < 4; i++)
      array[i].print(); };

  void print_diff(state *prevstate)
  {
    for (int i = 0; i < 4; i++)
      array[i].print_diff(prevstate);
  };
};

  void mu_1__type_3::set_self_ar( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    int l1 = strlen(n1), l2 = strlen(n2);
    strcpy( longname, n1 );
    longname[l1] = '[';
    strcpy( longname+l1+1, n2 );
    longname[l1+l2+1] = ']';
    longname[l1+l2+2] = 0;
    set_self( longname, os );
  };
  void mu_1__type_3::set_self_2( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    strcpy( longname, n1 );
    strcat( longname, n2 );
    set_self( longname, os );
  };
void mu_1__type_3::set_self( const char *n, int os)
{
  char* s;
  name = (char *)n;
  for(int i = 0; i < 4; i++) {
    array[i].set_self_ar(n, s=tsprintf("%d",i + 0), i * 3 + os);
    delete[] s;
  }
};
mu_1__type_3::~mu_1__type_3()
{
}
/*** end array declaration ***/
mu_1__type_3 mu_1__type_3_undefined_var;

class mu_1__type_4
{
 public:
  mu_1__type_3 array[ 4 ];
 public:
  char *name;
  char longname[BUFFER_SIZE/4];
  void set_self( const char *n, int os);
  void set_self_2( const char *n, const char *n2, int os);
  void set_self_ar( const char *n, const char *n2, int os);
  mu_1__type_4 (const char *n, int os) { set_self(n, os); };
  mu_1__type_4 ( void ) {};
  virtual ~mu_1__type_4 ();
  mu_1__type_3& operator[] (int index) /* const */
  {
#ifndef NO_RUN_TIME_CHECKING
    if ( ( index >= 0 ) && ( index <= 3 ) )
      return array[ index - 0 ];
    else {
      if (index==UNDEFVAL) 
	Error.Error("Indexing to %s using an undefined value.", name);
      else
	Error.Error("%d not in index range of %s.", index, name);
      return array[0];
    }
#else
    return array[ index - 0 ];
#endif
  };
  mu_1__type_4& operator= (const mu_1__type_4& from)
  {
    for (int i = 0; i < 4; i++)
      array[i] = from.array[i];
    return *this;
  }

friend int CompareWeight(mu_1__type_4& a, mu_1__type_4& b)
  {
    int w;
    for (int i=0; i<4; i++) {
      w = CompareWeight(a.array[i], b.array[i]);
      if (w!=0) return w;
    }
    return 0;
  }
friend int Compare(mu_1__type_4& a, mu_1__type_4& b)
  {
    int w;
    for (int i=0; i<4; i++) {
      w = Compare(a.array[i], b.array[i]);
      if (w!=0) return w;
    }
    return 0;
  }
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort()
  {
    for (int i=0; i<4; i++)
      array[i].MultisetSort();
  }
  void print_statistic()
  {
    for (int i=0; i<4; i++)
      array[i].print_statistic();
  }
  void clear() { for (int i = 0; i < 4; i++) array[i].clear(); };

  void undefine() { for (int i = 0; i < 4; i++) array[i].undefine(); };

  void reset() { for (int i = 0; i < 4; i++) array[i].reset(); };

  void to_state(state *thestate)
  {
    for (int i = 0; i < 4; i++)
      array[i].to_state(thestate);
  };

  void print()
  {
    for (int i = 0; i < 4; i++)
      array[i].print(); };

  void print_diff(state *prevstate)
  {
    for (int i = 0; i < 4; i++)
      array[i].print_diff(prevstate);
  };
};

  void mu_1__type_4::set_self_ar( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    int l1 = strlen(n1), l2 = strlen(n2);
    strcpy( longname, n1 );
    longname[l1] = '[';
    strcpy( longname+l1+1, n2 );
    longname[l1+l2+1] = ']';
    longname[l1+l2+2] = 0;
    set_self( longname, os );
  };
  void mu_1__type_4::set_self_2( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    strcpy( longname, n1 );
    strcat( longname, n2 );
    set_self( longname, os );
  };
void mu_1__type_4::set_self( const char *n, int os)
{
  char* s;
  name = (char *)n;
  for(int i = 0; i < 4; i++) {
    array[i].set_self_ar(n, s=tsprintf("%d",i + 0), i * 12 + os);
    delete[] s;
  }
};
mu_1__type_4::~mu_1__type_4()
{
}
/*** end array declaration ***/
mu_1__type_4 mu_1__type_4_undefined_var;

class mu__subrange_13: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_13& val) { return mu__byte::operator=((int) val); };
  mu__subrange_13 (const char *name, int os): mu__byte(0, 4, 3, name, os) {};
  mu__subrange_13 (void): mu__byte(0, 4, 3) {};
  mu__subrange_13 (int val): mu__byte(0, 4, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_13 mu__subrange_13_undefined_var;

class mu_1__type_5: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu_1__type_5& val) { return mu__byte::operator=((int) val); };
  mu_1__type_5 (const char *name, int os): mu__byte(0, 1, 2, name, os) {};
  mu_1__type_5 (void): mu__byte(0, 1, 2) {};
  mu_1__type_5 (int val): mu__byte(0, 1, 2, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu_1__type_5 mu_1__type_5_undefined_var;

class mu_1__type_6
{
 public:
  mu_1__type_5 array[ 5 ];
 public:
  char *name;
  char longname[BUFFER_SIZE/4];
  void set_self( const char *n, int os);
  void set_self_2( const char *n, const char *n2, int os);
  void set_self_ar( const char *n, const char *n2, int os);
  mu_1__type_6 (const char *n, int os) { set_self(n, os); };
  mu_1__type_6 ( void ) {};
  virtual ~mu_1__type_6 ();
  mu_1__type_5& operator[] (int index) /* const */
  {
#ifndef NO_RUN_TIME_CHECKING
    if ( ( index >= 0 ) && ( index <= 4 ) )
      return array[ index - 0 ];
    else {
      if (index==UNDEFVAL) 
	Error.Error("Indexing to %s using an undefined value.", name);
      else
	Error.Error("%d not in index range of %s.", index, name);
      return array[0];
    }
#else
    return array[ index - 0 ];
#endif
  };
  mu_1__type_6& operator= (const mu_1__type_6& from)
  {
    for (int i = 0; i < 5; i++)
      array[i].value(from.array[i].value());
    return *this;
  }

friend int CompareWeight(mu_1__type_6& a, mu_1__type_6& b)
  {
    int w;
    for (int i=0; i<5; i++) {
      w = CompareWeight(a.array[i], b.array[i]);
      if (w!=0) return w;
    }
    return 0;
  }
friend int Compare(mu_1__type_6& a, mu_1__type_6& b)
  {
    int w;
    for (int i=0; i<5; i++) {
      w = Compare(a.array[i], b.array[i]);
      if (w!=0) return w;
    }
    return 0;
  }
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort()
  {
    for (int i=0; i<5; i++)
      array[i].MultisetSort();
  }
  void print_statistic()
  {
    for (int i=0; i<5; i++)
      array[i].print_statistic();
  }
  void clear() { for (int i = 0; i < 5; i++) array[i].clear(); };

  void undefine() { for (int i = 0; i < 5; i++) array[i].undefine(); };

  void reset() { for (int i = 0; i < 5; i++) array[i].reset(); };

  void to_state(state *thestate)
  {
    for (int i = 0; i < 5; i++)
      array[i].to_state(thestate);
  };

  void print()
  {
    for (int i = 0; i < 5; i++)
      array[i].print(); };

  void print_diff(state *prevstate)
  {
    for (int i = 0; i < 5; i++)
      array[i].print_diff(prevstate);
  };
};

  void mu_1__type_6::set_self_ar( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    int l1 = strlen(n1), l2 = strlen(n2);
    strcpy( longname, n1 );
    longname[l1] = '[';
    strcpy( longname+l1+1, n2 );
    longname[l1+l2+1] = ']';
    longname[l1+l2+2] = 0;
    set_self( longname, os );
  };
  void mu_1__type_6::set_self_2( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    strcpy( longname, n1 );
    strcat( longname, n2 );
    set_self( longname, os );
  };
void mu_1__type_6::set_self( const char *n, int os)
{
  char* s;
  name = (char *)n;
  for(int i = 0; i < 5; i++) {
    array[i].set_self_ar(n, s=tsprintf("%d",i + 0), i * 2 + os);
    delete[] s;
  }
};
mu_1__type_6::~mu_1__type_6()
{
}
/*** end array declaration ***/
mu_1__type_6 mu_1__type_6_undefined_var;

class mu_1__type_7: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu_1__type_7& val) { return mu__byte::operator=((int) val); };
  mu_1__type_7 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu_1__type_7 (void): mu__byte(0, 3, 3) {};
  mu_1__type_7 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu_1__type_7 mu_1__type_7_undefined_var;

class mu_1__type_8
{
 public:
  mu_1__type_7 array[ 4 ];
 public:
  char *name;
  char longname[BUFFER_SIZE/4];
  void set_self( const char *n, int os);
  void set_self_2( const char *n, const char *n2, int os);
  void set_self_ar( const char *n, const char *n2, int os);
  mu_1__type_8 (const char *n, int os) { set_self(n, os); };
  mu_1__type_8 ( void ) {};
  virtual ~mu_1__type_8 ();
  mu_1__type_7& operator[] (int index) /* const */
  {
#ifndef NO_RUN_TIME_CHECKING
    if ( ( index >= 0 ) && ( index <= 3 ) )
      return array[ index - 0 ];
    else {
      if (index==UNDEFVAL) 
	Error.Error("Indexing to %s using an undefined value.", name);
      else
	Error.Error("%d not in index range of %s.", index, name);
      return array[0];
    }
#else
    return array[ index - 0 ];
#endif
  };
  mu_1__type_8& operator= (const mu_1__type_8& from)
  {
    for (int i = 0; i < 4; i++)
      array[i].value(from.array[i].value());
    return *this;
  }

friend int CompareWeight(mu_1__type_8& a, mu_1__type_8& b)
  {
    int w;
    for (int i=0; i<4; i++) {
      w = CompareWeight(a.array[i], b.array[i]);
      if (w!=0) return w;
    }
    return 0;
  }
friend int Compare(mu_1__type_8& a, mu_1__type_8& b)
  {
    int w;
    for (int i=0; i<4; i++) {
      w = Compare(a.array[i], b.array[i]);
      if (w!=0) return w;
    }
    return 0;
  }
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort()
  {
    for (int i=0; i<4; i++)
      array[i].MultisetSort();
  }
  void print_statistic()
  {
    for (int i=0; i<4; i++)
      array[i].print_statistic();
  }
  void clear() { for (int i = 0; i < 4; i++) array[i].clear(); };

  void undefine() { for (int i = 0; i < 4; i++) array[i].undefine(); };

  void reset() { for (int i = 0; i < 4; i++) array[i].reset(); };

  void to_state(state *thestate)
  {
    for (int i = 0; i < 4; i++)
      array[i].to_state(thestate);
  };

  void print()
  {
    for (int i = 0; i < 4; i++)
      array[i].print(); };

  void print_diff(state *prevstate)
  {
    for (int i = 0; i < 4; i++)
      array[i].print_diff(prevstate);
  };
};

  void mu_1__type_8::set_self_ar( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    int l1 = strlen(n1), l2 = strlen(n2);
    strcpy( longname, n1 );
    longname[l1] = '[';
    strcpy( longname+l1+1, n2 );
    longname[l1+l2+1] = ']';
    longname[l1+l2+2] = 0;
    set_self( longname, os );
  };
  void mu_1__type_8::set_self_2( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    strcpy( longname, n1 );
    strcat( longname, n2 );
    set_self( longname, os );
  };
void mu_1__type_8::set_self( const char *n, int os)
{
  char* s;
  name = (char *)n;
  for(int i = 0; i < 4; i++) {
    array[i].set_self_ar(n, s=tsprintf("%d",i + 0), i * 3 + os);
    delete[] s;
  }
};
mu_1__type_8::~mu_1__type_8()
{
}
/*** end array declaration ***/
mu_1__type_8 mu_1__type_8_undefined_var;

class mu_1__type_9: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu_1__type_9& val) { return mu__byte::operator=((int) val); };
  mu_1__type_9 (const char *name, int os): mu__byte(0, 1, 2, name, os) {};
  mu_1__type_9 (void): mu__byte(0, 1, 2) {};
  mu_1__type_9 (int val): mu__byte(0, 1, 2, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu_1__type_9 mu_1__type_9_undefined_var;

class mu_1__type_10
{
 public:
  mu_1__type_9 array[ 4 ];
 public:
  char *name;
  char longname[BUFFER_SIZE/4];
  void set_self( const char *n, int os);
  void set_self_2( const char *n, const char *n2, int os);
  void set_self_ar( const char *n, const char *n2, int os);
  mu_1__type_10 (const char *n, int os) { set_self(n, os); };
  mu_1__type_10 ( void ) {};
  virtual ~mu_1__type_10 ();
  mu_1__type_9& operator[] (int index) /* const */
  {
#ifndef NO_RUN_TIME_CHECKING
    if ( ( index >= 0 ) && ( index <= 3 ) )
      return array[ index - 0 ];
    else {
      if (index==UNDEFVAL) 
	Error.Error("Indexing to %s using an undefined value.", name);
      else
	Error.Error("%d not in index range of %s.", index, name);
      return array[0];
    }
#else
    return array[ index - 0 ];
#endif
  };
  mu_1__type_10& operator= (const mu_1__type_10& from)
  {
    for (int i = 0; i < 4; i++)
      array[i].value(from.array[i].value());
    return *this;
  }

friend int CompareWeight(mu_1__type_10& a, mu_1__type_10& b)
  {
    int w;
    for (int i=0; i<4; i++) {
      w = CompareWeight(a.array[i], b.array[i]);
      if (w!=0) return w;
    }
    return 0;
  }
friend int Compare(mu_1__type_10& a, mu_1__type_10& b)
  {
    int w;
    for (int i=0; i<4; i++) {
      w = Compare(a.array[i], b.array[i]);
      if (w!=0) return w;
    }
    return 0;
  }
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort()
  {
    for (int i=0; i<4; i++)
      array[i].MultisetSort();
  }
  void print_statistic()
  {
    for (int i=0; i<4; i++)
      array[i].print_statistic();
  }
  void clear() { for (int i = 0; i < 4; i++) array[i].clear(); };

  void undefine() { for (int i = 0; i < 4; i++) array[i].undefine(); };

  void reset() { for (int i = 0; i < 4; i++) array[i].reset(); };

  void to_state(state *thestate)
  {
    for (int i = 0; i < 4; i++)
      array[i].to_state(thestate);
  };

  void print()
  {
    for (int i = 0; i < 4; i++)
      array[i].print(); };

  void print_diff(state *prevstate)
  {
    for (int i = 0; i < 4; i++)
      array[i].print_diff(prevstate);
  };
};

  void mu_1__type_10::set_self_ar( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    int l1 = strlen(n1), l2 = strlen(n2);
    strcpy( longname, n1 );
    longname[l1] = '[';
    strcpy( longname+l1+1, n2 );
    longname[l1+l2+1] = ']';
    longname[l1+l2+2] = 0;
    set_self( longname, os );
  };
  void mu_1__type_10::set_self_2( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    strcpy( longname, n1 );
    strcat( longname, n2 );
    set_self( longname, os );
  };
void mu_1__type_10::set_self( const char *n, int os)
{
  char* s;
  name = (char *)n;
  for(int i = 0; i < 4; i++) {
    array[i].set_self_ar(n, s=tsprintf("%d",i + 0), i * 2 + os);
    delete[] s;
  }
};
mu_1__type_10::~mu_1__type_10()
{
}
/*** end array declaration ***/
mu_1__type_10 mu_1__type_10_undefined_var;

class mu_1__type_11
{
 public:
  mu_1_NodeIDs array[ 4 ];
 public:
  char *name;
  char longname[BUFFER_SIZE/4];
  void set_self( const char *n, int os);
  void set_self_2( const char *n, const char *n2, int os);
  void set_self_ar( const char *n, const char *n2, int os);
  mu_1__type_11 (const char *n, int os) { set_self(n, os); };
  mu_1__type_11 ( void ) {};
  virtual ~mu_1__type_11 ();
  mu_1_NodeIDs& operator[] (int index) /* const */
  {
#ifndef NO_RUN_TIME_CHECKING
    if ( ( index >= 0 ) && ( index <= 3 ) )
      return array[ index - 0 ];
    else {
      if (index==UNDEFVAL) 
	Error.Error("Indexing to %s using an undefined value.", name);
      else
	Error.Error("%d not in index range of %s.", index, name);
      return array[0];
    }
#else
    return array[ index - 0 ];
#endif
  };
  mu_1__type_11& operator= (const mu_1__type_11& from)
  {
    for (int i = 0; i < 4; i++)
      array[i].value(from.array[i].value());
    return *this;
  }

friend int CompareWeight(mu_1__type_11& a, mu_1__type_11& b)
  {
    int w;
    for (int i=0; i<4; i++) {
      w = CompareWeight(a.array[i], b.array[i]);
      if (w!=0) return w;
    }
    return 0;
  }
friend int Compare(mu_1__type_11& a, mu_1__type_11& b)
  {
    int w;
    for (int i=0; i<4; i++) {
      w = Compare(a.array[i], b.array[i]);
      if (w!=0) return w;
    }
    return 0;
  }
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort()
  {
    for (int i=0; i<4; i++)
      array[i].MultisetSort();
  }
  void print_statistic()
  {
    for (int i=0; i<4; i++)
      array[i].print_statistic();
  }
  void clear() { for (int i = 0; i < 4; i++) array[i].clear(); };

  void undefine() { for (int i = 0; i < 4; i++) array[i].undefine(); };

  void reset() { for (int i = 0; i < 4; i++) array[i].reset(); };

  void to_state(state *thestate)
  {
    for (int i = 0; i < 4; i++)
      array[i].to_state(thestate);
  };

  void print()
  {
    for (int i = 0; i < 4; i++)
      array[i].print(); };

  void print_diff(state *prevstate)
  {
    for (int i = 0; i < 4; i++)
      array[i].print_diff(prevstate);
  };
};

  void mu_1__type_11::set_self_ar( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    int l1 = strlen(n1), l2 = strlen(n2);
    strcpy( longname, n1 );
    longname[l1] = '[';
    strcpy( longname+l1+1, n2 );
    longname[l1+l2+1] = ']';
    longname[l1+l2+2] = 0;
    set_self( longname, os );
  };
  void mu_1__type_11::set_self_2( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    strcpy( longname, n1 );
    strcat( longname, n2 );
    set_self( longname, os );
  };
void mu_1__type_11::set_self( const char *n, int os)
{
  char* s;
  name = (char *)n;
  for(int i = 0; i < 4; i++) {
    array[i].set_self_ar(n, s=tsprintf("%d",i + 0), i * 3 + os);
    delete[] s;
  }
};
mu_1__type_11::~mu_1__type_11()
{
}
/*** end array declaration ***/
mu_1__type_11 mu_1__type_11_undefined_var;

class mu_1__type_12
{
 public:
  mu_1_NodeIDs array[ 4 ];
 public:
  char *name;
  char longname[BUFFER_SIZE/4];
  void set_self( const char *n, int os);
  void set_self_2( const char *n, const char *n2, int os);
  void set_self_ar( const char *n, const char *n2, int os);
  mu_1__type_12 (const char *n, int os) { set_self(n, os); };
  mu_1__type_12 ( void ) {};
  virtual ~mu_1__type_12 ();
  mu_1_NodeIDs& operator[] (int index) /* const */
  {
#ifndef NO_RUN_TIME_CHECKING
    if ( ( index >= 0 ) && ( index <= 3 ) )
      return array[ index - 0 ];
    else {
      if (index==UNDEFVAL) 
	Error.Error("Indexing to %s using an undefined value.", name);
      else
	Error.Error("%d not in index range of %s.", index, name);
      return array[0];
    }
#else
    return array[ index - 0 ];
#endif
  };
  mu_1__type_12& operator= (const mu_1__type_12& from)
  {
    for (int i = 0; i < 4; i++)
      array[i].value(from.array[i].value());
    return *this;
  }

friend int CompareWeight(mu_1__type_12& a, mu_1__type_12& b)
  {
    int w;
    for (int i=0; i<4; i++) {
      w = CompareWeight(a.array[i], b.array[i]);
      if (w!=0) return w;
    }
    return 0;
  }
friend int Compare(mu_1__type_12& a, mu_1__type_12& b)
  {
    int w;
    for (int i=0; i<4; i++) {
      w = Compare(a.array[i], b.array[i]);
      if (w!=0) return w;
    }
    return 0;
  }
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort()
  {
    for (int i=0; i<4; i++)
      array[i].MultisetSort();
  }
  void print_statistic()
  {
    for (int i=0; i<4; i++)
      array[i].print_statistic();
  }
  void clear() { for (int i = 0; i < 4; i++) array[i].clear(); };

  void undefine() { for (int i = 0; i < 4; i++) array[i].undefine(); };

  void reset() { for (int i = 0; i < 4; i++) array[i].reset(); };

  void to_state(state *thestate)
  {
    for (int i = 0; i < 4; i++)
      array[i].to_state(thestate);
  };

  void print()
  {
    for (int i = 0; i < 4; i++)
      array[i].print(); };

  void print_diff(state *prevstate)
  {
    for (int i = 0; i < 4; i++)
      array[i].print_diff(prevstate);
  };
};

  void mu_1__type_12::set_self_ar( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    int l1 = strlen(n1), l2 = strlen(n2);
    strcpy( longname, n1 );
    longname[l1] = '[';
    strcpy( longname+l1+1, n2 );
    longname[l1+l2+1] = ']';
    longname[l1+l2+2] = 0;
    set_self( longname, os );
  };
  void mu_1__type_12::set_self_2( const char *n1, const char *n2, int os ) {
    if (n1 == NULL) {set_self(NULL, 0); return;}
    strcpy( longname, n1 );
    strcat( longname, n2 );
    set_self( longname, os );
  };
void mu_1__type_12::set_self( const char *n, int os)
{
  char* s;
  name = (char *)n;
  for(int i = 0; i < 4; i++) {
    array[i].set_self_ar(n, s=tsprintf("%d",i + 0), i * 3 + os);
    delete[] s;
  }
};
mu_1__type_12::~mu_1__type_12()
{
}
/*** end array declaration ***/
mu_1__type_12 mu_1__type_12_undefined_var;

class mu__subrange_22: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_22& val) { return mu__byte::operator=((int) val); };
  mu__subrange_22 (const char *name, int os): mu__byte(1, 2, 2, name, os) {};
  mu__subrange_22 (void): mu__byte(1, 2, 2) {};
  mu__subrange_22 (int val): mu__byte(1, 2, 2, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_22 mu__subrange_22_undefined_var;

class mu__subrange_23: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_23& val) { return mu__byte::operator=((int) val); };
  mu__subrange_23 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_23 (void): mu__byte(0, 3, 3) {};
  mu__subrange_23 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_23 mu__subrange_23_undefined_var;

class mu__subrange_24: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_24& val) { return mu__byte::operator=((int) val); };
  mu__subrange_24 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_24 (void): mu__byte(0, 3, 3) {};
  mu__subrange_24 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_24 mu__subrange_24_undefined_var;

class mu__subrange_25: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_25& val) { return mu__byte::operator=((int) val); };
  mu__subrange_25 (const char *name, int os): mu__byte(0, 2, 2, name, os) {};
  mu__subrange_25 (void): mu__byte(0, 2, 2) {};
  mu__subrange_25 (int val): mu__byte(0, 2, 2, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_25 mu__subrange_25_undefined_var;

class mu__subrange_26: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_26& val) { return mu__byte::operator=((int) val); };
  mu__subrange_26 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_26 (void): mu__byte(0, 3, 3) {};
  mu__subrange_26 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_26 mu__subrange_26_undefined_var;

class mu__subrange_27: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_27& val) { return mu__byte::operator=((int) val); };
  mu__subrange_27 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_27 (void): mu__byte(0, 3, 3) {};
  mu__subrange_27 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_27 mu__subrange_27_undefined_var;

class mu__subrange_28: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_28& val) { return mu__byte::operator=((int) val); };
  mu__subrange_28 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_28 (void): mu__byte(0, 3, 3) {};
  mu__subrange_28 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_28 mu__subrange_28_undefined_var;

class mu__subrange_29: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_29& val) { return mu__byte::operator=((int) val); };
  mu__subrange_29 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_29 (void): mu__byte(0, 3, 3) {};
  mu__subrange_29 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_29 mu__subrange_29_undefined_var;

class mu__subrange_30: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_30& val) { return mu__byte::operator=((int) val); };
  mu__subrange_30 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_30 (void): mu__byte(0, 3, 3) {};
  mu__subrange_30 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_30 mu__subrange_30_undefined_var;

class mu__subrange_31: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_31& val) { return mu__byte::operator=((int) val); };
  mu__subrange_31 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_31 (void): mu__byte(0, 3, 3) {};
  mu__subrange_31 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_31 mu__subrange_31_undefined_var;

class mu__subrange_32: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_32& val) { return mu__byte::operator=((int) val); };
  mu__subrange_32 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_32 (void): mu__byte(0, 3, 3) {};
  mu__subrange_32 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_32 mu__subrange_32_undefined_var;

class mu__subrange_33: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_33& val) { return mu__byte::operator=((int) val); };
  mu__subrange_33 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_33 (void): mu__byte(0, 3, 3) {};
  mu__subrange_33 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_33 mu__subrange_33_undefined_var;

class mu__subrange_34: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_34& val) { return mu__byte::operator=((int) val); };
  mu__subrange_34 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_34 (void): mu__byte(0, 3, 3) {};
  mu__subrange_34 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_34 mu__subrange_34_undefined_var;

class mu__subrange_35: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_35& val) { return mu__byte::operator=((int) val); };
  mu__subrange_35 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_35 (void): mu__byte(0, 3, 3) {};
  mu__subrange_35 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_35 mu__subrange_35_undefined_var;

class mu__subrange_36: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_36& val) { return mu__byte::operator=((int) val); };
  mu__subrange_36 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_36 (void): mu__byte(0, 3, 3) {};
  mu__subrange_36 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_36 mu__subrange_36_undefined_var;

class mu__subrange_37: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_37& val) { return mu__byte::operator=((int) val); };
  mu__subrange_37 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_37 (void): mu__byte(0, 3, 3) {};
  mu__subrange_37 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_37 mu__subrange_37_undefined_var;

class mu__subrange_38: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_38& val) { return mu__byte::operator=((int) val); };
  mu__subrange_38 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_38 (void): mu__byte(0, 3, 3) {};
  mu__subrange_38 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_38 mu__subrange_38_undefined_var;

class mu__subrange_39: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_39& val) { return mu__byte::operator=((int) val); };
  mu__subrange_39 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_39 (void): mu__byte(0, 3, 3) {};
  mu__subrange_39 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_39 mu__subrange_39_undefined_var;

class mu__subrange_40: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_40& val) { return mu__byte::operator=((int) val); };
  mu__subrange_40 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_40 (void): mu__byte(0, 3, 3) {};
  mu__subrange_40 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_40 mu__subrange_40_undefined_var;

class mu__subrange_41: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_41& val) { return mu__byte::operator=((int) val); };
  mu__subrange_41 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_41 (void): mu__byte(0, 3, 3) {};
  mu__subrange_41 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_41 mu__subrange_41_undefined_var;

class mu__subrange_42: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_42& val) { return mu__byte::operator=((int) val); };
  mu__subrange_42 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_42 (void): mu__byte(0, 3, 3) {};
  mu__subrange_42 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_42 mu__subrange_42_undefined_var;

class mu__subrange_43: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_43& val) { return mu__byte::operator=((int) val); };
  mu__subrange_43 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_43 (void): mu__byte(0, 3, 3) {};
  mu__subrange_43 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_43 mu__subrange_43_undefined_var;

class mu__subrange_44: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_44& val) { return mu__byte::operator=((int) val); };
  mu__subrange_44 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_44 (void): mu__byte(0, 3, 3) {};
  mu__subrange_44 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_44 mu__subrange_44_undefined_var;

class mu__subrange_45: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_45& val) { return mu__byte::operator=((int) val); };
  mu__subrange_45 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_45 (void): mu__byte(0, 3, 3) {};
  mu__subrange_45 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_45 mu__subrange_45_undefined_var;

class mu__subrange_46: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_46& val) { return mu__byte::operator=((int) val); };
  mu__subrange_46 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_46 (void): mu__byte(0, 3, 3) {};
  mu__subrange_46 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_46 mu__subrange_46_undefined_var;

class mu__subrange_47: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_47& val) { return mu__byte::operator=((int) val); };
  mu__subrange_47 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_47 (void): mu__byte(0, 3, 3) {};
  mu__subrange_47 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_47 mu__subrange_47_undefined_var;

class mu__subrange_48: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_48& val) { return mu__byte::operator=((int) val); };
  mu__subrange_48 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_48 (void): mu__byte(0, 3, 3) {};
  mu__subrange_48 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_48 mu__subrange_48_undefined_var;

class mu__subrange_49: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_49& val) { return mu__byte::operator=((int) val); };
  mu__subrange_49 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_49 (void): mu__byte(0, 3, 3) {};
  mu__subrange_49 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_49 mu__subrange_49_undefined_var;

class mu__subrange_50: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_50& val) { return mu__byte::operator=((int) val); };
  mu__subrange_50 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_50 (void): mu__byte(0, 3, 3) {};
  mu__subrange_50 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_50 mu__subrange_50_undefined_var;

class mu__subrange_51: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_51& val) { return mu__byte::operator=((int) val); };
  mu__subrange_51 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_51 (void): mu__byte(0, 3, 3) {};
  mu__subrange_51 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_51 mu__subrange_51_undefined_var;

class mu__subrange_52: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_52& val) { return mu__byte::operator=((int) val); };
  mu__subrange_52 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_52 (void): mu__byte(0, 3, 3) {};
  mu__subrange_52 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_52 mu__subrange_52_undefined_var;

class mu__subrange_53: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_53& val) { return mu__byte::operator=((int) val); };
  mu__subrange_53 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_53 (void): mu__byte(0, 3, 3) {};
  mu__subrange_53 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_53 mu__subrange_53_undefined_var;

class mu__subrange_54: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_54& val) { return mu__byte::operator=((int) val); };
  mu__subrange_54 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_54 (void): mu__byte(0, 3, 3) {};
  mu__subrange_54 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_54 mu__subrange_54_undefined_var;

class mu__subrange_55: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_55& val) { return mu__byte::operator=((int) val); };
  mu__subrange_55 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_55 (void): mu__byte(0, 3, 3) {};
  mu__subrange_55 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_55 mu__subrange_55_undefined_var;

class mu__subrange_56: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_56& val) { return mu__byte::operator=((int) val); };
  mu__subrange_56 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_56 (void): mu__byte(0, 3, 3) {};
  mu__subrange_56 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_56 mu__subrange_56_undefined_var;

class mu__subrange_57: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_57& val) { return mu__byte::operator=((int) val); };
  mu__subrange_57 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_57 (void): mu__byte(0, 3, 3) {};
  mu__subrange_57 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_57 mu__subrange_57_undefined_var;

class mu__subrange_58: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_58& val) { return mu__byte::operator=((int) val); };
  mu__subrange_58 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_58 (void): mu__byte(0, 3, 3) {};
  mu__subrange_58 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_58 mu__subrange_58_undefined_var;

class mu__subrange_59: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_59& val) { return mu__byte::operator=((int) val); };
  mu__subrange_59 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_59 (void): mu__byte(0, 3, 3) {};
  mu__subrange_59 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_59 mu__subrange_59_undefined_var;

class mu__subrange_60: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_60& val) { return mu__byte::operator=((int) val); };
  mu__subrange_60 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_60 (void): mu__byte(0, 3, 3) {};
  mu__subrange_60 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_60 mu__subrange_60_undefined_var;

class mu__subrange_61: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_61& val) { return mu__byte::operator=((int) val); };
  mu__subrange_61 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_61 (void): mu__byte(0, 3, 3) {};
  mu__subrange_61 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_61 mu__subrange_61_undefined_var;

class mu__subrange_62: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_62& val) { return mu__byte::operator=((int) val); };
  mu__subrange_62 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_62 (void): mu__byte(0, 3, 3) {};
  mu__subrange_62 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_62 mu__subrange_62_undefined_var;

class mu__subrange_63: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_63& val) { return mu__byte::operator=((int) val); };
  mu__subrange_63 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_63 (void): mu__byte(0, 3, 3) {};
  mu__subrange_63 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_63 mu__subrange_63_undefined_var;

class mu__subrange_64: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_64& val) { return mu__byte::operator=((int) val); };
  mu__subrange_64 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_64 (void): mu__byte(0, 3, 3) {};
  mu__subrange_64 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_64 mu__subrange_64_undefined_var;

class mu__subrange_65: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_65& val) { return mu__byte::operator=((int) val); };
  mu__subrange_65 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_65 (void): mu__byte(0, 3, 3) {};
  mu__subrange_65 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_65 mu__subrange_65_undefined_var;

class mu__subrange_66: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_66& val) { return mu__byte::operator=((int) val); };
  mu__subrange_66 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_66 (void): mu__byte(0, 3, 3) {};
  mu__subrange_66 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_66 mu__subrange_66_undefined_var;

class mu__subrange_67: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_67& val) { return mu__byte::operator=((int) val); };
  mu__subrange_67 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_67 (void): mu__byte(0, 3, 3) {};
  mu__subrange_67 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_67 mu__subrange_67_undefined_var;

class mu__subrange_68: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_68& val) { return mu__byte::operator=((int) val); };
  mu__subrange_68 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_68 (void): mu__byte(0, 3, 3) {};
  mu__subrange_68 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_68 mu__subrange_68_undefined_var;

class mu__subrange_69: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_69& val) { return mu__byte::operator=((int) val); };
  mu__subrange_69 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_69 (void): mu__byte(0, 3, 3) {};
  mu__subrange_69 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_69 mu__subrange_69_undefined_var;

class mu__subrange_70: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_70& val) { return mu__byte::operator=((int) val); };
  mu__subrange_70 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_70 (void): mu__byte(0, 3, 3) {};
  mu__subrange_70 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_70 mu__subrange_70_undefined_var;

class mu__subrange_71: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_71& val) { return mu__byte::operator=((int) val); };
  mu__subrange_71 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_71 (void): mu__byte(0, 3, 3) {};
  mu__subrange_71 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_71 mu__subrange_71_undefined_var;

class mu__subrange_72: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_72& val) { return mu__byte::operator=((int) val); };
  mu__subrange_72 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_72 (void): mu__byte(0, 3, 3) {};
  mu__subrange_72 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_72 mu__subrange_72_undefined_var;

class mu__subrange_73: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_73& val) { return mu__byte::operator=((int) val); };
  mu__subrange_73 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_73 (void): mu__byte(0, 3, 3) {};
  mu__subrange_73 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_73 mu__subrange_73_undefined_var;

class mu__subrange_74: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_74& val) { return mu__byte::operator=((int) val); };
  mu__subrange_74 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_74 (void): mu__byte(0, 3, 3) {};
  mu__subrange_74 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_74 mu__subrange_74_undefined_var;

class mu__subrange_75: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_75& val) { return mu__byte::operator=((int) val); };
  mu__subrange_75 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_75 (void): mu__byte(0, 3, 3) {};
  mu__subrange_75 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_75 mu__subrange_75_undefined_var;

class mu__subrange_76: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_76& val) { return mu__byte::operator=((int) val); };
  mu__subrange_76 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_76 (void): mu__byte(0, 3, 3) {};
  mu__subrange_76 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_76 mu__subrange_76_undefined_var;

class mu__subrange_77: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_77& val) { return mu__byte::operator=((int) val); };
  mu__subrange_77 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_77 (void): mu__byte(0, 3, 3) {};
  mu__subrange_77 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_77 mu__subrange_77_undefined_var;

class mu__subrange_78: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_78& val) { return mu__byte::operator=((int) val); };
  mu__subrange_78 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_78 (void): mu__byte(0, 3, 3) {};
  mu__subrange_78 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_78 mu__subrange_78_undefined_var;

class mu__subrange_79: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_79& val) { return mu__byte::operator=((int) val); };
  mu__subrange_79 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_79 (void): mu__byte(0, 3, 3) {};
  mu__subrange_79 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_79 mu__subrange_79_undefined_var;

class mu__subrange_80: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_80& val) { return mu__byte::operator=((int) val); };
  mu__subrange_80 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_80 (void): mu__byte(0, 3, 3) {};
  mu__subrange_80 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_80 mu__subrange_80_undefined_var;

class mu__subrange_81: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_81& val) { return mu__byte::operator=((int) val); };
  mu__subrange_81 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_81 (void): mu__byte(0, 3, 3) {};
  mu__subrange_81 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_81 mu__subrange_81_undefined_var;

class mu__subrange_82: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_82& val) { return mu__byte::operator=((int) val); };
  mu__subrange_82 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_82 (void): mu__byte(0, 3, 3) {};
  mu__subrange_82 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_82 mu__subrange_82_undefined_var;

class mu__subrange_83: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_83& val) { return mu__byte::operator=((int) val); };
  mu__subrange_83 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_83 (void): mu__byte(0, 3, 3) {};
  mu__subrange_83 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_83 mu__subrange_83_undefined_var;

class mu__subrange_84: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_84& val) { return mu__byte::operator=((int) val); };
  mu__subrange_84 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_84 (void): mu__byte(0, 3, 3) {};
  mu__subrange_84 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_84 mu__subrange_84_undefined_var;

class mu__subrange_85: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_85& val) { return mu__byte::operator=((int) val); };
  mu__subrange_85 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_85 (void): mu__byte(0, 3, 3) {};
  mu__subrange_85 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_85 mu__subrange_85_undefined_var;

class mu__subrange_86: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_86& val) { return mu__byte::operator=((int) val); };
  mu__subrange_86 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_86 (void): mu__byte(0, 3, 3) {};
  mu__subrange_86 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_86 mu__subrange_86_undefined_var;

class mu__subrange_87: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_87& val) { return mu__byte::operator=((int) val); };
  mu__subrange_87 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_87 (void): mu__byte(0, 3, 3) {};
  mu__subrange_87 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_87 mu__subrange_87_undefined_var;

class mu__subrange_88: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_88& val) { return mu__byte::operator=((int) val); };
  mu__subrange_88 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_88 (void): mu__byte(0, 3, 3) {};
  mu__subrange_88 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_88 mu__subrange_88_undefined_var;

class mu__subrange_89: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_89& val) { return mu__byte::operator=((int) val); };
  mu__subrange_89 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_89 (void): mu__byte(0, 3, 3) {};
  mu__subrange_89 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_89 mu__subrange_89_undefined_var;

class mu__subrange_90: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_90& val) { return mu__byte::operator=((int) val); };
  mu__subrange_90 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_90 (void): mu__byte(0, 3, 3) {};
  mu__subrange_90 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_90 mu__subrange_90_undefined_var;

class mu__subrange_91: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_91& val) { return mu__byte::operator=((int) val); };
  mu__subrange_91 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_91 (void): mu__byte(0, 3, 3) {};
  mu__subrange_91 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_91 mu__subrange_91_undefined_var;

class mu__subrange_92: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_92& val) { return mu__byte::operator=((int) val); };
  mu__subrange_92 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_92 (void): mu__byte(0, 3, 3) {};
  mu__subrange_92 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_92 mu__subrange_92_undefined_var;

class mu__subrange_93: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_93& val) { return mu__byte::operator=((int) val); };
  mu__subrange_93 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_93 (void): mu__byte(0, 3, 3) {};
  mu__subrange_93 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_93 mu__subrange_93_undefined_var;

class mu__subrange_94: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_94& val) { return mu__byte::operator=((int) val); };
  mu__subrange_94 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_94 (void): mu__byte(0, 3, 3) {};
  mu__subrange_94 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_94 mu__subrange_94_undefined_var;

class mu__subrange_95: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_95& val) { return mu__byte::operator=((int) val); };
  mu__subrange_95 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_95 (void): mu__byte(0, 3, 3) {};
  mu__subrange_95 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_95 mu__subrange_95_undefined_var;

class mu__subrange_96: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_96& val) { return mu__byte::operator=((int) val); };
  mu__subrange_96 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_96 (void): mu__byte(0, 3, 3) {};
  mu__subrange_96 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_96 mu__subrange_96_undefined_var;

class mu__subrange_97: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_97& val) { return mu__byte::operator=((int) val); };
  mu__subrange_97 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_97 (void): mu__byte(0, 3, 3) {};
  mu__subrange_97 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_97 mu__subrange_97_undefined_var;

class mu__subrange_98: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_98& val) { return mu__byte::operator=((int) val); };
  mu__subrange_98 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_98 (void): mu__byte(0, 3, 3) {};
  mu__subrange_98 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_98 mu__subrange_98_undefined_var;

class mu__subrange_99: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_99& val) { return mu__byte::operator=((int) val); };
  mu__subrange_99 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_99 (void): mu__byte(0, 3, 3) {};
  mu__subrange_99 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_99 mu__subrange_99_undefined_var;

class mu__subrange_100: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_100& val) { return mu__byte::operator=((int) val); };
  mu__subrange_100 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_100 (void): mu__byte(0, 3, 3) {};
  mu__subrange_100 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_100 mu__subrange_100_undefined_var;

class mu__subrange_101: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_101& val) { return mu__byte::operator=((int) val); };
  mu__subrange_101 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_101 (void): mu__byte(0, 3, 3) {};
  mu__subrange_101 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_101 mu__subrange_101_undefined_var;

class mu__subrange_102: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_102& val) { return mu__byte::operator=((int) val); };
  mu__subrange_102 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_102 (void): mu__byte(0, 3, 3) {};
  mu__subrange_102 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_102 mu__subrange_102_undefined_var;

class mu__subrange_103: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_103& val) { return mu__byte::operator=((int) val); };
  mu__subrange_103 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_103 (void): mu__byte(0, 3, 3) {};
  mu__subrange_103 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_103 mu__subrange_103_undefined_var;

class mu__subrange_104: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_104& val) { return mu__byte::operator=((int) val); };
  mu__subrange_104 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_104 (void): mu__byte(0, 3, 3) {};
  mu__subrange_104 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_104 mu__subrange_104_undefined_var;

class mu__subrange_105: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_105& val) { return mu__byte::operator=((int) val); };
  mu__subrange_105 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_105 (void): mu__byte(0, 3, 3) {};
  mu__subrange_105 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_105 mu__subrange_105_undefined_var;

class mu__subrange_106: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_106& val) { return mu__byte::operator=((int) val); };
  mu__subrange_106 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_106 (void): mu__byte(0, 3, 3) {};
  mu__subrange_106 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_106 mu__subrange_106_undefined_var;

class mu__subrange_107: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_107& val) { return mu__byte::operator=((int) val); };
  mu__subrange_107 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_107 (void): mu__byte(0, 3, 3) {};
  mu__subrange_107 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_107 mu__subrange_107_undefined_var;

class mu__subrange_108: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_108& val) { return mu__byte::operator=((int) val); };
  mu__subrange_108 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_108 (void): mu__byte(0, 3, 3) {};
  mu__subrange_108 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_108 mu__subrange_108_undefined_var;

class mu__subrange_109: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_109& val) { return mu__byte::operator=((int) val); };
  mu__subrange_109 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_109 (void): mu__byte(0, 3, 3) {};
  mu__subrange_109 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_109 mu__subrange_109_undefined_var;

class mu__subrange_110: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_110& val) { return mu__byte::operator=((int) val); };
  mu__subrange_110 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_110 (void): mu__byte(0, 3, 3) {};
  mu__subrange_110 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_110 mu__subrange_110_undefined_var;

class mu__subrange_111: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_111& val) { return mu__byte::operator=((int) val); };
  mu__subrange_111 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_111 (void): mu__byte(0, 3, 3) {};
  mu__subrange_111 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_111 mu__subrange_111_undefined_var;

class mu__subrange_112: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_112& val) { return mu__byte::operator=((int) val); };
  mu__subrange_112 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_112 (void): mu__byte(0, 3, 3) {};
  mu__subrange_112 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_112 mu__subrange_112_undefined_var;

class mu__subrange_113: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_113& val) { return mu__byte::operator=((int) val); };
  mu__subrange_113 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_113 (void): mu__byte(0, 3, 3) {};
  mu__subrange_113 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_113 mu__subrange_113_undefined_var;

class mu__subrange_114: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_114& val) { return mu__byte::operator=((int) val); };
  mu__subrange_114 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_114 (void): mu__byte(0, 3, 3) {};
  mu__subrange_114 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_114 mu__subrange_114_undefined_var;

class mu__subrange_115: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_115& val) { return mu__byte::operator=((int) val); };
  mu__subrange_115 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_115 (void): mu__byte(0, 3, 3) {};
  mu__subrange_115 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_115 mu__subrange_115_undefined_var;

class mu__subrange_116: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_116& val) { return mu__byte::operator=((int) val); };
  mu__subrange_116 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_116 (void): mu__byte(0, 3, 3) {};
  mu__subrange_116 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_116 mu__subrange_116_undefined_var;

class mu__subrange_117: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_117& val) { return mu__byte::operator=((int) val); };
  mu__subrange_117 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_117 (void): mu__byte(0, 3, 3) {};
  mu__subrange_117 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_117 mu__subrange_117_undefined_var;

class mu__subrange_118: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_118& val) { return mu__byte::operator=((int) val); };
  mu__subrange_118 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_118 (void): mu__byte(0, 3, 3) {};
  mu__subrange_118 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_118 mu__subrange_118_undefined_var;

class mu__subrange_119: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_119& val) { return mu__byte::operator=((int) val); };
  mu__subrange_119 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_119 (void): mu__byte(0, 3, 3) {};
  mu__subrange_119 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_119 mu__subrange_119_undefined_var;

class mu__subrange_120: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_120& val) { return mu__byte::operator=((int) val); };
  mu__subrange_120 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_120 (void): mu__byte(0, 3, 3) {};
  mu__subrange_120 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_120 mu__subrange_120_undefined_var;

class mu__subrange_121: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_121& val) { return mu__byte::operator=((int) val); };
  mu__subrange_121 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_121 (void): mu__byte(0, 3, 3) {};
  mu__subrange_121 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_121 mu__subrange_121_undefined_var;

class mu__subrange_122: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_122& val) { return mu__byte::operator=((int) val); };
  mu__subrange_122 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_122 (void): mu__byte(0, 3, 3) {};
  mu__subrange_122 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_122 mu__subrange_122_undefined_var;

class mu__subrange_123: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_123& val) { return mu__byte::operator=((int) val); };
  mu__subrange_123 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_123 (void): mu__byte(0, 3, 3) {};
  mu__subrange_123 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_123 mu__subrange_123_undefined_var;

class mu__subrange_124: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_124& val) { return mu__byte::operator=((int) val); };
  mu__subrange_124 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_124 (void): mu__byte(0, 3, 3) {};
  mu__subrange_124 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_124 mu__subrange_124_undefined_var;

class mu__subrange_125: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_125& val) { return mu__byte::operator=((int) val); };
  mu__subrange_125 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_125 (void): mu__byte(0, 3, 3) {};
  mu__subrange_125 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_125 mu__subrange_125_undefined_var;

class mu__subrange_126: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_126& val) { return mu__byte::operator=((int) val); };
  mu__subrange_126 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_126 (void): mu__byte(0, 3, 3) {};
  mu__subrange_126 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_126 mu__subrange_126_undefined_var;

class mu__subrange_127: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_127& val) { return mu__byte::operator=((int) val); };
  mu__subrange_127 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_127 (void): mu__byte(0, 3, 3) {};
  mu__subrange_127 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_127 mu__subrange_127_undefined_var;

class mu__subrange_128: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_128& val) { return mu__byte::operator=((int) val); };
  mu__subrange_128 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_128 (void): mu__byte(0, 3, 3) {};
  mu__subrange_128 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_128 mu__subrange_128_undefined_var;

class mu__subrange_129: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_129& val) { return mu__byte::operator=((int) val); };
  mu__subrange_129 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_129 (void): mu__byte(0, 3, 3) {};
  mu__subrange_129 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_129 mu__subrange_129_undefined_var;

class mu__subrange_130: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_130& val) { return mu__byte::operator=((int) val); };
  mu__subrange_130 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_130 (void): mu__byte(0, 3, 3) {};
  mu__subrange_130 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_130 mu__subrange_130_undefined_var;

class mu__subrange_131: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_131& val) { return mu__byte::operator=((int) val); };
  mu__subrange_131 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_131 (void): mu__byte(0, 3, 3) {};
  mu__subrange_131 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_131 mu__subrange_131_undefined_var;

class mu__subrange_132: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_132& val) { return mu__byte::operator=((int) val); };
  mu__subrange_132 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_132 (void): mu__byte(0, 3, 3) {};
  mu__subrange_132 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_132 mu__subrange_132_undefined_var;

class mu__subrange_133: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_133& val) { return mu__byte::operator=((int) val); };
  mu__subrange_133 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_133 (void): mu__byte(0, 3, 3) {};
  mu__subrange_133 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_133 mu__subrange_133_undefined_var;

class mu__subrange_134: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_134& val) { return mu__byte::operator=((int) val); };
  mu__subrange_134 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_134 (void): mu__byte(0, 3, 3) {};
  mu__subrange_134 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_134 mu__subrange_134_undefined_var;

class mu__subrange_135: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_135& val) { return mu__byte::operator=((int) val); };
  mu__subrange_135 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_135 (void): mu__byte(0, 3, 3) {};
  mu__subrange_135 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_135 mu__subrange_135_undefined_var;

class mu__subrange_136: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_136& val) { return mu__byte::operator=((int) val); };
  mu__subrange_136 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_136 (void): mu__byte(0, 3, 3) {};
  mu__subrange_136 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_136 mu__subrange_136_undefined_var;

class mu__subrange_137: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_137& val) { return mu__byte::operator=((int) val); };
  mu__subrange_137 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_137 (void): mu__byte(0, 3, 3) {};
  mu__subrange_137 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_137 mu__subrange_137_undefined_var;

class mu__subrange_138: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_138& val) { return mu__byte::operator=((int) val); };
  mu__subrange_138 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_138 (void): mu__byte(0, 3, 3) {};
  mu__subrange_138 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_138 mu__subrange_138_undefined_var;

class mu__subrange_139: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_139& val) { return mu__byte::operator=((int) val); };
  mu__subrange_139 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_139 (void): mu__byte(0, 3, 3) {};
  mu__subrange_139 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_139 mu__subrange_139_undefined_var;

class mu__subrange_140: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_140& val) { return mu__byte::operator=((int) val); };
  mu__subrange_140 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_140 (void): mu__byte(0, 3, 3) {};
  mu__subrange_140 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_140 mu__subrange_140_undefined_var;

class mu__subrange_141: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_141& val) { return mu__byte::operator=((int) val); };
  mu__subrange_141 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_141 (void): mu__byte(0, 3, 3) {};
  mu__subrange_141 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_141 mu__subrange_141_undefined_var;

class mu__subrange_142: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_142& val) { return mu__byte::operator=((int) val); };
  mu__subrange_142 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_142 (void): mu__byte(0, 3, 3) {};
  mu__subrange_142 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_142 mu__subrange_142_undefined_var;

class mu__subrange_143: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_143& val) { return mu__byte::operator=((int) val); };
  mu__subrange_143 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_143 (void): mu__byte(0, 3, 3) {};
  mu__subrange_143 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_143 mu__subrange_143_undefined_var;

class mu__subrange_144: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_144& val) { return mu__byte::operator=((int) val); };
  mu__subrange_144 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_144 (void): mu__byte(0, 3, 3) {};
  mu__subrange_144 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_144 mu__subrange_144_undefined_var;

class mu__subrange_145: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_145& val) { return mu__byte::operator=((int) val); };
  mu__subrange_145 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_145 (void): mu__byte(0, 3, 3) {};
  mu__subrange_145 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_145 mu__subrange_145_undefined_var;

class mu__subrange_146: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_146& val) { return mu__byte::operator=((int) val); };
  mu__subrange_146 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_146 (void): mu__byte(0, 3, 3) {};
  mu__subrange_146 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_146 mu__subrange_146_undefined_var;

class mu__subrange_147: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_147& val) { return mu__byte::operator=((int) val); };
  mu__subrange_147 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_147 (void): mu__byte(0, 3, 3) {};
  mu__subrange_147 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_147 mu__subrange_147_undefined_var;

class mu__subrange_148: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_148& val) { return mu__byte::operator=((int) val); };
  mu__subrange_148 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_148 (void): mu__byte(0, 3, 3) {};
  mu__subrange_148 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_148 mu__subrange_148_undefined_var;

class mu__subrange_149: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_149& val) { return mu__byte::operator=((int) val); };
  mu__subrange_149 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_149 (void): mu__byte(0, 3, 3) {};
  mu__subrange_149 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_149 mu__subrange_149_undefined_var;

class mu__subrange_150: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_150& val) { return mu__byte::operator=((int) val); };
  mu__subrange_150 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_150 (void): mu__byte(0, 3, 3) {};
  mu__subrange_150 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_150 mu__subrange_150_undefined_var;

class mu__subrange_151: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_151& val) { return mu__byte::operator=((int) val); };
  mu__subrange_151 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_151 (void): mu__byte(0, 3, 3) {};
  mu__subrange_151 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_151 mu__subrange_151_undefined_var;

class mu__subrange_152: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_152& val) { return mu__byte::operator=((int) val); };
  mu__subrange_152 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_152 (void): mu__byte(0, 3, 3) {};
  mu__subrange_152 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_152 mu__subrange_152_undefined_var;

class mu__subrange_153: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_153& val) { return mu__byte::operator=((int) val); };
  mu__subrange_153 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_153 (void): mu__byte(0, 3, 3) {};
  mu__subrange_153 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_153 mu__subrange_153_undefined_var;

class mu__subrange_154: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_154& val) { return mu__byte::operator=((int) val); };
  mu__subrange_154 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_154 (void): mu__byte(0, 3, 3) {};
  mu__subrange_154 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_154 mu__subrange_154_undefined_var;

class mu__subrange_155: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_155& val) { return mu__byte::operator=((int) val); };
  mu__subrange_155 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_155 (void): mu__byte(0, 3, 3) {};
  mu__subrange_155 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_155 mu__subrange_155_undefined_var;

class mu__subrange_156: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_156& val) { return mu__byte::operator=((int) val); };
  mu__subrange_156 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_156 (void): mu__byte(0, 3, 3) {};
  mu__subrange_156 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_156 mu__subrange_156_undefined_var;

class mu__subrange_157: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_157& val) { return mu__byte::operator=((int) val); };
  mu__subrange_157 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_157 (void): mu__byte(0, 3, 3) {};
  mu__subrange_157 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_157 mu__subrange_157_undefined_var;

class mu__subrange_158: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_158& val) { return mu__byte::operator=((int) val); };
  mu__subrange_158 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_158 (void): mu__byte(0, 3, 3) {};
  mu__subrange_158 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_158 mu__subrange_158_undefined_var;

class mu__subrange_159: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_159& val) { return mu__byte::operator=((int) val); };
  mu__subrange_159 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_159 (void): mu__byte(0, 3, 3) {};
  mu__subrange_159 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_159 mu__subrange_159_undefined_var;

class mu__subrange_160: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_160& val) { return mu__byte::operator=((int) val); };
  mu__subrange_160 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_160 (void): mu__byte(0, 3, 3) {};
  mu__subrange_160 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_160 mu__subrange_160_undefined_var;

class mu__subrange_161: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_161& val) { return mu__byte::operator=((int) val); };
  mu__subrange_161 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_161 (void): mu__byte(0, 3, 3) {};
  mu__subrange_161 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_161 mu__subrange_161_undefined_var;

class mu__subrange_162: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_162& val) { return mu__byte::operator=((int) val); };
  mu__subrange_162 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_162 (void): mu__byte(0, 3, 3) {};
  mu__subrange_162 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_162 mu__subrange_162_undefined_var;

class mu__subrange_163: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_163& val) { return mu__byte::operator=((int) val); };
  mu__subrange_163 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_163 (void): mu__byte(0, 3, 3) {};
  mu__subrange_163 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_163 mu__subrange_163_undefined_var;

class mu__subrange_164: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_164& val) { return mu__byte::operator=((int) val); };
  mu__subrange_164 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_164 (void): mu__byte(0, 3, 3) {};
  mu__subrange_164 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_164 mu__subrange_164_undefined_var;

class mu__subrange_165: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_165& val) { return mu__byte::operator=((int) val); };
  mu__subrange_165 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_165 (void): mu__byte(0, 3, 3) {};
  mu__subrange_165 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_165 mu__subrange_165_undefined_var;

class mu__subrange_166: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_166& val) { return mu__byte::operator=((int) val); };
  mu__subrange_166 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_166 (void): mu__byte(0, 3, 3) {};
  mu__subrange_166 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_166 mu__subrange_166_undefined_var;

class mu__subrange_167: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_167& val) { return mu__byte::operator=((int) val); };
  mu__subrange_167 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_167 (void): mu__byte(0, 3, 3) {};
  mu__subrange_167 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_167 mu__subrange_167_undefined_var;

class mu__subrange_168: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_168& val) { return mu__byte::operator=((int) val); };
  mu__subrange_168 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_168 (void): mu__byte(0, 3, 3) {};
  mu__subrange_168 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_168 mu__subrange_168_undefined_var;

class mu__subrange_169: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_169& val) { return mu__byte::operator=((int) val); };
  mu__subrange_169 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_169 (void): mu__byte(0, 3, 3) {};
  mu__subrange_169 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_169 mu__subrange_169_undefined_var;

class mu__subrange_170: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_170& val) { return mu__byte::operator=((int) val); };
  mu__subrange_170 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_170 (void): mu__byte(0, 3, 3) {};
  mu__subrange_170 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_170 mu__subrange_170_undefined_var;

class mu__subrange_171: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_171& val) { return mu__byte::operator=((int) val); };
  mu__subrange_171 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_171 (void): mu__byte(0, 3, 3) {};
  mu__subrange_171 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_171 mu__subrange_171_undefined_var;

class mu__subrange_172: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_172& val) { return mu__byte::operator=((int) val); };
  mu__subrange_172 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_172 (void): mu__byte(0, 3, 3) {};
  mu__subrange_172 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_172 mu__subrange_172_undefined_var;

class mu__subrange_173: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_173& val) { return mu__byte::operator=((int) val); };
  mu__subrange_173 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_173 (void): mu__byte(0, 3, 3) {};
  mu__subrange_173 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_173 mu__subrange_173_undefined_var;

class mu__subrange_174: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_174& val) { return mu__byte::operator=((int) val); };
  mu__subrange_174 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_174 (void): mu__byte(0, 3, 3) {};
  mu__subrange_174 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_174 mu__subrange_174_undefined_var;

class mu__subrange_175: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_175& val) { return mu__byte::operator=((int) val); };
  mu__subrange_175 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_175 (void): mu__byte(0, 3, 3) {};
  mu__subrange_175 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_175 mu__subrange_175_undefined_var;

class mu__subrange_176: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_176& val) { return mu__byte::operator=((int) val); };
  mu__subrange_176 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_176 (void): mu__byte(0, 3, 3) {};
  mu__subrange_176 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_176 mu__subrange_176_undefined_var;

class mu__subrange_177: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_177& val) { return mu__byte::operator=((int) val); };
  mu__subrange_177 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_177 (void): mu__byte(0, 3, 3) {};
  mu__subrange_177 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_177 mu__subrange_177_undefined_var;

class mu__subrange_178: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_178& val) { return mu__byte::operator=((int) val); };
  mu__subrange_178 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_178 (void): mu__byte(0, 3, 3) {};
  mu__subrange_178 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_178 mu__subrange_178_undefined_var;

class mu__subrange_179: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_179& val) { return mu__byte::operator=((int) val); };
  mu__subrange_179 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_179 (void): mu__byte(0, 3, 3) {};
  mu__subrange_179 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_179 mu__subrange_179_undefined_var;

class mu__subrange_180: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_180& val) { return mu__byte::operator=((int) val); };
  mu__subrange_180 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_180 (void): mu__byte(0, 3, 3) {};
  mu__subrange_180 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_180 mu__subrange_180_undefined_var;

class mu__subrange_181: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_181& val) { return mu__byte::operator=((int) val); };
  mu__subrange_181 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_181 (void): mu__byte(0, 3, 3) {};
  mu__subrange_181 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_181 mu__subrange_181_undefined_var;

class mu__subrange_182: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_182& val) { return mu__byte::operator=((int) val); };
  mu__subrange_182 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_182 (void): mu__byte(0, 3, 3) {};
  mu__subrange_182 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_182 mu__subrange_182_undefined_var;

class mu__subrange_183: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_183& val) { return mu__byte::operator=((int) val); };
  mu__subrange_183 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_183 (void): mu__byte(0, 3, 3) {};
  mu__subrange_183 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_183 mu__subrange_183_undefined_var;

class mu__subrange_184: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_184& val) { return mu__byte::operator=((int) val); };
  mu__subrange_184 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_184 (void): mu__byte(0, 3, 3) {};
  mu__subrange_184 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_184 mu__subrange_184_undefined_var;

class mu__subrange_185: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_185& val) { return mu__byte::operator=((int) val); };
  mu__subrange_185 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_185 (void): mu__byte(0, 3, 3) {};
  mu__subrange_185 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_185 mu__subrange_185_undefined_var;

class mu__subrange_186: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_186& val) { return mu__byte::operator=((int) val); };
  mu__subrange_186 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_186 (void): mu__byte(0, 3, 3) {};
  mu__subrange_186 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_186 mu__subrange_186_undefined_var;

class mu__subrange_187: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_187& val) { return mu__byte::operator=((int) val); };
  mu__subrange_187 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_187 (void): mu__byte(0, 3, 3) {};
  mu__subrange_187 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_187 mu__subrange_187_undefined_var;

class mu__subrange_188: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_188& val) { return mu__byte::operator=((int) val); };
  mu__subrange_188 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_188 (void): mu__byte(0, 3, 3) {};
  mu__subrange_188 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_188 mu__subrange_188_undefined_var;

class mu__subrange_189: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_189& val) { return mu__byte::operator=((int) val); };
  mu__subrange_189 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_189 (void): mu__byte(0, 3, 3) {};
  mu__subrange_189 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_189 mu__subrange_189_undefined_var;

class mu__subrange_190: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_190& val) { return mu__byte::operator=((int) val); };
  mu__subrange_190 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_190 (void): mu__byte(0, 3, 3) {};
  mu__subrange_190 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_190 mu__subrange_190_undefined_var;

class mu__subrange_191: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_191& val) { return mu__byte::operator=((int) val); };
  mu__subrange_191 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_191 (void): mu__byte(0, 3, 3) {};
  mu__subrange_191 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_191 mu__subrange_191_undefined_var;

class mu__subrange_192: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_192& val) { return mu__byte::operator=((int) val); };
  mu__subrange_192 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_192 (void): mu__byte(0, 3, 3) {};
  mu__subrange_192 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_192 mu__subrange_192_undefined_var;

class mu__subrange_193: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_193& val) { return mu__byte::operator=((int) val); };
  mu__subrange_193 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_193 (void): mu__byte(0, 3, 3) {};
  mu__subrange_193 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_193 mu__subrange_193_undefined_var;

class mu__subrange_194: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_194& val) { return mu__byte::operator=((int) val); };
  mu__subrange_194 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_194 (void): mu__byte(0, 3, 3) {};
  mu__subrange_194 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_194 mu__subrange_194_undefined_var;

class mu__subrange_195: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_195& val) { return mu__byte::operator=((int) val); };
  mu__subrange_195 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_195 (void): mu__byte(0, 3, 3) {};
  mu__subrange_195 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_195 mu__subrange_195_undefined_var;

class mu__subrange_196: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_196& val) { return mu__byte::operator=((int) val); };
  mu__subrange_196 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_196 (void): mu__byte(0, 3, 3) {};
  mu__subrange_196 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_196 mu__subrange_196_undefined_var;

class mu__subrange_197: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_197& val) { return mu__byte::operator=((int) val); };
  mu__subrange_197 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_197 (void): mu__byte(0, 3, 3) {};
  mu__subrange_197 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_197 mu__subrange_197_undefined_var;

class mu__subrange_198: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_198& val) { return mu__byte::operator=((int) val); };
  mu__subrange_198 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_198 (void): mu__byte(0, 3, 3) {};
  mu__subrange_198 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_198 mu__subrange_198_undefined_var;

class mu__subrange_199: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_199& val) { return mu__byte::operator=((int) val); };
  mu__subrange_199 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_199 (void): mu__byte(0, 3, 3) {};
  mu__subrange_199 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_199 mu__subrange_199_undefined_var;

class mu__subrange_200: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_200& val) { return mu__byte::operator=((int) val); };
  mu__subrange_200 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_200 (void): mu__byte(0, 3, 3) {};
  mu__subrange_200 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_200 mu__subrange_200_undefined_var;

class mu__subrange_201: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_201& val) { return mu__byte::operator=((int) val); };
  mu__subrange_201 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_201 (void): mu__byte(0, 3, 3) {};
  mu__subrange_201 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_201 mu__subrange_201_undefined_var;

class mu__subrange_202: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_202& val) { return mu__byte::operator=((int) val); };
  mu__subrange_202 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_202 (void): mu__byte(0, 3, 3) {};
  mu__subrange_202 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_202 mu__subrange_202_undefined_var;

class mu__subrange_203: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_203& val) { return mu__byte::operator=((int) val); };
  mu__subrange_203 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_203 (void): mu__byte(0, 3, 3) {};
  mu__subrange_203 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_203 mu__subrange_203_undefined_var;

class mu__subrange_204: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_204& val) { return mu__byte::operator=((int) val); };
  mu__subrange_204 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_204 (void): mu__byte(0, 3, 3) {};
  mu__subrange_204 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_204 mu__subrange_204_undefined_var;

class mu__subrange_205: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_205& val) { return mu__byte::operator=((int) val); };
  mu__subrange_205 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_205 (void): mu__byte(0, 3, 3) {};
  mu__subrange_205 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_205 mu__subrange_205_undefined_var;

class mu__subrange_206: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_206& val) { return mu__byte::operator=((int) val); };
  mu__subrange_206 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_206 (void): mu__byte(0, 3, 3) {};
  mu__subrange_206 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_206 mu__subrange_206_undefined_var;

class mu__subrange_207: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_207& val) { return mu__byte::operator=((int) val); };
  mu__subrange_207 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_207 (void): mu__byte(0, 3, 3) {};
  mu__subrange_207 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_207 mu__subrange_207_undefined_var;

class mu__subrange_208: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_208& val) { return mu__byte::operator=((int) val); };
  mu__subrange_208 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_208 (void): mu__byte(0, 3, 3) {};
  mu__subrange_208 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_208 mu__subrange_208_undefined_var;

class mu__subrange_209: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_209& val) { return mu__byte::operator=((int) val); };
  mu__subrange_209 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_209 (void): mu__byte(0, 3, 3) {};
  mu__subrange_209 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_209 mu__subrange_209_undefined_var;

class mu__subrange_210: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_210& val) { return mu__byte::operator=((int) val); };
  mu__subrange_210 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_210 (void): mu__byte(0, 3, 3) {};
  mu__subrange_210 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_210 mu__subrange_210_undefined_var;

class mu__subrange_211: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_211& val) { return mu__byte::operator=((int) val); };
  mu__subrange_211 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_211 (void): mu__byte(0, 3, 3) {};
  mu__subrange_211 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_211 mu__subrange_211_undefined_var;

class mu__subrange_212: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_212& val) { return mu__byte::operator=((int) val); };
  mu__subrange_212 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_212 (void): mu__byte(0, 3, 3) {};
  mu__subrange_212 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_212 mu__subrange_212_undefined_var;

class mu__subrange_213: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_213& val) { return mu__byte::operator=((int) val); };
  mu__subrange_213 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_213 (void): mu__byte(0, 3, 3) {};
  mu__subrange_213 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_213 mu__subrange_213_undefined_var;

class mu__subrange_214: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_214& val) { return mu__byte::operator=((int) val); };
  mu__subrange_214 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_214 (void): mu__byte(0, 3, 3) {};
  mu__subrange_214 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_214 mu__subrange_214_undefined_var;

class mu__subrange_215: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_215& val) { return mu__byte::operator=((int) val); };
  mu__subrange_215 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_215 (void): mu__byte(0, 3, 3) {};
  mu__subrange_215 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_215 mu__subrange_215_undefined_var;

class mu__subrange_216: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_216& val) { return mu__byte::operator=((int) val); };
  mu__subrange_216 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_216 (void): mu__byte(0, 3, 3) {};
  mu__subrange_216 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_216 mu__subrange_216_undefined_var;

class mu__subrange_217: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_217& val) { return mu__byte::operator=((int) val); };
  mu__subrange_217 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_217 (void): mu__byte(0, 3, 3) {};
  mu__subrange_217 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_217 mu__subrange_217_undefined_var;

class mu__subrange_218: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_218& val) { return mu__byte::operator=((int) val); };
  mu__subrange_218 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_218 (void): mu__byte(0, 3, 3) {};
  mu__subrange_218 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_218 mu__subrange_218_undefined_var;

class mu__subrange_219: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_219& val) { return mu__byte::operator=((int) val); };
  mu__subrange_219 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_219 (void): mu__byte(0, 3, 3) {};
  mu__subrange_219 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_219 mu__subrange_219_undefined_var;

class mu__subrange_220: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_220& val) { return mu__byte::operator=((int) val); };
  mu__subrange_220 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_220 (void): mu__byte(0, 3, 3) {};
  mu__subrange_220 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_220 mu__subrange_220_undefined_var;

class mu__subrange_221: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_221& val) { return mu__byte::operator=((int) val); };
  mu__subrange_221 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_221 (void): mu__byte(0, 3, 3) {};
  mu__subrange_221 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_221 mu__subrange_221_undefined_var;

class mu__subrange_222: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_222& val) { return mu__byte::operator=((int) val); };
  mu__subrange_222 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_222 (void): mu__byte(0, 3, 3) {};
  mu__subrange_222 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_222 mu__subrange_222_undefined_var;

class mu__subrange_223: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_223& val) { return mu__byte::operator=((int) val); };
  mu__subrange_223 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_223 (void): mu__byte(0, 3, 3) {};
  mu__subrange_223 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_223 mu__subrange_223_undefined_var;

class mu__subrange_224: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_224& val) { return mu__byte::operator=((int) val); };
  mu__subrange_224 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_224 (void): mu__byte(0, 3, 3) {};
  mu__subrange_224 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_224 mu__subrange_224_undefined_var;

class mu__subrange_225: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_225& val) { return mu__byte::operator=((int) val); };
  mu__subrange_225 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_225 (void): mu__byte(0, 3, 3) {};
  mu__subrange_225 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_225 mu__subrange_225_undefined_var;

class mu__subrange_226: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_226& val) { return mu__byte::operator=((int) val); };
  mu__subrange_226 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_226 (void): mu__byte(0, 3, 3) {};
  mu__subrange_226 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_226 mu__subrange_226_undefined_var;

class mu__subrange_227: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_227& val) { return mu__byte::operator=((int) val); };
  mu__subrange_227 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_227 (void): mu__byte(0, 3, 3) {};
  mu__subrange_227 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_227 mu__subrange_227_undefined_var;

class mu__subrange_228: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_228& val) { return mu__byte::operator=((int) val); };
  mu__subrange_228 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_228 (void): mu__byte(0, 3, 3) {};
  mu__subrange_228 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_228 mu__subrange_228_undefined_var;

class mu__subrange_229: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_229& val) { return mu__byte::operator=((int) val); };
  mu__subrange_229 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_229 (void): mu__byte(0, 3, 3) {};
  mu__subrange_229 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_229 mu__subrange_229_undefined_var;

class mu__subrange_230: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_230& val) { return mu__byte::operator=((int) val); };
  mu__subrange_230 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_230 (void): mu__byte(0, 3, 3) {};
  mu__subrange_230 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_230 mu__subrange_230_undefined_var;

class mu__subrange_231: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_231& val) { return mu__byte::operator=((int) val); };
  mu__subrange_231 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_231 (void): mu__byte(0, 3, 3) {};
  mu__subrange_231 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_231 mu__subrange_231_undefined_var;

class mu__subrange_232: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_232& val) { return mu__byte::operator=((int) val); };
  mu__subrange_232 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_232 (void): mu__byte(0, 3, 3) {};
  mu__subrange_232 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_232 mu__subrange_232_undefined_var;

class mu__subrange_233: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_233& val) { return mu__byte::operator=((int) val); };
  mu__subrange_233 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_233 (void): mu__byte(0, 3, 3) {};
  mu__subrange_233 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_233 mu__subrange_233_undefined_var;

class mu__subrange_234: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_234& val) { return mu__byte::operator=((int) val); };
  mu__subrange_234 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_234 (void): mu__byte(0, 3, 3) {};
  mu__subrange_234 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_234 mu__subrange_234_undefined_var;

class mu__subrange_235: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_235& val) { return mu__byte::operator=((int) val); };
  mu__subrange_235 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_235 (void): mu__byte(0, 3, 3) {};
  mu__subrange_235 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_235 mu__subrange_235_undefined_var;

class mu__subrange_236: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_236& val) { return mu__byte::operator=((int) val); };
  mu__subrange_236 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_236 (void): mu__byte(0, 3, 3) {};
  mu__subrange_236 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_236 mu__subrange_236_undefined_var;

class mu__subrange_237: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_237& val) { return mu__byte::operator=((int) val); };
  mu__subrange_237 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_237 (void): mu__byte(0, 3, 3) {};
  mu__subrange_237 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_237 mu__subrange_237_undefined_var;

class mu__subrange_238: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_238& val) { return mu__byte::operator=((int) val); };
  mu__subrange_238 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_238 (void): mu__byte(0, 3, 3) {};
  mu__subrange_238 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_238 mu__subrange_238_undefined_var;

class mu__subrange_239: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_239& val) { return mu__byte::operator=((int) val); };
  mu__subrange_239 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_239 (void): mu__byte(0, 3, 3) {};
  mu__subrange_239 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_239 mu__subrange_239_undefined_var;

class mu__subrange_240: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_240& val) { return mu__byte::operator=((int) val); };
  mu__subrange_240 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_240 (void): mu__byte(0, 3, 3) {};
  mu__subrange_240 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_240 mu__subrange_240_undefined_var;

class mu__subrange_241: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_241& val) { return mu__byte::operator=((int) val); };
  mu__subrange_241 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_241 (void): mu__byte(0, 3, 3) {};
  mu__subrange_241 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_241 mu__subrange_241_undefined_var;

class mu__subrange_242: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_242& val) { return mu__byte::operator=((int) val); };
  mu__subrange_242 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_242 (void): mu__byte(0, 3, 3) {};
  mu__subrange_242 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_242 mu__subrange_242_undefined_var;

class mu__subrange_243: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_243& val) { return mu__byte::operator=((int) val); };
  mu__subrange_243 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_243 (void): mu__byte(0, 3, 3) {};
  mu__subrange_243 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_243 mu__subrange_243_undefined_var;

class mu__subrange_244: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_244& val) { return mu__byte::operator=((int) val); };
  mu__subrange_244 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_244 (void): mu__byte(0, 3, 3) {};
  mu__subrange_244 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_244 mu__subrange_244_undefined_var;

class mu__subrange_245: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_245& val) { return mu__byte::operator=((int) val); };
  mu__subrange_245 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_245 (void): mu__byte(0, 3, 3) {};
  mu__subrange_245 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_245 mu__subrange_245_undefined_var;

class mu__subrange_246: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_246& val) { return mu__byte::operator=((int) val); };
  mu__subrange_246 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_246 (void): mu__byte(0, 3, 3) {};
  mu__subrange_246 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_246 mu__subrange_246_undefined_var;

class mu__subrange_247: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_247& val) { return mu__byte::operator=((int) val); };
  mu__subrange_247 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_247 (void): mu__byte(0, 3, 3) {};
  mu__subrange_247 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_247 mu__subrange_247_undefined_var;

class mu__subrange_248: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_248& val) { return mu__byte::operator=((int) val); };
  mu__subrange_248 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_248 (void): mu__byte(0, 3, 3) {};
  mu__subrange_248 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_248 mu__subrange_248_undefined_var;

class mu__subrange_249: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_249& val) { return mu__byte::operator=((int) val); };
  mu__subrange_249 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_249 (void): mu__byte(0, 3, 3) {};
  mu__subrange_249 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_249 mu__subrange_249_undefined_var;

class mu__subrange_250: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_250& val) { return mu__byte::operator=((int) val); };
  mu__subrange_250 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_250 (void): mu__byte(0, 3, 3) {};
  mu__subrange_250 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_250 mu__subrange_250_undefined_var;

class mu__subrange_251: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_251& val) { return mu__byte::operator=((int) val); };
  mu__subrange_251 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_251 (void): mu__byte(0, 3, 3) {};
  mu__subrange_251 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_251 mu__subrange_251_undefined_var;

class mu__subrange_252: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_252& val) { return mu__byte::operator=((int) val); };
  mu__subrange_252 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_252 (void): mu__byte(0, 3, 3) {};
  mu__subrange_252 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_252 mu__subrange_252_undefined_var;

class mu__subrange_253: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_253& val) { return mu__byte::operator=((int) val); };
  mu__subrange_253 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_253 (void): mu__byte(0, 3, 3) {};
  mu__subrange_253 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_253 mu__subrange_253_undefined_var;

class mu__subrange_254: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_254& val) { return mu__byte::operator=((int) val); };
  mu__subrange_254 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_254 (void): mu__byte(0, 3, 3) {};
  mu__subrange_254 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_254 mu__subrange_254_undefined_var;

class mu__subrange_255: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_255& val) { return mu__byte::operator=((int) val); };
  mu__subrange_255 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_255 (void): mu__byte(0, 3, 3) {};
  mu__subrange_255 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_255 mu__subrange_255_undefined_var;

class mu__subrange_256: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_256& val) { return mu__byte::operator=((int) val); };
  mu__subrange_256 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_256 (void): mu__byte(0, 3, 3) {};
  mu__subrange_256 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_256 mu__subrange_256_undefined_var;

class mu__subrange_257: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_257& val) { return mu__byte::operator=((int) val); };
  mu__subrange_257 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_257 (void): mu__byte(0, 3, 3) {};
  mu__subrange_257 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_257 mu__subrange_257_undefined_var;

class mu__subrange_258: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_258& val) { return mu__byte::operator=((int) val); };
  mu__subrange_258 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_258 (void): mu__byte(0, 3, 3) {};
  mu__subrange_258 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_258 mu__subrange_258_undefined_var;

class mu__subrange_259: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_259& val) { return mu__byte::operator=((int) val); };
  mu__subrange_259 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_259 (void): mu__byte(0, 3, 3) {};
  mu__subrange_259 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_259 mu__subrange_259_undefined_var;

class mu__subrange_260: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_260& val) { return mu__byte::operator=((int) val); };
  mu__subrange_260 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_260 (void): mu__byte(0, 3, 3) {};
  mu__subrange_260 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_260 mu__subrange_260_undefined_var;

class mu__subrange_261: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_261& val) { return mu__byte::operator=((int) val); };
  mu__subrange_261 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_261 (void): mu__byte(0, 3, 3) {};
  mu__subrange_261 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_261 mu__subrange_261_undefined_var;

class mu__subrange_262: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_262& val) { return mu__byte::operator=((int) val); };
  mu__subrange_262 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_262 (void): mu__byte(0, 3, 3) {};
  mu__subrange_262 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_262 mu__subrange_262_undefined_var;

class mu__subrange_263: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_263& val) { return mu__byte::operator=((int) val); };
  mu__subrange_263 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_263 (void): mu__byte(0, 3, 3) {};
  mu__subrange_263 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_263 mu__subrange_263_undefined_var;

class mu__subrange_264: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_264& val) { return mu__byte::operator=((int) val); };
  mu__subrange_264 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_264 (void): mu__byte(0, 3, 3) {};
  mu__subrange_264 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_264 mu__subrange_264_undefined_var;

class mu__subrange_265: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_265& val) { return mu__byte::operator=((int) val); };
  mu__subrange_265 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_265 (void): mu__byte(0, 3, 3) {};
  mu__subrange_265 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_265 mu__subrange_265_undefined_var;

class mu__subrange_266: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_266& val) { return mu__byte::operator=((int) val); };
  mu__subrange_266 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_266 (void): mu__byte(0, 3, 3) {};
  mu__subrange_266 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_266 mu__subrange_266_undefined_var;

class mu__subrange_267: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_267& val) { return mu__byte::operator=((int) val); };
  mu__subrange_267 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_267 (void): mu__byte(0, 3, 3) {};
  mu__subrange_267 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_267 mu__subrange_267_undefined_var;

class mu__subrange_268: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_268& val) { return mu__byte::operator=((int) val); };
  mu__subrange_268 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_268 (void): mu__byte(0, 3, 3) {};
  mu__subrange_268 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_268 mu__subrange_268_undefined_var;

class mu__subrange_269: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_269& val) { return mu__byte::operator=((int) val); };
  mu__subrange_269 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_269 (void): mu__byte(0, 3, 3) {};
  mu__subrange_269 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_269 mu__subrange_269_undefined_var;

class mu__subrange_270: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_270& val) { return mu__byte::operator=((int) val); };
  mu__subrange_270 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_270 (void): mu__byte(0, 3, 3) {};
  mu__subrange_270 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_270 mu__subrange_270_undefined_var;

class mu__subrange_271: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_271& val) { return mu__byte::operator=((int) val); };
  mu__subrange_271 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_271 (void): mu__byte(0, 3, 3) {};
  mu__subrange_271 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_271 mu__subrange_271_undefined_var;

class mu__subrange_272: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_272& val) { return mu__byte::operator=((int) val); };
  mu__subrange_272 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_272 (void): mu__byte(0, 3, 3) {};
  mu__subrange_272 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_272 mu__subrange_272_undefined_var;

class mu__subrange_273: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_273& val) { return mu__byte::operator=((int) val); };
  mu__subrange_273 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_273 (void): mu__byte(0, 3, 3) {};
  mu__subrange_273 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_273 mu__subrange_273_undefined_var;

class mu__subrange_274: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_274& val) { return mu__byte::operator=((int) val); };
  mu__subrange_274 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_274 (void): mu__byte(0, 3, 3) {};
  mu__subrange_274 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_274 mu__subrange_274_undefined_var;

class mu__subrange_275: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_275& val) { return mu__byte::operator=((int) val); };
  mu__subrange_275 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_275 (void): mu__byte(0, 3, 3) {};
  mu__subrange_275 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_275 mu__subrange_275_undefined_var;

class mu__subrange_276: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_276& val) { return mu__byte::operator=((int) val); };
  mu__subrange_276 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_276 (void): mu__byte(0, 3, 3) {};
  mu__subrange_276 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_276 mu__subrange_276_undefined_var;

class mu__subrange_277: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_277& val) { return mu__byte::operator=((int) val); };
  mu__subrange_277 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_277 (void): mu__byte(0, 3, 3) {};
  mu__subrange_277 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_277 mu__subrange_277_undefined_var;

class mu__subrange_278: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_278& val) { return mu__byte::operator=((int) val); };
  mu__subrange_278 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_278 (void): mu__byte(0, 3, 3) {};
  mu__subrange_278 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_278 mu__subrange_278_undefined_var;

class mu__subrange_279: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_279& val) { return mu__byte::operator=((int) val); };
  mu__subrange_279 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_279 (void): mu__byte(0, 3, 3) {};
  mu__subrange_279 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_279 mu__subrange_279_undefined_var;

class mu__subrange_280: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_280& val) { return mu__byte::operator=((int) val); };
  mu__subrange_280 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_280 (void): mu__byte(0, 3, 3) {};
  mu__subrange_280 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_280 mu__subrange_280_undefined_var;

class mu__subrange_281: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_281& val) { return mu__byte::operator=((int) val); };
  mu__subrange_281 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_281 (void): mu__byte(0, 3, 3) {};
  mu__subrange_281 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_281 mu__subrange_281_undefined_var;

class mu__subrange_282: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_282& val) { return mu__byte::operator=((int) val); };
  mu__subrange_282 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_282 (void): mu__byte(0, 3, 3) {};
  mu__subrange_282 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_282 mu__subrange_282_undefined_var;

class mu__subrange_283: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_283& val) { return mu__byte::operator=((int) val); };
  mu__subrange_283 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_283 (void): mu__byte(0, 3, 3) {};
  mu__subrange_283 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_283 mu__subrange_283_undefined_var;

class mu__subrange_284: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_284& val) { return mu__byte::operator=((int) val); };
  mu__subrange_284 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_284 (void): mu__byte(0, 3, 3) {};
  mu__subrange_284 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_284 mu__subrange_284_undefined_var;

class mu__subrange_285: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_285& val) { return mu__byte::operator=((int) val); };
  mu__subrange_285 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_285 (void): mu__byte(0, 3, 3) {};
  mu__subrange_285 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_285 mu__subrange_285_undefined_var;

class mu__subrange_286: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_286& val) { return mu__byte::operator=((int) val); };
  mu__subrange_286 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_286 (void): mu__byte(0, 3, 3) {};
  mu__subrange_286 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_286 mu__subrange_286_undefined_var;

class mu__subrange_287: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_287& val) { return mu__byte::operator=((int) val); };
  mu__subrange_287 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_287 (void): mu__byte(0, 3, 3) {};
  mu__subrange_287 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_287 mu__subrange_287_undefined_var;

class mu__subrange_288: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_288& val) { return mu__byte::operator=((int) val); };
  mu__subrange_288 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_288 (void): mu__byte(0, 3, 3) {};
  mu__subrange_288 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_288 mu__subrange_288_undefined_var;

class mu__subrange_289: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_289& val) { return mu__byte::operator=((int) val); };
  mu__subrange_289 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_289 (void): mu__byte(0, 3, 3) {};
  mu__subrange_289 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_289 mu__subrange_289_undefined_var;

class mu__subrange_290: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_290& val) { return mu__byte::operator=((int) val); };
  mu__subrange_290 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_290 (void): mu__byte(0, 3, 3) {};
  mu__subrange_290 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_290 mu__subrange_290_undefined_var;

class mu__subrange_291: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_291& val) { return mu__byte::operator=((int) val); };
  mu__subrange_291 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_291 (void): mu__byte(0, 3, 3) {};
  mu__subrange_291 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_291 mu__subrange_291_undefined_var;

class mu__subrange_292: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_292& val) { return mu__byte::operator=((int) val); };
  mu__subrange_292 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_292 (void): mu__byte(0, 3, 3) {};
  mu__subrange_292 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_292 mu__subrange_292_undefined_var;

class mu__subrange_293: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_293& val) { return mu__byte::operator=((int) val); };
  mu__subrange_293 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_293 (void): mu__byte(0, 3, 3) {};
  mu__subrange_293 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_293 mu__subrange_293_undefined_var;

class mu__subrange_294: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_294& val) { return mu__byte::operator=((int) val); };
  mu__subrange_294 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_294 (void): mu__byte(0, 3, 3) {};
  mu__subrange_294 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_294 mu__subrange_294_undefined_var;

class mu__subrange_295: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_295& val) { return mu__byte::operator=((int) val); };
  mu__subrange_295 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_295 (void): mu__byte(0, 3, 3) {};
  mu__subrange_295 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_295 mu__subrange_295_undefined_var;

class mu__subrange_296: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_296& val) { return mu__byte::operator=((int) val); };
  mu__subrange_296 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_296 (void): mu__byte(0, 3, 3) {};
  mu__subrange_296 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_296 mu__subrange_296_undefined_var;

class mu__subrange_297: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_297& val) { return mu__byte::operator=((int) val); };
  mu__subrange_297 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_297 (void): mu__byte(0, 3, 3) {};
  mu__subrange_297 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_297 mu__subrange_297_undefined_var;

class mu__subrange_298: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_298& val) { return mu__byte::operator=((int) val); };
  mu__subrange_298 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_298 (void): mu__byte(0, 3, 3) {};
  mu__subrange_298 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_298 mu__subrange_298_undefined_var;

class mu__subrange_299: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_299& val) { return mu__byte::operator=((int) val); };
  mu__subrange_299 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_299 (void): mu__byte(0, 3, 3) {};
  mu__subrange_299 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_299 mu__subrange_299_undefined_var;

class mu__subrange_300: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_300& val) { return mu__byte::operator=((int) val); };
  mu__subrange_300 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_300 (void): mu__byte(0, 3, 3) {};
  mu__subrange_300 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_300 mu__subrange_300_undefined_var;

class mu__subrange_301: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_301& val) { return mu__byte::operator=((int) val); };
  mu__subrange_301 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_301 (void): mu__byte(0, 3, 3) {};
  mu__subrange_301 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_301 mu__subrange_301_undefined_var;

class mu__subrange_302: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_302& val) { return mu__byte::operator=((int) val); };
  mu__subrange_302 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_302 (void): mu__byte(0, 3, 3) {};
  mu__subrange_302 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_302 mu__subrange_302_undefined_var;

class mu__subrange_303: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_303& val) { return mu__byte::operator=((int) val); };
  mu__subrange_303 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_303 (void): mu__byte(0, 3, 3) {};
  mu__subrange_303 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_303 mu__subrange_303_undefined_var;

class mu__subrange_304: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_304& val) { return mu__byte::operator=((int) val); };
  mu__subrange_304 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_304 (void): mu__byte(0, 3, 3) {};
  mu__subrange_304 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_304 mu__subrange_304_undefined_var;

class mu__subrange_305: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_305& val) { return mu__byte::operator=((int) val); };
  mu__subrange_305 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_305 (void): mu__byte(0, 3, 3) {};
  mu__subrange_305 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_305 mu__subrange_305_undefined_var;

class mu__subrange_306: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_306& val) { return mu__byte::operator=((int) val); };
  mu__subrange_306 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_306 (void): mu__byte(0, 3, 3) {};
  mu__subrange_306 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_306 mu__subrange_306_undefined_var;

class mu__subrange_307: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_307& val) { return mu__byte::operator=((int) val); };
  mu__subrange_307 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_307 (void): mu__byte(0, 3, 3) {};
  mu__subrange_307 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_307 mu__subrange_307_undefined_var;

class mu__subrange_308: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_308& val) { return mu__byte::operator=((int) val); };
  mu__subrange_308 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_308 (void): mu__byte(0, 3, 3) {};
  mu__subrange_308 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_308 mu__subrange_308_undefined_var;

class mu__subrange_309: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_309& val) { return mu__byte::operator=((int) val); };
  mu__subrange_309 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_309 (void): mu__byte(0, 3, 3) {};
  mu__subrange_309 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_309 mu__subrange_309_undefined_var;

class mu__subrange_310: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_310& val) { return mu__byte::operator=((int) val); };
  mu__subrange_310 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_310 (void): mu__byte(0, 3, 3) {};
  mu__subrange_310 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_310 mu__subrange_310_undefined_var;

class mu__subrange_311: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_311& val) { return mu__byte::operator=((int) val); };
  mu__subrange_311 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_311 (void): mu__byte(0, 3, 3) {};
  mu__subrange_311 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_311 mu__subrange_311_undefined_var;

class mu__subrange_312: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_312& val) { return mu__byte::operator=((int) val); };
  mu__subrange_312 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_312 (void): mu__byte(0, 3, 3) {};
  mu__subrange_312 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_312 mu__subrange_312_undefined_var;

class mu__subrange_313: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_313& val) { return mu__byte::operator=((int) val); };
  mu__subrange_313 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_313 (void): mu__byte(0, 3, 3) {};
  mu__subrange_313 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_313 mu__subrange_313_undefined_var;

class mu__subrange_314: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_314& val) { return mu__byte::operator=((int) val); };
  mu__subrange_314 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_314 (void): mu__byte(0, 3, 3) {};
  mu__subrange_314 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_314 mu__subrange_314_undefined_var;

class mu__subrange_315: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_315& val) { return mu__byte::operator=((int) val); };
  mu__subrange_315 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_315 (void): mu__byte(0, 3, 3) {};
  mu__subrange_315 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_315 mu__subrange_315_undefined_var;

class mu__subrange_316: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_316& val) { return mu__byte::operator=((int) val); };
  mu__subrange_316 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_316 (void): mu__byte(0, 3, 3) {};
  mu__subrange_316 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_316 mu__subrange_316_undefined_var;

class mu__subrange_317: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_317& val) { return mu__byte::operator=((int) val); };
  mu__subrange_317 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_317 (void): mu__byte(0, 3, 3) {};
  mu__subrange_317 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_317 mu__subrange_317_undefined_var;

class mu__subrange_318: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_318& val) { return mu__byte::operator=((int) val); };
  mu__subrange_318 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_318 (void): mu__byte(0, 3, 3) {};
  mu__subrange_318 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_318 mu__subrange_318_undefined_var;

class mu__subrange_319: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_319& val) { return mu__byte::operator=((int) val); };
  mu__subrange_319 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_319 (void): mu__byte(0, 3, 3) {};
  mu__subrange_319 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_319 mu__subrange_319_undefined_var;

class mu__subrange_320: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_320& val) { return mu__byte::operator=((int) val); };
  mu__subrange_320 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_320 (void): mu__byte(0, 3, 3) {};
  mu__subrange_320 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_320 mu__subrange_320_undefined_var;

class mu__subrange_321: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_321& val) { return mu__byte::operator=((int) val); };
  mu__subrange_321 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_321 (void): mu__byte(0, 3, 3) {};
  mu__subrange_321 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_321 mu__subrange_321_undefined_var;

class mu__subrange_322: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_322& val) { return mu__byte::operator=((int) val); };
  mu__subrange_322 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_322 (void): mu__byte(0, 3, 3) {};
  mu__subrange_322 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_322 mu__subrange_322_undefined_var;

class mu__subrange_323: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_323& val) { return mu__byte::operator=((int) val); };
  mu__subrange_323 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_323 (void): mu__byte(0, 3, 3) {};
  mu__subrange_323 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_323 mu__subrange_323_undefined_var;

class mu__subrange_324: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_324& val) { return mu__byte::operator=((int) val); };
  mu__subrange_324 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_324 (void): mu__byte(0, 3, 3) {};
  mu__subrange_324 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_324 mu__subrange_324_undefined_var;

class mu__subrange_325: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_325& val) { return mu__byte::operator=((int) val); };
  mu__subrange_325 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_325 (void): mu__byte(0, 3, 3) {};
  mu__subrange_325 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_325 mu__subrange_325_undefined_var;

class mu__subrange_326: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_326& val) { return mu__byte::operator=((int) val); };
  mu__subrange_326 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_326 (void): mu__byte(0, 3, 3) {};
  mu__subrange_326 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_326 mu__subrange_326_undefined_var;

class mu__subrange_327: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_327& val) { return mu__byte::operator=((int) val); };
  mu__subrange_327 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_327 (void): mu__byte(0, 3, 3) {};
  mu__subrange_327 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_327 mu__subrange_327_undefined_var;

class mu__subrange_328: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_328& val) { return mu__byte::operator=((int) val); };
  mu__subrange_328 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_328 (void): mu__byte(0, 3, 3) {};
  mu__subrange_328 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_328 mu__subrange_328_undefined_var;

class mu__subrange_329: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_329& val) { return mu__byte::operator=((int) val); };
  mu__subrange_329 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_329 (void): mu__byte(0, 3, 3) {};
  mu__subrange_329 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_329 mu__subrange_329_undefined_var;

class mu__subrange_330: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_330& val) { return mu__byte::operator=((int) val); };
  mu__subrange_330 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_330 (void): mu__byte(0, 3, 3) {};
  mu__subrange_330 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_330 mu__subrange_330_undefined_var;

class mu__subrange_331: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_331& val) { return mu__byte::operator=((int) val); };
  mu__subrange_331 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_331 (void): mu__byte(0, 3, 3) {};
  mu__subrange_331 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_331 mu__subrange_331_undefined_var;

class mu__subrange_332: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_332& val) { return mu__byte::operator=((int) val); };
  mu__subrange_332 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_332 (void): mu__byte(0, 3, 3) {};
  mu__subrange_332 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_332 mu__subrange_332_undefined_var;

class mu__subrange_333: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_333& val) { return mu__byte::operator=((int) val); };
  mu__subrange_333 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_333 (void): mu__byte(0, 3, 3) {};
  mu__subrange_333 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_333 mu__subrange_333_undefined_var;

class mu__subrange_334: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_334& val) { return mu__byte::operator=((int) val); };
  mu__subrange_334 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_334 (void): mu__byte(0, 3, 3) {};
  mu__subrange_334 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_334 mu__subrange_334_undefined_var;

class mu__subrange_335: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_335& val) { return mu__byte::operator=((int) val); };
  mu__subrange_335 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_335 (void): mu__byte(0, 3, 3) {};
  mu__subrange_335 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_335 mu__subrange_335_undefined_var;

class mu__subrange_336: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_336& val) { return mu__byte::operator=((int) val); };
  mu__subrange_336 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_336 (void): mu__byte(0, 3, 3) {};
  mu__subrange_336 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_336 mu__subrange_336_undefined_var;

class mu__subrange_337: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_337& val) { return mu__byte::operator=((int) val); };
  mu__subrange_337 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_337 (void): mu__byte(0, 3, 3) {};
  mu__subrange_337 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_337 mu__subrange_337_undefined_var;

class mu__subrange_338: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_338& val) { return mu__byte::operator=((int) val); };
  mu__subrange_338 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_338 (void): mu__byte(0, 3, 3) {};
  mu__subrange_338 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_338 mu__subrange_338_undefined_var;

class mu__subrange_339: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_339& val) { return mu__byte::operator=((int) val); };
  mu__subrange_339 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_339 (void): mu__byte(0, 3, 3) {};
  mu__subrange_339 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_339 mu__subrange_339_undefined_var;

class mu__subrange_340: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_340& val) { return mu__byte::operator=((int) val); };
  mu__subrange_340 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_340 (void): mu__byte(0, 3, 3) {};
  mu__subrange_340 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_340 mu__subrange_340_undefined_var;

class mu__subrange_341: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_341& val) { return mu__byte::operator=((int) val); };
  mu__subrange_341 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_341 (void): mu__byte(0, 3, 3) {};
  mu__subrange_341 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_341 mu__subrange_341_undefined_var;

class mu__subrange_342: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_342& val) { return mu__byte::operator=((int) val); };
  mu__subrange_342 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_342 (void): mu__byte(0, 3, 3) {};
  mu__subrange_342 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_342 mu__subrange_342_undefined_var;

class mu__subrange_343: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_343& val) { return mu__byte::operator=((int) val); };
  mu__subrange_343 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_343 (void): mu__byte(0, 3, 3) {};
  mu__subrange_343 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_343 mu__subrange_343_undefined_var;

class mu__subrange_344: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_344& val) { return mu__byte::operator=((int) val); };
  mu__subrange_344 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_344 (void): mu__byte(0, 3, 3) {};
  mu__subrange_344 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_344 mu__subrange_344_undefined_var;

class mu__subrange_345: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_345& val) { return mu__byte::operator=((int) val); };
  mu__subrange_345 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_345 (void): mu__byte(0, 3, 3) {};
  mu__subrange_345 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_345 mu__subrange_345_undefined_var;

class mu__subrange_346: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_346& val) { return mu__byte::operator=((int) val); };
  mu__subrange_346 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_346 (void): mu__byte(0, 3, 3) {};
  mu__subrange_346 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_346 mu__subrange_346_undefined_var;

class mu__subrange_347: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_347& val) { return mu__byte::operator=((int) val); };
  mu__subrange_347 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_347 (void): mu__byte(0, 3, 3) {};
  mu__subrange_347 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_347 mu__subrange_347_undefined_var;

class mu__subrange_348: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_348& val) { return mu__byte::operator=((int) val); };
  mu__subrange_348 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_348 (void): mu__byte(0, 3, 3) {};
  mu__subrange_348 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_348 mu__subrange_348_undefined_var;

class mu__subrange_349: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_349& val) { return mu__byte::operator=((int) val); };
  mu__subrange_349 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_349 (void): mu__byte(0, 3, 3) {};
  mu__subrange_349 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_349 mu__subrange_349_undefined_var;

class mu__subrange_350: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_350& val) { return mu__byte::operator=((int) val); };
  mu__subrange_350 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_350 (void): mu__byte(0, 3, 3) {};
  mu__subrange_350 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_350 mu__subrange_350_undefined_var;

class mu__subrange_351: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_351& val) { return mu__byte::operator=((int) val); };
  mu__subrange_351 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_351 (void): mu__byte(0, 3, 3) {};
  mu__subrange_351 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_351 mu__subrange_351_undefined_var;

class mu__subrange_352: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_352& val) { return mu__byte::operator=((int) val); };
  mu__subrange_352 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_352 (void): mu__byte(0, 3, 3) {};
  mu__subrange_352 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_352 mu__subrange_352_undefined_var;

class mu__subrange_353: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_353& val) { return mu__byte::operator=((int) val); };
  mu__subrange_353 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_353 (void): mu__byte(0, 3, 3) {};
  mu__subrange_353 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_353 mu__subrange_353_undefined_var;

class mu__subrange_354: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_354& val) { return mu__byte::operator=((int) val); };
  mu__subrange_354 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_354 (void): mu__byte(0, 3, 3) {};
  mu__subrange_354 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_354 mu__subrange_354_undefined_var;

class mu__subrange_355: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_355& val) { return mu__byte::operator=((int) val); };
  mu__subrange_355 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_355 (void): mu__byte(0, 3, 3) {};
  mu__subrange_355 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_355 mu__subrange_355_undefined_var;

class mu__subrange_356: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_356& val) { return mu__byte::operator=((int) val); };
  mu__subrange_356 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_356 (void): mu__byte(0, 3, 3) {};
  mu__subrange_356 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_356 mu__subrange_356_undefined_var;

class mu__subrange_357: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_357& val) { return mu__byte::operator=((int) val); };
  mu__subrange_357 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_357 (void): mu__byte(0, 3, 3) {};
  mu__subrange_357 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_357 mu__subrange_357_undefined_var;

class mu__subrange_358: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_358& val) { return mu__byte::operator=((int) val); };
  mu__subrange_358 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_358 (void): mu__byte(0, 3, 3) {};
  mu__subrange_358 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_358 mu__subrange_358_undefined_var;

class mu__subrange_359: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_359& val) { return mu__byte::operator=((int) val); };
  mu__subrange_359 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_359 (void): mu__byte(0, 3, 3) {};
  mu__subrange_359 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_359 mu__subrange_359_undefined_var;

class mu__subrange_360: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_360& val) { return mu__byte::operator=((int) val); };
  mu__subrange_360 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_360 (void): mu__byte(0, 3, 3) {};
  mu__subrange_360 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_360 mu__subrange_360_undefined_var;

class mu__subrange_361: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_361& val) { return mu__byte::operator=((int) val); };
  mu__subrange_361 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_361 (void): mu__byte(0, 3, 3) {};
  mu__subrange_361 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_361 mu__subrange_361_undefined_var;

class mu__subrange_362: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_362& val) { return mu__byte::operator=((int) val); };
  mu__subrange_362 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_362 (void): mu__byte(0, 3, 3) {};
  mu__subrange_362 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_362 mu__subrange_362_undefined_var;

class mu__subrange_363: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_363& val) { return mu__byte::operator=((int) val); };
  mu__subrange_363 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_363 (void): mu__byte(0, 3, 3) {};
  mu__subrange_363 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_363 mu__subrange_363_undefined_var;

class mu__subrange_364: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_364& val) { return mu__byte::operator=((int) val); };
  mu__subrange_364 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_364 (void): mu__byte(0, 3, 3) {};
  mu__subrange_364 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_364 mu__subrange_364_undefined_var;

class mu__subrange_365: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_365& val) { return mu__byte::operator=((int) val); };
  mu__subrange_365 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_365 (void): mu__byte(0, 3, 3) {};
  mu__subrange_365 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_365 mu__subrange_365_undefined_var;

class mu__subrange_366: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_366& val) { return mu__byte::operator=((int) val); };
  mu__subrange_366 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_366 (void): mu__byte(0, 3, 3) {};
  mu__subrange_366 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_366 mu__subrange_366_undefined_var;

class mu__subrange_367: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_367& val) { return mu__byte::operator=((int) val); };
  mu__subrange_367 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_367 (void): mu__byte(0, 3, 3) {};
  mu__subrange_367 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_367 mu__subrange_367_undefined_var;

class mu__subrange_368: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_368& val) { return mu__byte::operator=((int) val); };
  mu__subrange_368 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_368 (void): mu__byte(0, 3, 3) {};
  mu__subrange_368 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_368 mu__subrange_368_undefined_var;

class mu__subrange_369: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_369& val) { return mu__byte::operator=((int) val); };
  mu__subrange_369 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_369 (void): mu__byte(0, 3, 3) {};
  mu__subrange_369 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_369 mu__subrange_369_undefined_var;

class mu__subrange_370: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_370& val) { return mu__byte::operator=((int) val); };
  mu__subrange_370 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_370 (void): mu__byte(0, 3, 3) {};
  mu__subrange_370 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_370 mu__subrange_370_undefined_var;

class mu__subrange_371: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_371& val) { return mu__byte::operator=((int) val); };
  mu__subrange_371 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_371 (void): mu__byte(0, 3, 3) {};
  mu__subrange_371 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_371 mu__subrange_371_undefined_var;

class mu__subrange_372: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_372& val) { return mu__byte::operator=((int) val); };
  mu__subrange_372 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_372 (void): mu__byte(0, 3, 3) {};
  mu__subrange_372 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_372 mu__subrange_372_undefined_var;

class mu__subrange_373: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_373& val) { return mu__byte::operator=((int) val); };
  mu__subrange_373 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_373 (void): mu__byte(0, 3, 3) {};
  mu__subrange_373 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_373 mu__subrange_373_undefined_var;

class mu__subrange_374: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_374& val) { return mu__byte::operator=((int) val); };
  mu__subrange_374 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_374 (void): mu__byte(0, 3, 3) {};
  mu__subrange_374 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_374 mu__subrange_374_undefined_var;

class mu__subrange_375: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_375& val) { return mu__byte::operator=((int) val); };
  mu__subrange_375 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_375 (void): mu__byte(0, 3, 3) {};
  mu__subrange_375 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_375 mu__subrange_375_undefined_var;

class mu__subrange_376: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_376& val) { return mu__byte::operator=((int) val); };
  mu__subrange_376 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_376 (void): mu__byte(0, 3, 3) {};
  mu__subrange_376 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_376 mu__subrange_376_undefined_var;

class mu__subrange_377: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_377& val) { return mu__byte::operator=((int) val); };
  mu__subrange_377 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_377 (void): mu__byte(0, 3, 3) {};
  mu__subrange_377 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_377 mu__subrange_377_undefined_var;

class mu__subrange_378: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_378& val) { return mu__byte::operator=((int) val); };
  mu__subrange_378 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_378 (void): mu__byte(0, 3, 3) {};
  mu__subrange_378 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_378 mu__subrange_378_undefined_var;

class mu__subrange_379: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_379& val) { return mu__byte::operator=((int) val); };
  mu__subrange_379 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_379 (void): mu__byte(0, 3, 3) {};
  mu__subrange_379 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_379 mu__subrange_379_undefined_var;

class mu__subrange_380: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_380& val) { return mu__byte::operator=((int) val); };
  mu__subrange_380 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_380 (void): mu__byte(0, 3, 3) {};
  mu__subrange_380 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_380 mu__subrange_380_undefined_var;

class mu__subrange_381: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_381& val) { return mu__byte::operator=((int) val); };
  mu__subrange_381 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_381 (void): mu__byte(0, 3, 3) {};
  mu__subrange_381 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_381 mu__subrange_381_undefined_var;

class mu__subrange_382: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_382& val) { return mu__byte::operator=((int) val); };
  mu__subrange_382 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_382 (void): mu__byte(0, 3, 3) {};
  mu__subrange_382 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_382 mu__subrange_382_undefined_var;

class mu__subrange_383: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_383& val) { return mu__byte::operator=((int) val); };
  mu__subrange_383 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_383 (void): mu__byte(0, 3, 3) {};
  mu__subrange_383 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_383 mu__subrange_383_undefined_var;

class mu__subrange_384: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_384& val) { return mu__byte::operator=((int) val); };
  mu__subrange_384 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_384 (void): mu__byte(0, 3, 3) {};
  mu__subrange_384 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_384 mu__subrange_384_undefined_var;

class mu__subrange_385: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_385& val) { return mu__byte::operator=((int) val); };
  mu__subrange_385 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_385 (void): mu__byte(0, 3, 3) {};
  mu__subrange_385 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_385 mu__subrange_385_undefined_var;

class mu__subrange_386: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_386& val) { return mu__byte::operator=((int) val); };
  mu__subrange_386 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_386 (void): mu__byte(0, 3, 3) {};
  mu__subrange_386 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_386 mu__subrange_386_undefined_var;

class mu__subrange_387: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_387& val) { return mu__byte::operator=((int) val); };
  mu__subrange_387 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_387 (void): mu__byte(0, 3, 3) {};
  mu__subrange_387 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_387 mu__subrange_387_undefined_var;

class mu__subrange_388: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_388& val) { return mu__byte::operator=((int) val); };
  mu__subrange_388 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_388 (void): mu__byte(0, 3, 3) {};
  mu__subrange_388 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_388 mu__subrange_388_undefined_var;

class mu__subrange_389: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_389& val) { return mu__byte::operator=((int) val); };
  mu__subrange_389 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_389 (void): mu__byte(0, 3, 3) {};
  mu__subrange_389 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_389 mu__subrange_389_undefined_var;

class mu__subrange_390: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_390& val) { return mu__byte::operator=((int) val); };
  mu__subrange_390 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_390 (void): mu__byte(0, 3, 3) {};
  mu__subrange_390 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_390 mu__subrange_390_undefined_var;

class mu__subrange_391: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_391& val) { return mu__byte::operator=((int) val); };
  mu__subrange_391 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_391 (void): mu__byte(0, 3, 3) {};
  mu__subrange_391 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_391 mu__subrange_391_undefined_var;

class mu__subrange_392: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_392& val) { return mu__byte::operator=((int) val); };
  mu__subrange_392 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_392 (void): mu__byte(0, 3, 3) {};
  mu__subrange_392 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_392 mu__subrange_392_undefined_var;

class mu__subrange_393: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_393& val) { return mu__byte::operator=((int) val); };
  mu__subrange_393 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_393 (void): mu__byte(0, 3, 3) {};
  mu__subrange_393 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_393 mu__subrange_393_undefined_var;

class mu__subrange_394: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_394& val) { return mu__byte::operator=((int) val); };
  mu__subrange_394 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_394 (void): mu__byte(0, 3, 3) {};
  mu__subrange_394 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_394 mu__subrange_394_undefined_var;

class mu__subrange_395: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_395& val) { return mu__byte::operator=((int) val); };
  mu__subrange_395 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_395 (void): mu__byte(0, 3, 3) {};
  mu__subrange_395 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_395 mu__subrange_395_undefined_var;

class mu__subrange_396: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_396& val) { return mu__byte::operator=((int) val); };
  mu__subrange_396 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_396 (void): mu__byte(0, 3, 3) {};
  mu__subrange_396 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_396 mu__subrange_396_undefined_var;

class mu__subrange_397: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_397& val) { return mu__byte::operator=((int) val); };
  mu__subrange_397 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_397 (void): mu__byte(0, 3, 3) {};
  mu__subrange_397 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_397 mu__subrange_397_undefined_var;

class mu__subrange_398: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_398& val) { return mu__byte::operator=((int) val); };
  mu__subrange_398 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_398 (void): mu__byte(0, 3, 3) {};
  mu__subrange_398 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_398 mu__subrange_398_undefined_var;

class mu__subrange_399: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_399& val) { return mu__byte::operator=((int) val); };
  mu__subrange_399 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_399 (void): mu__byte(0, 3, 3) {};
  mu__subrange_399 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_399 mu__subrange_399_undefined_var;

class mu__subrange_400: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_400& val) { return mu__byte::operator=((int) val); };
  mu__subrange_400 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_400 (void): mu__byte(0, 3, 3) {};
  mu__subrange_400 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_400 mu__subrange_400_undefined_var;

class mu__subrange_401: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_401& val) { return mu__byte::operator=((int) val); };
  mu__subrange_401 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_401 (void): mu__byte(0, 3, 3) {};
  mu__subrange_401 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_401 mu__subrange_401_undefined_var;

class mu__subrange_402: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_402& val) { return mu__byte::operator=((int) val); };
  mu__subrange_402 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_402 (void): mu__byte(0, 3, 3) {};
  mu__subrange_402 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_402 mu__subrange_402_undefined_var;

class mu__subrange_403: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_403& val) { return mu__byte::operator=((int) val); };
  mu__subrange_403 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_403 (void): mu__byte(0, 3, 3) {};
  mu__subrange_403 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_403 mu__subrange_403_undefined_var;

class mu__subrange_404: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_404& val) { return mu__byte::operator=((int) val); };
  mu__subrange_404 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_404 (void): mu__byte(0, 3, 3) {};
  mu__subrange_404 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_404 mu__subrange_404_undefined_var;

class mu__subrange_405: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_405& val) { return mu__byte::operator=((int) val); };
  mu__subrange_405 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_405 (void): mu__byte(0, 3, 3) {};
  mu__subrange_405 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_405 mu__subrange_405_undefined_var;

class mu__subrange_406: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_406& val) { return mu__byte::operator=((int) val); };
  mu__subrange_406 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_406 (void): mu__byte(0, 3, 3) {};
  mu__subrange_406 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_406 mu__subrange_406_undefined_var;

class mu__subrange_407: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_407& val) { return mu__byte::operator=((int) val); };
  mu__subrange_407 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_407 (void): mu__byte(0, 3, 3) {};
  mu__subrange_407 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_407 mu__subrange_407_undefined_var;

class mu__subrange_408: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_408& val) { return mu__byte::operator=((int) val); };
  mu__subrange_408 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_408 (void): mu__byte(0, 3, 3) {};
  mu__subrange_408 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_408 mu__subrange_408_undefined_var;

class mu__subrange_409: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_409& val) { return mu__byte::operator=((int) val); };
  mu__subrange_409 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_409 (void): mu__byte(0, 3, 3) {};
  mu__subrange_409 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_409 mu__subrange_409_undefined_var;

class mu__subrange_410: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_410& val) { return mu__byte::operator=((int) val); };
  mu__subrange_410 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_410 (void): mu__byte(0, 3, 3) {};
  mu__subrange_410 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_410 mu__subrange_410_undefined_var;

class mu__subrange_411: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_411& val) { return mu__byte::operator=((int) val); };
  mu__subrange_411 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_411 (void): mu__byte(0, 3, 3) {};
  mu__subrange_411 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_411 mu__subrange_411_undefined_var;

class mu__subrange_412: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_412& val) { return mu__byte::operator=((int) val); };
  mu__subrange_412 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_412 (void): mu__byte(0, 3, 3) {};
  mu__subrange_412 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_412 mu__subrange_412_undefined_var;

class mu__subrange_413: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_413& val) { return mu__byte::operator=((int) val); };
  mu__subrange_413 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_413 (void): mu__byte(0, 3, 3) {};
  mu__subrange_413 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_413 mu__subrange_413_undefined_var;

class mu__subrange_414: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_414& val) { return mu__byte::operator=((int) val); };
  mu__subrange_414 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_414 (void): mu__byte(0, 3, 3) {};
  mu__subrange_414 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_414 mu__subrange_414_undefined_var;

class mu__subrange_415: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_415& val) { return mu__byte::operator=((int) val); };
  mu__subrange_415 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_415 (void): mu__byte(0, 3, 3) {};
  mu__subrange_415 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_415 mu__subrange_415_undefined_var;

class mu__subrange_416: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_416& val) { return mu__byte::operator=((int) val); };
  mu__subrange_416 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_416 (void): mu__byte(0, 3, 3) {};
  mu__subrange_416 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_416 mu__subrange_416_undefined_var;

class mu__subrange_417: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_417& val) { return mu__byte::operator=((int) val); };
  mu__subrange_417 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_417 (void): mu__byte(0, 3, 3) {};
  mu__subrange_417 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_417 mu__subrange_417_undefined_var;

class mu__subrange_418: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_418& val) { return mu__byte::operator=((int) val); };
  mu__subrange_418 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_418 (void): mu__byte(0, 3, 3) {};
  mu__subrange_418 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_418 mu__subrange_418_undefined_var;

class mu__subrange_419: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_419& val) { return mu__byte::operator=((int) val); };
  mu__subrange_419 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_419 (void): mu__byte(0, 3, 3) {};
  mu__subrange_419 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_419 mu__subrange_419_undefined_var;

class mu__subrange_420: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_420& val) { return mu__byte::operator=((int) val); };
  mu__subrange_420 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_420 (void): mu__byte(0, 3, 3) {};
  mu__subrange_420 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_420 mu__subrange_420_undefined_var;

class mu__subrange_421: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_421& val) { return mu__byte::operator=((int) val); };
  mu__subrange_421 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_421 (void): mu__byte(0, 3, 3) {};
  mu__subrange_421 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_421 mu__subrange_421_undefined_var;

class mu__subrange_422: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_422& val) { return mu__byte::operator=((int) val); };
  mu__subrange_422 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_422 (void): mu__byte(0, 3, 3) {};
  mu__subrange_422 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_422 mu__subrange_422_undefined_var;

class mu__subrange_423: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_423& val) { return mu__byte::operator=((int) val); };
  mu__subrange_423 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_423 (void): mu__byte(0, 3, 3) {};
  mu__subrange_423 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_423 mu__subrange_423_undefined_var;

class mu__subrange_424: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_424& val) { return mu__byte::operator=((int) val); };
  mu__subrange_424 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_424 (void): mu__byte(0, 3, 3) {};
  mu__subrange_424 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_424 mu__subrange_424_undefined_var;

class mu__subrange_425: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_425& val) { return mu__byte::operator=((int) val); };
  mu__subrange_425 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_425 (void): mu__byte(0, 3, 3) {};
  mu__subrange_425 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_425 mu__subrange_425_undefined_var;

class mu__subrange_426: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_426& val) { return mu__byte::operator=((int) val); };
  mu__subrange_426 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_426 (void): mu__byte(0, 3, 3) {};
  mu__subrange_426 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_426 mu__subrange_426_undefined_var;

class mu__subrange_427: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_427& val) { return mu__byte::operator=((int) val); };
  mu__subrange_427 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_427 (void): mu__byte(0, 3, 3) {};
  mu__subrange_427 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_427 mu__subrange_427_undefined_var;

class mu__subrange_428: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_428& val) { return mu__byte::operator=((int) val); };
  mu__subrange_428 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_428 (void): mu__byte(0, 3, 3) {};
  mu__subrange_428 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_428 mu__subrange_428_undefined_var;

class mu__subrange_429: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_429& val) { return mu__byte::operator=((int) val); };
  mu__subrange_429 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_429 (void): mu__byte(0, 3, 3) {};
  mu__subrange_429 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_429 mu__subrange_429_undefined_var;

class mu__subrange_430: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_430& val) { return mu__byte::operator=((int) val); };
  mu__subrange_430 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_430 (void): mu__byte(0, 3, 3) {};
  mu__subrange_430 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_430 mu__subrange_430_undefined_var;

class mu__subrange_431: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_431& val) { return mu__byte::operator=((int) val); };
  mu__subrange_431 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_431 (void): mu__byte(0, 3, 3) {};
  mu__subrange_431 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_431 mu__subrange_431_undefined_var;

class mu__subrange_432: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_432& val) { return mu__byte::operator=((int) val); };
  mu__subrange_432 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_432 (void): mu__byte(0, 3, 3) {};
  mu__subrange_432 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_432 mu__subrange_432_undefined_var;

class mu__subrange_433: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_433& val) { return mu__byte::operator=((int) val); };
  mu__subrange_433 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_433 (void): mu__byte(0, 3, 3) {};
  mu__subrange_433 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_433 mu__subrange_433_undefined_var;

class mu__subrange_434: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_434& val) { return mu__byte::operator=((int) val); };
  mu__subrange_434 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_434 (void): mu__byte(0, 3, 3) {};
  mu__subrange_434 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_434 mu__subrange_434_undefined_var;

class mu__subrange_435: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_435& val) { return mu__byte::operator=((int) val); };
  mu__subrange_435 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_435 (void): mu__byte(0, 3, 3) {};
  mu__subrange_435 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_435 mu__subrange_435_undefined_var;

class mu__subrange_436: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_436& val) { return mu__byte::operator=((int) val); };
  mu__subrange_436 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_436 (void): mu__byte(0, 3, 3) {};
  mu__subrange_436 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_436 mu__subrange_436_undefined_var;

class mu__subrange_437: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_437& val) { return mu__byte::operator=((int) val); };
  mu__subrange_437 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_437 (void): mu__byte(0, 3, 3) {};
  mu__subrange_437 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_437 mu__subrange_437_undefined_var;

class mu__subrange_438: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_438& val) { return mu__byte::operator=((int) val); };
  mu__subrange_438 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_438 (void): mu__byte(0, 3, 3) {};
  mu__subrange_438 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_438 mu__subrange_438_undefined_var;

class mu__subrange_439: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_439& val) { return mu__byte::operator=((int) val); };
  mu__subrange_439 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_439 (void): mu__byte(0, 3, 3) {};
  mu__subrange_439 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_439 mu__subrange_439_undefined_var;

class mu__subrange_440: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_440& val) { return mu__byte::operator=((int) val); };
  mu__subrange_440 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_440 (void): mu__byte(0, 3, 3) {};
  mu__subrange_440 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_440 mu__subrange_440_undefined_var;

class mu__subrange_441: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_441& val) { return mu__byte::operator=((int) val); };
  mu__subrange_441 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_441 (void): mu__byte(0, 3, 3) {};
  mu__subrange_441 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_441 mu__subrange_441_undefined_var;

class mu__subrange_442: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_442& val) { return mu__byte::operator=((int) val); };
  mu__subrange_442 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_442 (void): mu__byte(0, 3, 3) {};
  mu__subrange_442 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_442 mu__subrange_442_undefined_var;

class mu__subrange_443: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_443& val) { return mu__byte::operator=((int) val); };
  mu__subrange_443 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_443 (void): mu__byte(0, 3, 3) {};
  mu__subrange_443 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_443 mu__subrange_443_undefined_var;

class mu__subrange_444: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_444& val) { return mu__byte::operator=((int) val); };
  mu__subrange_444 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_444 (void): mu__byte(0, 3, 3) {};
  mu__subrange_444 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_444 mu__subrange_444_undefined_var;

class mu__subrange_445: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_445& val) { return mu__byte::operator=((int) val); };
  mu__subrange_445 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_445 (void): mu__byte(0, 3, 3) {};
  mu__subrange_445 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_445 mu__subrange_445_undefined_var;

class mu__subrange_446: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_446& val) { return mu__byte::operator=((int) val); };
  mu__subrange_446 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_446 (void): mu__byte(0, 3, 3) {};
  mu__subrange_446 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_446 mu__subrange_446_undefined_var;

class mu__subrange_447: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_447& val) { return mu__byte::operator=((int) val); };
  mu__subrange_447 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_447 (void): mu__byte(0, 3, 3) {};
  mu__subrange_447 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_447 mu__subrange_447_undefined_var;

class mu__subrange_448: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_448& val) { return mu__byte::operator=((int) val); };
  mu__subrange_448 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_448 (void): mu__byte(0, 3, 3) {};
  mu__subrange_448 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_448 mu__subrange_448_undefined_var;

class mu__subrange_449: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_449& val) { return mu__byte::operator=((int) val); };
  mu__subrange_449 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_449 (void): mu__byte(0, 3, 3) {};
  mu__subrange_449 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_449 mu__subrange_449_undefined_var;

class mu__subrange_450: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_450& val) { return mu__byte::operator=((int) val); };
  mu__subrange_450 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_450 (void): mu__byte(0, 3, 3) {};
  mu__subrange_450 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_450 mu__subrange_450_undefined_var;

class mu__subrange_451: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_451& val) { return mu__byte::operator=((int) val); };
  mu__subrange_451 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_451 (void): mu__byte(0, 3, 3) {};
  mu__subrange_451 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_451 mu__subrange_451_undefined_var;

class mu__subrange_452: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_452& val) { return mu__byte::operator=((int) val); };
  mu__subrange_452 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_452 (void): mu__byte(0, 3, 3) {};
  mu__subrange_452 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_452 mu__subrange_452_undefined_var;

class mu__subrange_453: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_453& val) { return mu__byte::operator=((int) val); };
  mu__subrange_453 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_453 (void): mu__byte(0, 3, 3) {};
  mu__subrange_453 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_453 mu__subrange_453_undefined_var;

class mu__subrange_454: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_454& val) { return mu__byte::operator=((int) val); };
  mu__subrange_454 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_454 (void): mu__byte(0, 3, 3) {};
  mu__subrange_454 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_454 mu__subrange_454_undefined_var;

class mu__subrange_455: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_455& val) { return mu__byte::operator=((int) val); };
  mu__subrange_455 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_455 (void): mu__byte(0, 3, 3) {};
  mu__subrange_455 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_455 mu__subrange_455_undefined_var;

class mu__subrange_456: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_456& val) { return mu__byte::operator=((int) val); };
  mu__subrange_456 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_456 (void): mu__byte(0, 3, 3) {};
  mu__subrange_456 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_456 mu__subrange_456_undefined_var;

class mu__subrange_457: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_457& val) { return mu__byte::operator=((int) val); };
  mu__subrange_457 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_457 (void): mu__byte(0, 3, 3) {};
  mu__subrange_457 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_457 mu__subrange_457_undefined_var;

class mu__subrange_458: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_458& val) { return mu__byte::operator=((int) val); };
  mu__subrange_458 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_458 (void): mu__byte(0, 3, 3) {};
  mu__subrange_458 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_458 mu__subrange_458_undefined_var;

class mu__subrange_459: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_459& val) { return mu__byte::operator=((int) val); };
  mu__subrange_459 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_459 (void): mu__byte(0, 3, 3) {};
  mu__subrange_459 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_459 mu__subrange_459_undefined_var;

class mu__subrange_460: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_460& val) { return mu__byte::operator=((int) val); };
  mu__subrange_460 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_460 (void): mu__byte(0, 3, 3) {};
  mu__subrange_460 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_460 mu__subrange_460_undefined_var;

class mu__subrange_461: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_461& val) { return mu__byte::operator=((int) val); };
  mu__subrange_461 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_461 (void): mu__byte(0, 3, 3) {};
  mu__subrange_461 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_461 mu__subrange_461_undefined_var;

class mu__subrange_462: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_462& val) { return mu__byte::operator=((int) val); };
  mu__subrange_462 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_462 (void): mu__byte(0, 3, 3) {};
  mu__subrange_462 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_462 mu__subrange_462_undefined_var;

class mu__subrange_463: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_463& val) { return mu__byte::operator=((int) val); };
  mu__subrange_463 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_463 (void): mu__byte(0, 3, 3) {};
  mu__subrange_463 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_463 mu__subrange_463_undefined_var;

class mu__subrange_464: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_464& val) { return mu__byte::operator=((int) val); };
  mu__subrange_464 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_464 (void): mu__byte(0, 3, 3) {};
  mu__subrange_464 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_464 mu__subrange_464_undefined_var;

class mu__subrange_465: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_465& val) { return mu__byte::operator=((int) val); };
  mu__subrange_465 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_465 (void): mu__byte(0, 3, 3) {};
  mu__subrange_465 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_465 mu__subrange_465_undefined_var;

class mu__subrange_466: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_466& val) { return mu__byte::operator=((int) val); };
  mu__subrange_466 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_466 (void): mu__byte(0, 3, 3) {};
  mu__subrange_466 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_466 mu__subrange_466_undefined_var;

class mu__subrange_467: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_467& val) { return mu__byte::operator=((int) val); };
  mu__subrange_467 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_467 (void): mu__byte(0, 3, 3) {};
  mu__subrange_467 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_467 mu__subrange_467_undefined_var;

class mu__subrange_468: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_468& val) { return mu__byte::operator=((int) val); };
  mu__subrange_468 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_468 (void): mu__byte(0, 3, 3) {};
  mu__subrange_468 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_468 mu__subrange_468_undefined_var;

class mu__subrange_469: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_469& val) { return mu__byte::operator=((int) val); };
  mu__subrange_469 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_469 (void): mu__byte(0, 3, 3) {};
  mu__subrange_469 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_469 mu__subrange_469_undefined_var;

class mu__subrange_470: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_470& val) { return mu__byte::operator=((int) val); };
  mu__subrange_470 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_470 (void): mu__byte(0, 3, 3) {};
  mu__subrange_470 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_470 mu__subrange_470_undefined_var;

class mu__subrange_471: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_471& val) { return mu__byte::operator=((int) val); };
  mu__subrange_471 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_471 (void): mu__byte(0, 3, 3) {};
  mu__subrange_471 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_471 mu__subrange_471_undefined_var;

class mu__subrange_472: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_472& val) { return mu__byte::operator=((int) val); };
  mu__subrange_472 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_472 (void): mu__byte(0, 3, 3) {};
  mu__subrange_472 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_472 mu__subrange_472_undefined_var;

class mu__subrange_473: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_473& val) { return mu__byte::operator=((int) val); };
  mu__subrange_473 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_473 (void): mu__byte(0, 3, 3) {};
  mu__subrange_473 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_473 mu__subrange_473_undefined_var;

class mu__subrange_474: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_474& val) { return mu__byte::operator=((int) val); };
  mu__subrange_474 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_474 (void): mu__byte(0, 3, 3) {};
  mu__subrange_474 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_474 mu__subrange_474_undefined_var;

class mu__subrange_475: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_475& val) { return mu__byte::operator=((int) val); };
  mu__subrange_475 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_475 (void): mu__byte(0, 3, 3) {};
  mu__subrange_475 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_475 mu__subrange_475_undefined_var;

class mu__subrange_476: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_476& val) { return mu__byte::operator=((int) val); };
  mu__subrange_476 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_476 (void): mu__byte(0, 3, 3) {};
  mu__subrange_476 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_476 mu__subrange_476_undefined_var;

class mu__subrange_477: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_477& val) { return mu__byte::operator=((int) val); };
  mu__subrange_477 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_477 (void): mu__byte(0, 3, 3) {};
  mu__subrange_477 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_477 mu__subrange_477_undefined_var;

class mu__subrange_478: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_478& val) { return mu__byte::operator=((int) val); };
  mu__subrange_478 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_478 (void): mu__byte(0, 3, 3) {};
  mu__subrange_478 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_478 mu__subrange_478_undefined_var;

class mu__subrange_479: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_479& val) { return mu__byte::operator=((int) val); };
  mu__subrange_479 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_479 (void): mu__byte(0, 3, 3) {};
  mu__subrange_479 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_479 mu__subrange_479_undefined_var;

class mu__subrange_480: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_480& val) { return mu__byte::operator=((int) val); };
  mu__subrange_480 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_480 (void): mu__byte(0, 3, 3) {};
  mu__subrange_480 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_480 mu__subrange_480_undefined_var;

class mu__subrange_481: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_481& val) { return mu__byte::operator=((int) val); };
  mu__subrange_481 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_481 (void): mu__byte(0, 3, 3) {};
  mu__subrange_481 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_481 mu__subrange_481_undefined_var;

class mu__subrange_482: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_482& val) { return mu__byte::operator=((int) val); };
  mu__subrange_482 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_482 (void): mu__byte(0, 3, 3) {};
  mu__subrange_482 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_482 mu__subrange_482_undefined_var;

class mu__subrange_483: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_483& val) { return mu__byte::operator=((int) val); };
  mu__subrange_483 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_483 (void): mu__byte(0, 3, 3) {};
  mu__subrange_483 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_483 mu__subrange_483_undefined_var;

class mu__subrange_484: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_484& val) { return mu__byte::operator=((int) val); };
  mu__subrange_484 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_484 (void): mu__byte(0, 3, 3) {};
  mu__subrange_484 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_484 mu__subrange_484_undefined_var;

class mu__subrange_485: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_485& val) { return mu__byte::operator=((int) val); };
  mu__subrange_485 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_485 (void): mu__byte(0, 3, 3) {};
  mu__subrange_485 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_485 mu__subrange_485_undefined_var;

class mu__subrange_486: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_486& val) { return mu__byte::operator=((int) val); };
  mu__subrange_486 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_486 (void): mu__byte(0, 3, 3) {};
  mu__subrange_486 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_486 mu__subrange_486_undefined_var;

class mu__subrange_487: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_487& val) { return mu__byte::operator=((int) val); };
  mu__subrange_487 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_487 (void): mu__byte(0, 3, 3) {};
  mu__subrange_487 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_487 mu__subrange_487_undefined_var;

class mu__subrange_488: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_488& val) { return mu__byte::operator=((int) val); };
  mu__subrange_488 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_488 (void): mu__byte(0, 3, 3) {};
  mu__subrange_488 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_488 mu__subrange_488_undefined_var;

class mu__subrange_489: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_489& val) { return mu__byte::operator=((int) val); };
  mu__subrange_489 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_489 (void): mu__byte(0, 3, 3) {};
  mu__subrange_489 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_489 mu__subrange_489_undefined_var;

class mu__subrange_490: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_490& val) { return mu__byte::operator=((int) val); };
  mu__subrange_490 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_490 (void): mu__byte(0, 3, 3) {};
  mu__subrange_490 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_490 mu__subrange_490_undefined_var;

class mu__subrange_491: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_491& val) { return mu__byte::operator=((int) val); };
  mu__subrange_491 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_491 (void): mu__byte(0, 3, 3) {};
  mu__subrange_491 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_491 mu__subrange_491_undefined_var;

class mu__subrange_492: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_492& val) { return mu__byte::operator=((int) val); };
  mu__subrange_492 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_492 (void): mu__byte(0, 3, 3) {};
  mu__subrange_492 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_492 mu__subrange_492_undefined_var;

class mu__subrange_493: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_493& val) { return mu__byte::operator=((int) val); };
  mu__subrange_493 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_493 (void): mu__byte(0, 3, 3) {};
  mu__subrange_493 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_493 mu__subrange_493_undefined_var;

class mu__subrange_494: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_494& val) { return mu__byte::operator=((int) val); };
  mu__subrange_494 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_494 (void): mu__byte(0, 3, 3) {};
  mu__subrange_494 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_494 mu__subrange_494_undefined_var;

class mu__subrange_495: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_495& val) { return mu__byte::operator=((int) val); };
  mu__subrange_495 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_495 (void): mu__byte(0, 3, 3) {};
  mu__subrange_495 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_495 mu__subrange_495_undefined_var;

class mu__subrange_496: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_496& val) { return mu__byte::operator=((int) val); };
  mu__subrange_496 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_496 (void): mu__byte(0, 3, 3) {};
  mu__subrange_496 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_496 mu__subrange_496_undefined_var;

class mu__subrange_497: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_497& val) { return mu__byte::operator=((int) val); };
  mu__subrange_497 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_497 (void): mu__byte(0, 3, 3) {};
  mu__subrange_497 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_497 mu__subrange_497_undefined_var;

class mu__subrange_498: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_498& val) { return mu__byte::operator=((int) val); };
  mu__subrange_498 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_498 (void): mu__byte(0, 3, 3) {};
  mu__subrange_498 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_498 mu__subrange_498_undefined_var;

class mu__subrange_499: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_499& val) { return mu__byte::operator=((int) val); };
  mu__subrange_499 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_499 (void): mu__byte(0, 3, 3) {};
  mu__subrange_499 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_499 mu__subrange_499_undefined_var;

class mu__subrange_500: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_500& val) { return mu__byte::operator=((int) val); };
  mu__subrange_500 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_500 (void): mu__byte(0, 3, 3) {};
  mu__subrange_500 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_500 mu__subrange_500_undefined_var;

class mu__subrange_501: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_501& val) { return mu__byte::operator=((int) val); };
  mu__subrange_501 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_501 (void): mu__byte(0, 3, 3) {};
  mu__subrange_501 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_501 mu__subrange_501_undefined_var;

class mu__subrange_502: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_502& val) { return mu__byte::operator=((int) val); };
  mu__subrange_502 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_502 (void): mu__byte(0, 3, 3) {};
  mu__subrange_502 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_502 mu__subrange_502_undefined_var;

class mu__subrange_503: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_503& val) { return mu__byte::operator=((int) val); };
  mu__subrange_503 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_503 (void): mu__byte(0, 3, 3) {};
  mu__subrange_503 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_503 mu__subrange_503_undefined_var;

class mu__subrange_504: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_504& val) { return mu__byte::operator=((int) val); };
  mu__subrange_504 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_504 (void): mu__byte(0, 3, 3) {};
  mu__subrange_504 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_504 mu__subrange_504_undefined_var;

class mu__subrange_505: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_505& val) { return mu__byte::operator=((int) val); };
  mu__subrange_505 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_505 (void): mu__byte(0, 3, 3) {};
  mu__subrange_505 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_505 mu__subrange_505_undefined_var;

class mu__subrange_506: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_506& val) { return mu__byte::operator=((int) val); };
  mu__subrange_506 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_506 (void): mu__byte(0, 3, 3) {};
  mu__subrange_506 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_506 mu__subrange_506_undefined_var;

class mu__subrange_507: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_507& val) { return mu__byte::operator=((int) val); };
  mu__subrange_507 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_507 (void): mu__byte(0, 3, 3) {};
  mu__subrange_507 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_507 mu__subrange_507_undefined_var;

class mu__subrange_508: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_508& val) { return mu__byte::operator=((int) val); };
  mu__subrange_508 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_508 (void): mu__byte(0, 3, 3) {};
  mu__subrange_508 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_508 mu__subrange_508_undefined_var;

class mu__subrange_509: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_509& val) { return mu__byte::operator=((int) val); };
  mu__subrange_509 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_509 (void): mu__byte(0, 3, 3) {};
  mu__subrange_509 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_509 mu__subrange_509_undefined_var;

class mu__subrange_510: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_510& val) { return mu__byte::operator=((int) val); };
  mu__subrange_510 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_510 (void): mu__byte(0, 3, 3) {};
  mu__subrange_510 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_510 mu__subrange_510_undefined_var;

class mu__subrange_511: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_511& val) { return mu__byte::operator=((int) val); };
  mu__subrange_511 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_511 (void): mu__byte(0, 3, 3) {};
  mu__subrange_511 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_511 mu__subrange_511_undefined_var;

class mu__subrange_512: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_512& val) { return mu__byte::operator=((int) val); };
  mu__subrange_512 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_512 (void): mu__byte(0, 3, 3) {};
  mu__subrange_512 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_512 mu__subrange_512_undefined_var;

class mu__subrange_513: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_513& val) { return mu__byte::operator=((int) val); };
  mu__subrange_513 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_513 (void): mu__byte(0, 3, 3) {};
  mu__subrange_513 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_513 mu__subrange_513_undefined_var;

class mu__subrange_514: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_514& val) { return mu__byte::operator=((int) val); };
  mu__subrange_514 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_514 (void): mu__byte(0, 3, 3) {};
  mu__subrange_514 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_514 mu__subrange_514_undefined_var;

class mu__subrange_515: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_515& val) { return mu__byte::operator=((int) val); };
  mu__subrange_515 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_515 (void): mu__byte(0, 3, 3) {};
  mu__subrange_515 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_515 mu__subrange_515_undefined_var;

class mu__subrange_516: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_516& val) { return mu__byte::operator=((int) val); };
  mu__subrange_516 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_516 (void): mu__byte(0, 3, 3) {};
  mu__subrange_516 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_516 mu__subrange_516_undefined_var;

class mu__subrange_517: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_517& val) { return mu__byte::operator=((int) val); };
  mu__subrange_517 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_517 (void): mu__byte(0, 3, 3) {};
  mu__subrange_517 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_517 mu__subrange_517_undefined_var;

class mu__subrange_518: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_518& val) { return mu__byte::operator=((int) val); };
  mu__subrange_518 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_518 (void): mu__byte(0, 3, 3) {};
  mu__subrange_518 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_518 mu__subrange_518_undefined_var;

class mu__subrange_519: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_519& val) { return mu__byte::operator=((int) val); };
  mu__subrange_519 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_519 (void): mu__byte(0, 3, 3) {};
  mu__subrange_519 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_519 mu__subrange_519_undefined_var;

class mu__subrange_520: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_520& val) { return mu__byte::operator=((int) val); };
  mu__subrange_520 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_520 (void): mu__byte(0, 3, 3) {};
  mu__subrange_520 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_520 mu__subrange_520_undefined_var;

class mu__subrange_521: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_521& val) { return mu__byte::operator=((int) val); };
  mu__subrange_521 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_521 (void): mu__byte(0, 3, 3) {};
  mu__subrange_521 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_521 mu__subrange_521_undefined_var;

class mu__subrange_522: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_522& val) { return mu__byte::operator=((int) val); };
  mu__subrange_522 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_522 (void): mu__byte(0, 3, 3) {};
  mu__subrange_522 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_522 mu__subrange_522_undefined_var;

class mu__subrange_523: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_523& val) { return mu__byte::operator=((int) val); };
  mu__subrange_523 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_523 (void): mu__byte(0, 3, 3) {};
  mu__subrange_523 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_523 mu__subrange_523_undefined_var;

class mu__subrange_524: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_524& val) { return mu__byte::operator=((int) val); };
  mu__subrange_524 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_524 (void): mu__byte(0, 3, 3) {};
  mu__subrange_524 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_524 mu__subrange_524_undefined_var;

class mu__subrange_525: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_525& val) { return mu__byte::operator=((int) val); };
  mu__subrange_525 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_525 (void): mu__byte(0, 3, 3) {};
  mu__subrange_525 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_525 mu__subrange_525_undefined_var;

class mu__subrange_526: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_526& val) { return mu__byte::operator=((int) val); };
  mu__subrange_526 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_526 (void): mu__byte(0, 3, 3) {};
  mu__subrange_526 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_526 mu__subrange_526_undefined_var;

class mu__subrange_527: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_527& val) { return mu__byte::operator=((int) val); };
  mu__subrange_527 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_527 (void): mu__byte(0, 3, 3) {};
  mu__subrange_527 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_527 mu__subrange_527_undefined_var;

class mu__subrange_528: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_528& val) { return mu__byte::operator=((int) val); };
  mu__subrange_528 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_528 (void): mu__byte(0, 3, 3) {};
  mu__subrange_528 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_528 mu__subrange_528_undefined_var;

class mu__subrange_529: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_529& val) { return mu__byte::operator=((int) val); };
  mu__subrange_529 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_529 (void): mu__byte(0, 3, 3) {};
  mu__subrange_529 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_529 mu__subrange_529_undefined_var;

class mu__subrange_530: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_530& val) { return mu__byte::operator=((int) val); };
  mu__subrange_530 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_530 (void): mu__byte(0, 3, 3) {};
  mu__subrange_530 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_530 mu__subrange_530_undefined_var;

class mu__subrange_531: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_531& val) { return mu__byte::operator=((int) val); };
  mu__subrange_531 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_531 (void): mu__byte(0, 3, 3) {};
  mu__subrange_531 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_531 mu__subrange_531_undefined_var;

class mu__subrange_532: public mu__byte
{
 public:
  inline int operator=(int val) { return mu__byte::operator=(val); };
  inline int operator=(const mu__subrange_532& val) { return mu__byte::operator=((int) val); };
  mu__subrange_532 (const char *name, int os): mu__byte(0, 3, 3, name, os) {};
  mu__subrange_532 (void): mu__byte(0, 3, 3) {};
  mu__subrange_532 (int val): mu__byte(0, 3, 3, "Parameter or function result.", 0)
  {
    operator=(val);
  };
  char * Name() { return tsprintf("%d",value()); };
  virtual void Permute(PermSet& Perm, int i);
  virtual void SimpleCanonicalize(PermSet& Perm);
  virtual void Canonicalize(PermSet& Perm);
  virtual void SimpleLimit(PermSet& Perm);
  virtual void ArrayLimit(PermSet& Perm);
  virtual void Limit(PermSet& Perm);
  virtual void MultisetLimit(PermSet& Perm);
  virtual void MultisetSort() {};
  void print_statistic() {};
};

/*** end of subrange decl ***/
mu__subrange_532 mu__subrange_532_undefined_var;

const int mu_NumberNodes = 4;
const int mu_BufferSpace = 3;
const int mu_NumberTokens = 2;
const int mu_empty = 1;
const int mu_response = 2;
const int mu_request = 3;
const int mu_fwd_request = 4;
const int mu_fwd_response = 5;
/*** Variable declaration ***/
mu_1__type_1 mu_IncomingQueue("IncomingQueue",0);

/*** Variable declaration ***/
mu_1__type_4 mu_TailPointers("TailPointers",432);

/*** Variable declaration ***/
mu_1__type_6 mu_RouterStatus("RouterStatus",480);

/*** Variable declaration ***/
mu_1__type_8 mu_Tokens("Tokens",490);

/*** Variable declaration ***/
mu_1__type_10 mu_Routers("Routers",502);

/*** Variable declaration ***/
mu_1__type_11 mu_ExitPath("ExitPath",510);

/*** Variable declaration ***/
mu_1__type_12 mu_EntryPath("EntryPath",522);

void mu_SendRequest(const mu_1_NodeIDs& mu_src_nid, const mu_1_NodeIDs& mu_next_hop, const mu_1_NodeIDs& mu_msg_dest)
{
/*** Variable declaration ***/
mu_1_Message mu_msg_to_send("msg_to_send",0);

if ( (mu_next_hop) == (mu_msg_dest) )
{
mu_msg_to_send.mu_msg_type = mu_request;
}
else
{
mu_msg_to_send.mu_msg_type = mu_fwd_request;
}
if (mu_src_nid.isundefined())
  mu_msg_to_send.mu_src_nid.undefine();
else
  mu_msg_to_send.mu_src_nid = mu_src_nid;
if (mu_msg_dest.isundefined())
  mu_msg_to_send.mu_dest_nid.undefine();
else
  mu_msg_to_send.mu_dest_nid = mu_msg_dest;
mu_IncomingQueue[mu_next_hop][mu_src_nid][mu_TailPointers[mu_next_hop][mu_src_nid]] = mu_msg_to_send;
mu_TailPointers[mu_next_hop][mu_src_nid] = (mu_TailPointers[mu_next_hop][mu_src_nid]) + (1);
};
/*** end procedure declaration ***/

void mu_ProcessFwdRequest(const mu_1_NodeIDs& mu_src_nid, const mu_1_NodeIDs& mu_incom_to_src_nid, const mu_1_NodeIDs& mu_next_hop)
{
/*** Variable declaration ***/
mu_1_Message mu_msg_to_send("msg_to_send",0);

if ( (mu_IncomingQueue[mu_src_nid][mu_incom_to_src_nid][0].mu_dest_nid) == (mu_next_hop) )
{
mu_msg_to_send.mu_msg_type = mu_request;
}
else
{
mu_msg_to_send.mu_msg_type = mu_fwd_request;
}
mu_msg_to_send.mu_src_nid = mu_IncomingQueue[mu_src_nid][mu_incom_to_src_nid][0].mu_src_nid;
mu_msg_to_send.mu_dest_nid = mu_IncomingQueue[mu_src_nid][mu_incom_to_src_nid][0].mu_dest_nid;
{
int mu__ub13 = (mu_TailPointers[mu_src_nid][mu_incom_to_src_nid]) - (1);
for (int mu_i = 1; mu_i <= mu__ub13; mu_i += 1) {
mu_IncomingQueue[mu_src_nid][mu_incom_to_src_nid][(mu_i) - (1)] = mu_IncomingQueue[mu_src_nid][mu_incom_to_src_nid][mu_i];
};
};
mu_TailPointers[mu_src_nid][mu_incom_to_src_nid] = (mu_TailPointers[mu_src_nid][mu_incom_to_src_nid]) - (1);
mu_IncomingQueue[mu_src_nid][mu_incom_to_src_nid][mu_TailPointers[mu_src_nid][mu_incom_to_src_nid]].mu_msg_type = mu_empty;
mu_IncomingQueue[mu_next_hop][mu_src_nid][mu_TailPointers[mu_next_hop][mu_src_nid]] = mu_msg_to_send;
mu_TailPointers[mu_next_hop][mu_src_nid] = (mu_TailPointers[mu_next_hop][mu_src_nid]) + (1);
};
/*** end procedure declaration ***/

void mu_ProcessRequest(const mu_1_NodeIDs& mu_src_nid, const mu_1_NodeIDs& mu_incom_to_src_nid, const mu_1_NodeIDs& mu_next_hop)
{
/*** Variable declaration ***/
mu_1_Message mu_msg_to_send("msg_to_send",0);

if ( (mu_IncomingQueue[mu_src_nid][mu_incom_to_src_nid][0].mu_src_nid) == (mu_next_hop) )
{
mu_msg_to_send.mu_msg_type = mu_response;
}
else
{
mu_msg_to_send.mu_msg_type = mu_fwd_response;
}
mu_msg_to_send.mu_src_nid = mu_IncomingQueue[mu_src_nid][mu_incom_to_src_nid][0].mu_dest_nid;
mu_msg_to_send.mu_dest_nid = mu_IncomingQueue[mu_src_nid][mu_incom_to_src_nid][0].mu_src_nid;
{
int mu__ub14 = (mu_TailPointers[mu_src_nid][mu_incom_to_src_nid]) - (1);
for (int mu_i = 1; mu_i <= mu__ub14; mu_i += 1) {
mu_IncomingQueue[mu_src_nid][mu_incom_to_src_nid][(mu_i) - (1)] = mu_IncomingQueue[mu_src_nid][mu_incom_to_src_nid][mu_i];
};
};
mu_TailPointers[mu_src_nid][mu_incom_to_src_nid] = (mu_TailPointers[mu_src_nid][mu_incom_to_src_nid]) - (1);
mu_IncomingQueue[mu_src_nid][mu_incom_to_src_nid][mu_TailPointers[mu_src_nid][mu_incom_to_src_nid]].mu_msg_type = mu_empty;
mu_IncomingQueue[mu_next_hop][mu_src_nid][mu_TailPointers[mu_next_hop][mu_src_nid]] = mu_msg_to_send;
mu_TailPointers[mu_next_hop][mu_src_nid] = (mu_TailPointers[mu_next_hop][mu_src_nid]) + (1);
};
/*** end procedure declaration ***/

void mu_ProcessFwdResponse(const mu_1_NodeIDs& mu_src_nid, const mu_1_NodeIDs& mu_incom_to_src_nid, const mu_1_NodeIDs& mu_next_hop)
{
/*** Variable declaration ***/
mu_1_Message mu_msg_to_send("msg_to_send",0);

if ( (mu_IncomingQueue[mu_src_nid][mu_incom_to_src_nid][0].mu_dest_nid) == (mu_next_hop) )
{
mu_msg_to_send.mu_msg_type = mu_response;
}
else
{
mu_msg_to_send.mu_msg_type = mu_fwd_response;
}
mu_msg_to_send.mu_src_nid = mu_IncomingQueue[mu_src_nid][mu_incom_to_src_nid][0].mu_src_nid;
mu_msg_to_send.mu_dest_nid = mu_IncomingQueue[mu_src_nid][mu_incom_to_src_nid][0].mu_dest_nid;
{
int mu__ub15 = (mu_TailPointers[mu_src_nid][mu_incom_to_src_nid]) - (1);
for (int mu_i = 1; mu_i <= mu__ub15; mu_i += 1) {
mu_IncomingQueue[mu_src_nid][mu_incom_to_src_nid][(mu_i) - (1)] = mu_IncomingQueue[mu_src_nid][mu_incom_to_src_nid][mu_i];
};
};
mu_TailPointers[mu_src_nid][mu_incom_to_src_nid] = (mu_TailPointers[mu_src_nid][mu_incom_to_src_nid]) - (1);
mu_IncomingQueue[mu_src_nid][mu_incom_to_src_nid][mu_TailPointers[mu_src_nid][mu_incom_to_src_nid]].mu_msg_type = mu_empty;
mu_IncomingQueue[mu_next_hop][mu_src_nid][mu_TailPointers[mu_next_hop][mu_src_nid]] = mu_msg_to_send;
mu_TailPointers[mu_next_hop][mu_src_nid] = (mu_TailPointers[mu_next_hop][mu_src_nid]) + (1);
};
/*** end procedure declaration ***/

void mu_ProcessResponse(const mu_1_NodeIDs& mu_src_nid, const mu_1_NodeIDs& mu_incom_to_src_nid)
{
{
for(int mu_i = 1; mu_i <= 2; mu_i++) {
mu_IncomingQueue[mu_src_nid][mu_incom_to_src_nid][(mu_i) - (1)] = mu_IncomingQueue[mu_src_nid][mu_incom_to_src_nid][mu_i];
mu_IncomingQueue[mu_src_nid][mu_incom_to_src_nid][mu_i].mu_msg_type = mu_empty;
};
};
mu_IncomingQueue[mu_src_nid][mu_incom_to_src_nid][(mu_TailPointers[mu_src_nid][mu_incom_to_src_nid]) - (1)].mu_msg_type = mu_empty;
mu_TailPointers[mu_src_nid][mu_incom_to_src_nid] = (mu_TailPointers[mu_src_nid][mu_incom_to_src_nid]) - (1);
};
/*** end procedure declaration ***/





/********************
  The world
 ********************/
void world_class::clear()
{
  mu_IncomingQueue.clear();
  mu_TailPointers.clear();
  mu_RouterStatus.clear();
  mu_Tokens.clear();
  mu_Routers.clear();
  mu_ExitPath.clear();
  mu_EntryPath.clear();
}
void world_class::undefine()
{
  mu_IncomingQueue.undefine();
  mu_TailPointers.undefine();
  mu_RouterStatus.undefine();
  mu_Tokens.undefine();
  mu_Routers.undefine();
  mu_ExitPath.undefine();
  mu_EntryPath.undefine();
}
void world_class::reset()
{
  mu_IncomingQueue.reset();
  mu_TailPointers.reset();
  mu_RouterStatus.reset();
  mu_Tokens.reset();
  mu_Routers.reset();
  mu_ExitPath.reset();
  mu_EntryPath.reset();
}
void world_class::print()
{
  static int num_calls = 0; /* to ward off recursive calls. */
  if ( num_calls == 0 ) {
    num_calls++;
  mu_IncomingQueue.print();
  mu_TailPointers.print();
  mu_RouterStatus.print();
  mu_Tokens.print();
  mu_Routers.print();
  mu_ExitPath.print();
  mu_EntryPath.print();
    num_calls--;
}
}
void world_class::print_statistic()
{
  static int num_calls = 0; /* to ward off recursive calls. */
  if ( num_calls == 0 ) {
    num_calls++;
  mu_IncomingQueue.print_statistic();
  mu_TailPointers.print_statistic();
  mu_RouterStatus.print_statistic();
  mu_Tokens.print_statistic();
  mu_Routers.print_statistic();
  mu_ExitPath.print_statistic();
  mu_EntryPath.print_statistic();
    num_calls--;
}
}
void world_class::print_diff( state *prevstate )
{
  if ( prevstate != NULL )
  {
    mu_IncomingQueue.print_diff(prevstate);
    mu_TailPointers.print_diff(prevstate);
    mu_RouterStatus.print_diff(prevstate);
    mu_Tokens.print_diff(prevstate);
    mu_Routers.print_diff(prevstate);
    mu_ExitPath.print_diff(prevstate);
    mu_EntryPath.print_diff(prevstate);
  }
  else
print();
}
void world_class::to_state(state *newstate)
{
  mu_IncomingQueue.to_state( newstate );
  mu_TailPointers.to_state( newstate );
  mu_RouterStatus.to_state( newstate );
  mu_Tokens.to_state( newstate );
  mu_Routers.to_state( newstate );
  mu_ExitPath.to_state( newstate );
  mu_EntryPath.to_state( newstate );
}
void world_class::setstate(state *thestate)
{
}


/********************
  Rule declarations
 ********************/
/******************** RuleBase0 ********************/
class RuleBase0
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_532 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_531 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_530 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_529 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Process response + Process response + Process response + Process response, n4:%s, n3:%s, n2:%s, n1:%s", mu_n4.Name(), mu_n3.Name(), mu_n2.Name(), mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_532 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_531 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_530 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_529 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr16;
bool mu__boolexpr17;
bool mu__boolexpr18;
bool mu__boolexpr19;
bool mu__boolexpr20;
bool mu__boolexpr21;
bool mu__boolexpr22;
bool mu__boolexpr23;
bool mu__boolexpr24;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_response))) mu__boolexpr24 = FALSE ;
  else {
  mu__boolexpr24 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr24)) mu__boolexpr23 = FALSE ;
  else {
  mu__boolexpr23 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr23)) mu__boolexpr22 = FALSE ;
  else {
  mu__boolexpr22 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr22)) mu__boolexpr21 = FALSE ;
  else {
  mu__boolexpr21 = ((mu_n1) != (mu_n2)) ; 
}
  if (!(mu__boolexpr21)) mu__boolexpr20 = FALSE ;
  else {
  mu__boolexpr20 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr20)) mu__boolexpr19 = FALSE ;
  else {
  mu__boolexpr19 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr19)) mu__boolexpr18 = FALSE ;
  else {
  mu__boolexpr18 = ((mu_n2) != (mu_n3)) ; 
}
  if (!(mu__boolexpr18)) mu__boolexpr17 = FALSE ;
  else {
  mu__boolexpr17 = ((mu_n2) != (mu_n4)) ; 
}
  if (!(mu__boolexpr17)) mu__boolexpr16 = FALSE ;
  else {
  mu__boolexpr16 = ((mu_n3) != (mu_n4)) ; 
}
    return mu__boolexpr16;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 0;
    static mu__subrange_532 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_531 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_530 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_529 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 256 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr25;
bool mu__boolexpr26;
bool mu__boolexpr27;
bool mu__boolexpr28;
bool mu__boolexpr29;
bool mu__boolexpr30;
bool mu__boolexpr31;
bool mu__boolexpr32;
bool mu__boolexpr33;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_response))) mu__boolexpr33 = FALSE ;
  else {
  mu__boolexpr33 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr33)) mu__boolexpr32 = FALSE ;
  else {
  mu__boolexpr32 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr32)) mu__boolexpr31 = FALSE ;
  else {
  mu__boolexpr31 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr31)) mu__boolexpr30 = FALSE ;
  else {
  mu__boolexpr30 = ((mu_n1) != (mu_n2)) ; 
}
  if (!(mu__boolexpr30)) mu__boolexpr29 = FALSE ;
  else {
  mu__boolexpr29 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr29)) mu__boolexpr28 = FALSE ;
  else {
  mu__boolexpr28 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr28)) mu__boolexpr27 = FALSE ;
  else {
  mu__boolexpr27 = ((mu_n2) != (mu_n3)) ; 
}
  if (!(mu__boolexpr27)) mu__boolexpr26 = FALSE ;
  else {
  mu__boolexpr26 = ((mu_n2) != (mu_n4)) ; 
}
  if (!(mu__boolexpr26)) mu__boolexpr25 = FALSE ;
  else {
  mu__boolexpr25 = ((mu_n3) != (mu_n4)) ; 
}
	      if (mu__boolexpr25) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 0;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_532 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_531 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_530 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_529 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_ProcessResponse ( (int)mu_n1, mu_EntryPath[mu_n1] );
mu_Tokens[mu_n1] = (mu_Tokens[mu_n1]) + (1);
mu_ProcessResponse ( (int)mu_n2, mu_EntryPath[mu_n2] );
mu_Tokens[mu_n2] = (mu_Tokens[mu_n2]) + (1);
mu_ProcessResponse ( (int)mu_n3, mu_EntryPath[mu_n3] );
mu_Tokens[mu_n3] = (mu_Tokens[mu_n3]) + (1);
mu_ProcessResponse ( (int)mu_n4, mu_EntryPath[mu_n4] );
mu_Tokens[mu_n4] = (mu_Tokens[mu_n4]) + (1);
  };

};
/******************** RuleBase1 ********************/
class RuleBase1
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_528 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_527 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_526 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_525 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Process fwd_response + Process response + Process response + Process response, n4:%s, n3:%s, n2:%s, n1:%s", mu_n4.Name(), mu_n3.Name(), mu_n2.Name(), mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_528 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_527 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_526 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_525 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr34;
bool mu__boolexpr35;
bool mu__boolexpr36;
bool mu__boolexpr37;
bool mu__boolexpr38;
bool mu__boolexpr39;
bool mu__boolexpr40;
bool mu__boolexpr41;
bool mu__boolexpr42;
bool mu__boolexpr43;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_fwd_response))) mu__boolexpr43 = FALSE ;
  else {
  mu__boolexpr43 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr43)) mu__boolexpr42 = FALSE ;
  else {
  mu__boolexpr42 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr42)) mu__boolexpr41 = FALSE ;
  else {
  mu__boolexpr41 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr41)) mu__boolexpr40 = FALSE ;
  else {
  mu__boolexpr40 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr40)) mu__boolexpr39 = FALSE ;
  else {
  mu__boolexpr39 = ((mu_n1) != (mu_n2)) ; 
}
  if (!(mu__boolexpr39)) mu__boolexpr38 = FALSE ;
  else {
  mu__boolexpr38 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr38)) mu__boolexpr37 = FALSE ;
  else {
  mu__boolexpr37 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr37)) mu__boolexpr36 = FALSE ;
  else {
  mu__boolexpr36 = ((mu_n2) != (mu_n3)) ; 
}
  if (!(mu__boolexpr36)) mu__boolexpr35 = FALSE ;
  else {
  mu__boolexpr35 = ((mu_n2) != (mu_n4)) ; 
}
  if (!(mu__boolexpr35)) mu__boolexpr34 = FALSE ;
  else {
  mu__boolexpr34 = ((mu_n3) != (mu_n4)) ; 
}
    return mu__boolexpr34;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 256;
    static mu__subrange_528 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_527 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_526 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_525 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 512 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr44;
bool mu__boolexpr45;
bool mu__boolexpr46;
bool mu__boolexpr47;
bool mu__boolexpr48;
bool mu__boolexpr49;
bool mu__boolexpr50;
bool mu__boolexpr51;
bool mu__boolexpr52;
bool mu__boolexpr53;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_fwd_response))) mu__boolexpr53 = FALSE ;
  else {
  mu__boolexpr53 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr53)) mu__boolexpr52 = FALSE ;
  else {
  mu__boolexpr52 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr52)) mu__boolexpr51 = FALSE ;
  else {
  mu__boolexpr51 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr51)) mu__boolexpr50 = FALSE ;
  else {
  mu__boolexpr50 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr50)) mu__boolexpr49 = FALSE ;
  else {
  mu__boolexpr49 = ((mu_n1) != (mu_n2)) ; 
}
  if (!(mu__boolexpr49)) mu__boolexpr48 = FALSE ;
  else {
  mu__boolexpr48 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr48)) mu__boolexpr47 = FALSE ;
  else {
  mu__boolexpr47 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr47)) mu__boolexpr46 = FALSE ;
  else {
  mu__boolexpr46 = ((mu_n2) != (mu_n3)) ; 
}
  if (!(mu__boolexpr46)) mu__boolexpr45 = FALSE ;
  else {
  mu__boolexpr45 = ((mu_n2) != (mu_n4)) ; 
}
  if (!(mu__boolexpr45)) mu__boolexpr44 = FALSE ;
  else {
  mu__boolexpr44 = ((mu_n3) != (mu_n4)) ; 
}
	      if (mu__boolexpr44) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 256;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_528 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_527 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_526 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_525 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_ProcessFwdResponse ( (int)mu_n1, mu_EntryPath[mu_n1], mu_ExitPath[mu_n1] );
mu_ProcessResponse ( (int)mu_n2, mu_EntryPath[mu_n2] );
mu_Tokens[mu_n2] = (mu_Tokens[mu_n2]) + (1);
mu_ProcessResponse ( (int)mu_n3, mu_EntryPath[mu_n3] );
mu_Tokens[mu_n3] = (mu_Tokens[mu_n3]) + (1);
mu_ProcessResponse ( (int)mu_n4, mu_EntryPath[mu_n4] );
mu_Tokens[mu_n4] = (mu_Tokens[mu_n4]) + (1);
  };

};
/******************** RuleBase2 ********************/
class RuleBase2
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_524 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_523 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_522 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_521 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Process fwd_response + Process fwd_response + Process response + Process response, n4:%s, n3:%s, n2:%s, n1:%s", mu_n4.Name(), mu_n3.Name(), mu_n2.Name(), mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_524 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_523 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_522 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_521 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr54;
bool mu__boolexpr55;
bool mu__boolexpr56;
bool mu__boolexpr57;
bool mu__boolexpr58;
bool mu__boolexpr59;
bool mu__boolexpr60;
bool mu__boolexpr61;
bool mu__boolexpr62;
bool mu__boolexpr63;
bool mu__boolexpr64;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_fwd_response))) mu__boolexpr64 = FALSE ;
  else {
  mu__boolexpr64 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr64)) mu__boolexpr63 = FALSE ;
  else {
  mu__boolexpr63 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr63)) mu__boolexpr62 = FALSE ;
  else {
  mu__boolexpr62 = ((mu_TailPointers[mu_ExitPath[mu_n2]][mu_n2]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr62)) mu__boolexpr61 = FALSE ;
  else {
  mu__boolexpr61 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr61)) mu__boolexpr60 = FALSE ;
  else {
  mu__boolexpr60 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr60)) mu__boolexpr59 = FALSE ;
  else {
  mu__boolexpr59 = ((mu_n1) != (mu_n2)) ; 
}
  if (!(mu__boolexpr59)) mu__boolexpr58 = FALSE ;
  else {
  mu__boolexpr58 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr58)) mu__boolexpr57 = FALSE ;
  else {
  mu__boolexpr57 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr57)) mu__boolexpr56 = FALSE ;
  else {
  mu__boolexpr56 = ((mu_n2) != (mu_n3)) ; 
}
  if (!(mu__boolexpr56)) mu__boolexpr55 = FALSE ;
  else {
  mu__boolexpr55 = ((mu_n2) != (mu_n4)) ; 
}
  if (!(mu__boolexpr55)) mu__boolexpr54 = FALSE ;
  else {
  mu__boolexpr54 = ((mu_n3) != (mu_n4)) ; 
}
    return mu__boolexpr54;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 512;
    static mu__subrange_524 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_523 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_522 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_521 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 768 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr65;
bool mu__boolexpr66;
bool mu__boolexpr67;
bool mu__boolexpr68;
bool mu__boolexpr69;
bool mu__boolexpr70;
bool mu__boolexpr71;
bool mu__boolexpr72;
bool mu__boolexpr73;
bool mu__boolexpr74;
bool mu__boolexpr75;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_fwd_response))) mu__boolexpr75 = FALSE ;
  else {
  mu__boolexpr75 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr75)) mu__boolexpr74 = FALSE ;
  else {
  mu__boolexpr74 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr74)) mu__boolexpr73 = FALSE ;
  else {
  mu__boolexpr73 = ((mu_TailPointers[mu_ExitPath[mu_n2]][mu_n2]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr73)) mu__boolexpr72 = FALSE ;
  else {
  mu__boolexpr72 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr72)) mu__boolexpr71 = FALSE ;
  else {
  mu__boolexpr71 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr71)) mu__boolexpr70 = FALSE ;
  else {
  mu__boolexpr70 = ((mu_n1) != (mu_n2)) ; 
}
  if (!(mu__boolexpr70)) mu__boolexpr69 = FALSE ;
  else {
  mu__boolexpr69 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr69)) mu__boolexpr68 = FALSE ;
  else {
  mu__boolexpr68 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr68)) mu__boolexpr67 = FALSE ;
  else {
  mu__boolexpr67 = ((mu_n2) != (mu_n3)) ; 
}
  if (!(mu__boolexpr67)) mu__boolexpr66 = FALSE ;
  else {
  mu__boolexpr66 = ((mu_n2) != (mu_n4)) ; 
}
  if (!(mu__boolexpr66)) mu__boolexpr65 = FALSE ;
  else {
  mu__boolexpr65 = ((mu_n3) != (mu_n4)) ; 
}
	      if (mu__boolexpr65) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 512;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_524 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_523 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_522 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_521 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_ProcessFwdResponse ( (int)mu_n1, mu_EntryPath[mu_n1], mu_ExitPath[mu_n1] );
mu_ProcessFwdResponse ( (int)mu_n2, mu_EntryPath[mu_n2], mu_ExitPath[mu_n2] );
mu_ProcessResponse ( (int)mu_n3, mu_EntryPath[mu_n3] );
mu_Tokens[mu_n3] = (mu_Tokens[mu_n3]) + (1);
mu_ProcessResponse ( (int)mu_n4, mu_EntryPath[mu_n4] );
mu_Tokens[mu_n4] = (mu_Tokens[mu_n4]) + (1);
  };

};
/******************** RuleBase3 ********************/
class RuleBase3
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_520 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_519 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_518 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_517 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Process fwd_response + Process fwd_response + Process fwd_response + Process response, n4:%s, n3:%s, n2:%s, n1:%s", mu_n4.Name(), mu_n3.Name(), mu_n2.Name(), mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_520 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_519 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_518 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_517 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr76;
bool mu__boolexpr77;
bool mu__boolexpr78;
bool mu__boolexpr79;
bool mu__boolexpr80;
bool mu__boolexpr81;
bool mu__boolexpr82;
bool mu__boolexpr83;
bool mu__boolexpr84;
bool mu__boolexpr85;
bool mu__boolexpr86;
bool mu__boolexpr87;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_fwd_response))) mu__boolexpr87 = FALSE ;
  else {
  mu__boolexpr87 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr87)) mu__boolexpr86 = FALSE ;
  else {
  mu__boolexpr86 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr86)) mu__boolexpr85 = FALSE ;
  else {
  mu__boolexpr85 = ((mu_TailPointers[mu_ExitPath[mu_n2]][mu_n2]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr85)) mu__boolexpr84 = FALSE ;
  else {
  mu__boolexpr84 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr84)) mu__boolexpr83 = FALSE ;
  else {
  mu__boolexpr83 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr83)) mu__boolexpr82 = FALSE ;
  else {
  mu__boolexpr82 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr82)) mu__boolexpr81 = FALSE ;
  else {
  mu__boolexpr81 = ((mu_n1) != (mu_n2)) ; 
}
  if (!(mu__boolexpr81)) mu__boolexpr80 = FALSE ;
  else {
  mu__boolexpr80 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr80)) mu__boolexpr79 = FALSE ;
  else {
  mu__boolexpr79 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr79)) mu__boolexpr78 = FALSE ;
  else {
  mu__boolexpr78 = ((mu_n2) != (mu_n3)) ; 
}
  if (!(mu__boolexpr78)) mu__boolexpr77 = FALSE ;
  else {
  mu__boolexpr77 = ((mu_n2) != (mu_n4)) ; 
}
  if (!(mu__boolexpr77)) mu__boolexpr76 = FALSE ;
  else {
  mu__boolexpr76 = ((mu_n3) != (mu_n4)) ; 
}
    return mu__boolexpr76;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 768;
    static mu__subrange_520 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_519 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_518 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_517 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 1024 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr88;
bool mu__boolexpr89;
bool mu__boolexpr90;
bool mu__boolexpr91;
bool mu__boolexpr92;
bool mu__boolexpr93;
bool mu__boolexpr94;
bool mu__boolexpr95;
bool mu__boolexpr96;
bool mu__boolexpr97;
bool mu__boolexpr98;
bool mu__boolexpr99;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_fwd_response))) mu__boolexpr99 = FALSE ;
  else {
  mu__boolexpr99 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr99)) mu__boolexpr98 = FALSE ;
  else {
  mu__boolexpr98 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr98)) mu__boolexpr97 = FALSE ;
  else {
  mu__boolexpr97 = ((mu_TailPointers[mu_ExitPath[mu_n2]][mu_n2]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr97)) mu__boolexpr96 = FALSE ;
  else {
  mu__boolexpr96 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr96)) mu__boolexpr95 = FALSE ;
  else {
  mu__boolexpr95 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr95)) mu__boolexpr94 = FALSE ;
  else {
  mu__boolexpr94 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr94)) mu__boolexpr93 = FALSE ;
  else {
  mu__boolexpr93 = ((mu_n1) != (mu_n2)) ; 
}
  if (!(mu__boolexpr93)) mu__boolexpr92 = FALSE ;
  else {
  mu__boolexpr92 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr92)) mu__boolexpr91 = FALSE ;
  else {
  mu__boolexpr91 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr91)) mu__boolexpr90 = FALSE ;
  else {
  mu__boolexpr90 = ((mu_n2) != (mu_n3)) ; 
}
  if (!(mu__boolexpr90)) mu__boolexpr89 = FALSE ;
  else {
  mu__boolexpr89 = ((mu_n2) != (mu_n4)) ; 
}
  if (!(mu__boolexpr89)) mu__boolexpr88 = FALSE ;
  else {
  mu__boolexpr88 = ((mu_n3) != (mu_n4)) ; 
}
	      if (mu__boolexpr88) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 768;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_520 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_519 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_518 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_517 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_ProcessFwdResponse ( (int)mu_n1, mu_EntryPath[mu_n1], mu_ExitPath[mu_n1] );
mu_ProcessFwdResponse ( (int)mu_n2, mu_EntryPath[mu_n2], mu_ExitPath[mu_n2] );
mu_ProcessFwdResponse ( (int)mu_n3, mu_EntryPath[mu_n3], mu_ExitPath[mu_n3] );
mu_ProcessResponse ( (int)mu_n4, mu_EntryPath[mu_n4] );
mu_Tokens[mu_n4] = (mu_Tokens[mu_n4]) + (1);
  };

};
/******************** RuleBase4 ********************/
class RuleBase4
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_516 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_515 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_514 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_513 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Process fwd_response + Process fwd_response + Process fwd_response + Process fwd_response, n4:%s, n3:%s, n2:%s, n1:%s", mu_n4.Name(), mu_n3.Name(), mu_n2.Name(), mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_516 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_515 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_514 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_513 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr100;
bool mu__boolexpr101;
bool mu__boolexpr102;
bool mu__boolexpr103;
bool mu__boolexpr104;
bool mu__boolexpr105;
bool mu__boolexpr106;
bool mu__boolexpr107;
bool mu__boolexpr108;
bool mu__boolexpr109;
bool mu__boolexpr110;
bool mu__boolexpr111;
bool mu__boolexpr112;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_fwd_response))) mu__boolexpr112 = FALSE ;
  else {
  mu__boolexpr112 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr112)) mu__boolexpr111 = FALSE ;
  else {
  mu__boolexpr111 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr111)) mu__boolexpr110 = FALSE ;
  else {
  mu__boolexpr110 = ((mu_TailPointers[mu_ExitPath[mu_n2]][mu_n2]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr110)) mu__boolexpr109 = FALSE ;
  else {
  mu__boolexpr109 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr109)) mu__boolexpr108 = FALSE ;
  else {
  mu__boolexpr108 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr108)) mu__boolexpr107 = FALSE ;
  else {
  mu__boolexpr107 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr107)) mu__boolexpr106 = FALSE ;
  else {
  mu__boolexpr106 = ((mu_TailPointers[mu_ExitPath[mu_n4]][mu_n4]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr106)) mu__boolexpr105 = FALSE ;
  else {
  mu__boolexpr105 = ((mu_n1) != (mu_n2)) ; 
}
  if (!(mu__boolexpr105)) mu__boolexpr104 = FALSE ;
  else {
  mu__boolexpr104 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr104)) mu__boolexpr103 = FALSE ;
  else {
  mu__boolexpr103 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr103)) mu__boolexpr102 = FALSE ;
  else {
  mu__boolexpr102 = ((mu_n2) != (mu_n3)) ; 
}
  if (!(mu__boolexpr102)) mu__boolexpr101 = FALSE ;
  else {
  mu__boolexpr101 = ((mu_n2) != (mu_n4)) ; 
}
  if (!(mu__boolexpr101)) mu__boolexpr100 = FALSE ;
  else {
  mu__boolexpr100 = ((mu_n3) != (mu_n4)) ; 
}
    return mu__boolexpr100;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 1024;
    static mu__subrange_516 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_515 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_514 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_513 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 1280 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr113;
bool mu__boolexpr114;
bool mu__boolexpr115;
bool mu__boolexpr116;
bool mu__boolexpr117;
bool mu__boolexpr118;
bool mu__boolexpr119;
bool mu__boolexpr120;
bool mu__boolexpr121;
bool mu__boolexpr122;
bool mu__boolexpr123;
bool mu__boolexpr124;
bool mu__boolexpr125;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_fwd_response))) mu__boolexpr125 = FALSE ;
  else {
  mu__boolexpr125 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr125)) mu__boolexpr124 = FALSE ;
  else {
  mu__boolexpr124 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr124)) mu__boolexpr123 = FALSE ;
  else {
  mu__boolexpr123 = ((mu_TailPointers[mu_ExitPath[mu_n2]][mu_n2]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr123)) mu__boolexpr122 = FALSE ;
  else {
  mu__boolexpr122 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr122)) mu__boolexpr121 = FALSE ;
  else {
  mu__boolexpr121 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr121)) mu__boolexpr120 = FALSE ;
  else {
  mu__boolexpr120 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr120)) mu__boolexpr119 = FALSE ;
  else {
  mu__boolexpr119 = ((mu_TailPointers[mu_ExitPath[mu_n4]][mu_n4]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr119)) mu__boolexpr118 = FALSE ;
  else {
  mu__boolexpr118 = ((mu_n1) != (mu_n2)) ; 
}
  if (!(mu__boolexpr118)) mu__boolexpr117 = FALSE ;
  else {
  mu__boolexpr117 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr117)) mu__boolexpr116 = FALSE ;
  else {
  mu__boolexpr116 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr116)) mu__boolexpr115 = FALSE ;
  else {
  mu__boolexpr115 = ((mu_n2) != (mu_n3)) ; 
}
  if (!(mu__boolexpr115)) mu__boolexpr114 = FALSE ;
  else {
  mu__boolexpr114 = ((mu_n2) != (mu_n4)) ; 
}
  if (!(mu__boolexpr114)) mu__boolexpr113 = FALSE ;
  else {
  mu__boolexpr113 = ((mu_n3) != (mu_n4)) ; 
}
	      if (mu__boolexpr113) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 1024;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_516 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_515 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_514 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_513 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_ProcessFwdResponse ( (int)mu_n1, mu_EntryPath[mu_n1], mu_ExitPath[mu_n1] );
mu_ProcessFwdResponse ( (int)mu_n2, mu_EntryPath[mu_n2], mu_ExitPath[mu_n2] );
mu_ProcessFwdResponse ( (int)mu_n3, mu_EntryPath[mu_n3], mu_ExitPath[mu_n3] );
mu_ProcessFwdResponse ( (int)mu_n4, mu_EntryPath[mu_n4], mu_ExitPath[mu_n4] );
  };

};
/******************** RuleBase5 ********************/
class RuleBase5
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_512 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_511 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_510 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_509 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Process request + Process response + Process response + Process response, n4:%s, n3:%s, n2:%s, n1:%s", mu_n4.Name(), mu_n3.Name(), mu_n2.Name(), mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_512 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_511 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_510 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_509 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr126;
bool mu__boolexpr127;
bool mu__boolexpr128;
bool mu__boolexpr129;
bool mu__boolexpr130;
bool mu__boolexpr131;
bool mu__boolexpr132;
bool mu__boolexpr133;
bool mu__boolexpr134;
bool mu__boolexpr135;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_request))) mu__boolexpr135 = FALSE ;
  else {
  mu__boolexpr135 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr135)) mu__boolexpr134 = FALSE ;
  else {
  mu__boolexpr134 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr134)) mu__boolexpr133 = FALSE ;
  else {
  mu__boolexpr133 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr133)) mu__boolexpr132 = FALSE ;
  else {
  mu__boolexpr132 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr132)) mu__boolexpr131 = FALSE ;
  else {
  mu__boolexpr131 = ((mu_n1) != (mu_n2)) ; 
}
  if (!(mu__boolexpr131)) mu__boolexpr130 = FALSE ;
  else {
  mu__boolexpr130 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr130)) mu__boolexpr129 = FALSE ;
  else {
  mu__boolexpr129 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr129)) mu__boolexpr128 = FALSE ;
  else {
  mu__boolexpr128 = ((mu_n2) != (mu_n3)) ; 
}
  if (!(mu__boolexpr128)) mu__boolexpr127 = FALSE ;
  else {
  mu__boolexpr127 = ((mu_n2) != (mu_n4)) ; 
}
  if (!(mu__boolexpr127)) mu__boolexpr126 = FALSE ;
  else {
  mu__boolexpr126 = ((mu_n3) != (mu_n4)) ; 
}
    return mu__boolexpr126;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 1280;
    static mu__subrange_512 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_511 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_510 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_509 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 1536 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr136;
bool mu__boolexpr137;
bool mu__boolexpr138;
bool mu__boolexpr139;
bool mu__boolexpr140;
bool mu__boolexpr141;
bool mu__boolexpr142;
bool mu__boolexpr143;
bool mu__boolexpr144;
bool mu__boolexpr145;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_request))) mu__boolexpr145 = FALSE ;
  else {
  mu__boolexpr145 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr145)) mu__boolexpr144 = FALSE ;
  else {
  mu__boolexpr144 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr144)) mu__boolexpr143 = FALSE ;
  else {
  mu__boolexpr143 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr143)) mu__boolexpr142 = FALSE ;
  else {
  mu__boolexpr142 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr142)) mu__boolexpr141 = FALSE ;
  else {
  mu__boolexpr141 = ((mu_n1) != (mu_n2)) ; 
}
  if (!(mu__boolexpr141)) mu__boolexpr140 = FALSE ;
  else {
  mu__boolexpr140 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr140)) mu__boolexpr139 = FALSE ;
  else {
  mu__boolexpr139 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr139)) mu__boolexpr138 = FALSE ;
  else {
  mu__boolexpr138 = ((mu_n2) != (mu_n3)) ; 
}
  if (!(mu__boolexpr138)) mu__boolexpr137 = FALSE ;
  else {
  mu__boolexpr137 = ((mu_n2) != (mu_n4)) ; 
}
  if (!(mu__boolexpr137)) mu__boolexpr136 = FALSE ;
  else {
  mu__boolexpr136 = ((mu_n3) != (mu_n4)) ; 
}
	      if (mu__boolexpr136) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 1280;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_512 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_511 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_510 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_509 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_ProcessRequest ( (int)mu_n1, mu_EntryPath[mu_n1], mu_ExitPath[mu_n1] );
mu_ProcessResponse ( (int)mu_n2, mu_EntryPath[mu_n2] );
mu_Tokens[mu_n2] = (mu_Tokens[mu_n2]) + (1);
mu_ProcessResponse ( (int)mu_n3, mu_EntryPath[mu_n3] );
mu_Tokens[mu_n3] = (mu_Tokens[mu_n3]) + (1);
mu_ProcessResponse ( (int)mu_n4, mu_EntryPath[mu_n4] );
mu_Tokens[mu_n4] = (mu_Tokens[mu_n4]) + (1);
  };

};
/******************** RuleBase6 ********************/
class RuleBase6
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_508 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_507 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_506 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_505 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Process request + Process fwd_response + Process response + Process response, n4:%s, n3:%s, n2:%s, n1:%s", mu_n4.Name(), mu_n3.Name(), mu_n2.Name(), mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_508 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_507 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_506 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_505 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr146;
bool mu__boolexpr147;
bool mu__boolexpr148;
bool mu__boolexpr149;
bool mu__boolexpr150;
bool mu__boolexpr151;
bool mu__boolexpr152;
bool mu__boolexpr153;
bool mu__boolexpr154;
bool mu__boolexpr155;
bool mu__boolexpr156;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_request))) mu__boolexpr156 = FALSE ;
  else {
  mu__boolexpr156 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr156)) mu__boolexpr155 = FALSE ;
  else {
  mu__boolexpr155 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr155)) mu__boolexpr154 = FALSE ;
  else {
  mu__boolexpr154 = ((mu_TailPointers[mu_ExitPath[mu_n2]][mu_n2]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr154)) mu__boolexpr153 = FALSE ;
  else {
  mu__boolexpr153 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr153)) mu__boolexpr152 = FALSE ;
  else {
  mu__boolexpr152 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr152)) mu__boolexpr151 = FALSE ;
  else {
  mu__boolexpr151 = ((mu_n1) != (mu_n2)) ; 
}
  if (!(mu__boolexpr151)) mu__boolexpr150 = FALSE ;
  else {
  mu__boolexpr150 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr150)) mu__boolexpr149 = FALSE ;
  else {
  mu__boolexpr149 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr149)) mu__boolexpr148 = FALSE ;
  else {
  mu__boolexpr148 = ((mu_n2) != (mu_n3)) ; 
}
  if (!(mu__boolexpr148)) mu__boolexpr147 = FALSE ;
  else {
  mu__boolexpr147 = ((mu_n2) != (mu_n4)) ; 
}
  if (!(mu__boolexpr147)) mu__boolexpr146 = FALSE ;
  else {
  mu__boolexpr146 = ((mu_n3) != (mu_n4)) ; 
}
    return mu__boolexpr146;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 1536;
    static mu__subrange_508 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_507 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_506 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_505 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 1792 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr157;
bool mu__boolexpr158;
bool mu__boolexpr159;
bool mu__boolexpr160;
bool mu__boolexpr161;
bool mu__boolexpr162;
bool mu__boolexpr163;
bool mu__boolexpr164;
bool mu__boolexpr165;
bool mu__boolexpr166;
bool mu__boolexpr167;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_request))) mu__boolexpr167 = FALSE ;
  else {
  mu__boolexpr167 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr167)) mu__boolexpr166 = FALSE ;
  else {
  mu__boolexpr166 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr166)) mu__boolexpr165 = FALSE ;
  else {
  mu__boolexpr165 = ((mu_TailPointers[mu_ExitPath[mu_n2]][mu_n2]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr165)) mu__boolexpr164 = FALSE ;
  else {
  mu__boolexpr164 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr164)) mu__boolexpr163 = FALSE ;
  else {
  mu__boolexpr163 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr163)) mu__boolexpr162 = FALSE ;
  else {
  mu__boolexpr162 = ((mu_n1) != (mu_n2)) ; 
}
  if (!(mu__boolexpr162)) mu__boolexpr161 = FALSE ;
  else {
  mu__boolexpr161 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr161)) mu__boolexpr160 = FALSE ;
  else {
  mu__boolexpr160 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr160)) mu__boolexpr159 = FALSE ;
  else {
  mu__boolexpr159 = ((mu_n2) != (mu_n3)) ; 
}
  if (!(mu__boolexpr159)) mu__boolexpr158 = FALSE ;
  else {
  mu__boolexpr158 = ((mu_n2) != (mu_n4)) ; 
}
  if (!(mu__boolexpr158)) mu__boolexpr157 = FALSE ;
  else {
  mu__boolexpr157 = ((mu_n3) != (mu_n4)) ; 
}
	      if (mu__boolexpr157) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 1536;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_508 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_507 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_506 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_505 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_ProcessRequest ( (int)mu_n1, mu_EntryPath[mu_n1], mu_ExitPath[mu_n1] );
mu_ProcessFwdResponse ( (int)mu_n2, mu_EntryPath[mu_n2], mu_ExitPath[mu_n2] );
mu_ProcessResponse ( (int)mu_n3, mu_EntryPath[mu_n3] );
mu_Tokens[mu_n3] = (mu_Tokens[mu_n3]) + (1);
mu_ProcessResponse ( (int)mu_n4, mu_EntryPath[mu_n4] );
mu_Tokens[mu_n4] = (mu_Tokens[mu_n4]) + (1);
  };

};
/******************** RuleBase7 ********************/
class RuleBase7
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_504 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_503 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_502 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_501 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Process request + Process fwd_response + Process fwd_response + Process response, n4:%s, n3:%s, n2:%s, n1:%s", mu_n4.Name(), mu_n3.Name(), mu_n2.Name(), mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_504 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_503 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_502 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_501 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr168;
bool mu__boolexpr169;
bool mu__boolexpr170;
bool mu__boolexpr171;
bool mu__boolexpr172;
bool mu__boolexpr173;
bool mu__boolexpr174;
bool mu__boolexpr175;
bool mu__boolexpr176;
bool mu__boolexpr177;
bool mu__boolexpr178;
bool mu__boolexpr179;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_request))) mu__boolexpr179 = FALSE ;
  else {
  mu__boolexpr179 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr179)) mu__boolexpr178 = FALSE ;
  else {
  mu__boolexpr178 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr178)) mu__boolexpr177 = FALSE ;
  else {
  mu__boolexpr177 = ((mu_TailPointers[mu_ExitPath[mu_n2]][mu_n2]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr177)) mu__boolexpr176 = FALSE ;
  else {
  mu__boolexpr176 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr176)) mu__boolexpr175 = FALSE ;
  else {
  mu__boolexpr175 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr175)) mu__boolexpr174 = FALSE ;
  else {
  mu__boolexpr174 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr174)) mu__boolexpr173 = FALSE ;
  else {
  mu__boolexpr173 = ((mu_n1) != (mu_n2)) ; 
}
  if (!(mu__boolexpr173)) mu__boolexpr172 = FALSE ;
  else {
  mu__boolexpr172 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr172)) mu__boolexpr171 = FALSE ;
  else {
  mu__boolexpr171 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr171)) mu__boolexpr170 = FALSE ;
  else {
  mu__boolexpr170 = ((mu_n2) != (mu_n3)) ; 
}
  if (!(mu__boolexpr170)) mu__boolexpr169 = FALSE ;
  else {
  mu__boolexpr169 = ((mu_n2) != (mu_n4)) ; 
}
  if (!(mu__boolexpr169)) mu__boolexpr168 = FALSE ;
  else {
  mu__boolexpr168 = ((mu_n3) != (mu_n4)) ; 
}
    return mu__boolexpr168;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 1792;
    static mu__subrange_504 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_503 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_502 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_501 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 2048 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr180;
bool mu__boolexpr181;
bool mu__boolexpr182;
bool mu__boolexpr183;
bool mu__boolexpr184;
bool mu__boolexpr185;
bool mu__boolexpr186;
bool mu__boolexpr187;
bool mu__boolexpr188;
bool mu__boolexpr189;
bool mu__boolexpr190;
bool mu__boolexpr191;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_request))) mu__boolexpr191 = FALSE ;
  else {
  mu__boolexpr191 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr191)) mu__boolexpr190 = FALSE ;
  else {
  mu__boolexpr190 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr190)) mu__boolexpr189 = FALSE ;
  else {
  mu__boolexpr189 = ((mu_TailPointers[mu_ExitPath[mu_n2]][mu_n2]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr189)) mu__boolexpr188 = FALSE ;
  else {
  mu__boolexpr188 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr188)) mu__boolexpr187 = FALSE ;
  else {
  mu__boolexpr187 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr187)) mu__boolexpr186 = FALSE ;
  else {
  mu__boolexpr186 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr186)) mu__boolexpr185 = FALSE ;
  else {
  mu__boolexpr185 = ((mu_n1) != (mu_n2)) ; 
}
  if (!(mu__boolexpr185)) mu__boolexpr184 = FALSE ;
  else {
  mu__boolexpr184 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr184)) mu__boolexpr183 = FALSE ;
  else {
  mu__boolexpr183 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr183)) mu__boolexpr182 = FALSE ;
  else {
  mu__boolexpr182 = ((mu_n2) != (mu_n3)) ; 
}
  if (!(mu__boolexpr182)) mu__boolexpr181 = FALSE ;
  else {
  mu__boolexpr181 = ((mu_n2) != (mu_n4)) ; 
}
  if (!(mu__boolexpr181)) mu__boolexpr180 = FALSE ;
  else {
  mu__boolexpr180 = ((mu_n3) != (mu_n4)) ; 
}
	      if (mu__boolexpr180) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 1792;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_504 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_503 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_502 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_501 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_ProcessRequest ( (int)mu_n1, mu_EntryPath[mu_n1], mu_ExitPath[mu_n1] );
mu_ProcessFwdResponse ( (int)mu_n2, mu_EntryPath[mu_n2], mu_ExitPath[mu_n2] );
mu_ProcessFwdResponse ( (int)mu_n3, mu_EntryPath[mu_n3], mu_ExitPath[mu_n3] );
mu_ProcessResponse ( (int)mu_n4, mu_EntryPath[mu_n4] );
mu_Tokens[mu_n4] = (mu_Tokens[mu_n4]) + (1);
  };

};
/******************** RuleBase8 ********************/
class RuleBase8
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_500 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_499 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_498 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_497 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Process request + Process fwd_response + Process fwd_response + Process fwd_response, n4:%s, n3:%s, n2:%s, n1:%s", mu_n4.Name(), mu_n3.Name(), mu_n2.Name(), mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_500 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_499 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_498 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_497 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr192;
bool mu__boolexpr193;
bool mu__boolexpr194;
bool mu__boolexpr195;
bool mu__boolexpr196;
bool mu__boolexpr197;
bool mu__boolexpr198;
bool mu__boolexpr199;
bool mu__boolexpr200;
bool mu__boolexpr201;
bool mu__boolexpr202;
bool mu__boolexpr203;
bool mu__boolexpr204;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_request))) mu__boolexpr204 = FALSE ;
  else {
  mu__boolexpr204 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr204)) mu__boolexpr203 = FALSE ;
  else {
  mu__boolexpr203 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr203)) mu__boolexpr202 = FALSE ;
  else {
  mu__boolexpr202 = ((mu_TailPointers[mu_ExitPath[mu_n2]][mu_n2]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr202)) mu__boolexpr201 = FALSE ;
  else {
  mu__boolexpr201 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr201)) mu__boolexpr200 = FALSE ;
  else {
  mu__boolexpr200 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr200)) mu__boolexpr199 = FALSE ;
  else {
  mu__boolexpr199 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr199)) mu__boolexpr198 = FALSE ;
  else {
  mu__boolexpr198 = ((mu_TailPointers[mu_ExitPath[mu_n4]][mu_n4]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr198)) mu__boolexpr197 = FALSE ;
  else {
  mu__boolexpr197 = ((mu_n1) != (mu_n2)) ; 
}
  if (!(mu__boolexpr197)) mu__boolexpr196 = FALSE ;
  else {
  mu__boolexpr196 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr196)) mu__boolexpr195 = FALSE ;
  else {
  mu__boolexpr195 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr195)) mu__boolexpr194 = FALSE ;
  else {
  mu__boolexpr194 = ((mu_n2) != (mu_n3)) ; 
}
  if (!(mu__boolexpr194)) mu__boolexpr193 = FALSE ;
  else {
  mu__boolexpr193 = ((mu_n2) != (mu_n4)) ; 
}
  if (!(mu__boolexpr193)) mu__boolexpr192 = FALSE ;
  else {
  mu__boolexpr192 = ((mu_n3) != (mu_n4)) ; 
}
    return mu__boolexpr192;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 2048;
    static mu__subrange_500 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_499 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_498 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_497 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 2304 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr205;
bool mu__boolexpr206;
bool mu__boolexpr207;
bool mu__boolexpr208;
bool mu__boolexpr209;
bool mu__boolexpr210;
bool mu__boolexpr211;
bool mu__boolexpr212;
bool mu__boolexpr213;
bool mu__boolexpr214;
bool mu__boolexpr215;
bool mu__boolexpr216;
bool mu__boolexpr217;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_request))) mu__boolexpr217 = FALSE ;
  else {
  mu__boolexpr217 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr217)) mu__boolexpr216 = FALSE ;
  else {
  mu__boolexpr216 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr216)) mu__boolexpr215 = FALSE ;
  else {
  mu__boolexpr215 = ((mu_TailPointers[mu_ExitPath[mu_n2]][mu_n2]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr215)) mu__boolexpr214 = FALSE ;
  else {
  mu__boolexpr214 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr214)) mu__boolexpr213 = FALSE ;
  else {
  mu__boolexpr213 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr213)) mu__boolexpr212 = FALSE ;
  else {
  mu__boolexpr212 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr212)) mu__boolexpr211 = FALSE ;
  else {
  mu__boolexpr211 = ((mu_TailPointers[mu_ExitPath[mu_n4]][mu_n4]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr211)) mu__boolexpr210 = FALSE ;
  else {
  mu__boolexpr210 = ((mu_n1) != (mu_n2)) ; 
}
  if (!(mu__boolexpr210)) mu__boolexpr209 = FALSE ;
  else {
  mu__boolexpr209 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr209)) mu__boolexpr208 = FALSE ;
  else {
  mu__boolexpr208 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr208)) mu__boolexpr207 = FALSE ;
  else {
  mu__boolexpr207 = ((mu_n2) != (mu_n3)) ; 
}
  if (!(mu__boolexpr207)) mu__boolexpr206 = FALSE ;
  else {
  mu__boolexpr206 = ((mu_n2) != (mu_n4)) ; 
}
  if (!(mu__boolexpr206)) mu__boolexpr205 = FALSE ;
  else {
  mu__boolexpr205 = ((mu_n3) != (mu_n4)) ; 
}
	      if (mu__boolexpr205) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 2048;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_500 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_499 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_498 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_497 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_ProcessRequest ( (int)mu_n1, mu_EntryPath[mu_n1], mu_ExitPath[mu_n1] );
mu_ProcessFwdResponse ( (int)mu_n2, mu_EntryPath[mu_n2], mu_ExitPath[mu_n2] );
mu_ProcessFwdResponse ( (int)mu_n3, mu_EntryPath[mu_n3], mu_ExitPath[mu_n3] );
mu_ProcessFwdResponse ( (int)mu_n4, mu_EntryPath[mu_n4], mu_ExitPath[mu_n4] );
  };

};
/******************** RuleBase9 ********************/
class RuleBase9
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_496 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_495 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_494 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_493 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Process request + Process request + Process response + Process response, n4:%s, n3:%s, n2:%s, n1:%s", mu_n4.Name(), mu_n3.Name(), mu_n2.Name(), mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_496 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_495 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_494 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_493 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr218;
bool mu__boolexpr219;
bool mu__boolexpr220;
bool mu__boolexpr221;
bool mu__boolexpr222;
bool mu__boolexpr223;
bool mu__boolexpr224;
bool mu__boolexpr225;
bool mu__boolexpr226;
bool mu__boolexpr227;
bool mu__boolexpr228;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_request))) mu__boolexpr228 = FALSE ;
  else {
  mu__boolexpr228 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr228)) mu__boolexpr227 = FALSE ;
  else {
  mu__boolexpr227 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr227)) mu__boolexpr226 = FALSE ;
  else {
  mu__boolexpr226 = ((mu_TailPointers[mu_ExitPath[mu_n2]][mu_n2]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr226)) mu__boolexpr225 = FALSE ;
  else {
  mu__boolexpr225 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr225)) mu__boolexpr224 = FALSE ;
  else {
  mu__boolexpr224 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr224)) mu__boolexpr223 = FALSE ;
  else {
  mu__boolexpr223 = ((mu_n1) != (mu_n2)) ; 
}
  if (!(mu__boolexpr223)) mu__boolexpr222 = FALSE ;
  else {
  mu__boolexpr222 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr222)) mu__boolexpr221 = FALSE ;
  else {
  mu__boolexpr221 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr221)) mu__boolexpr220 = FALSE ;
  else {
  mu__boolexpr220 = ((mu_n2) != (mu_n3)) ; 
}
  if (!(mu__boolexpr220)) mu__boolexpr219 = FALSE ;
  else {
  mu__boolexpr219 = ((mu_n2) != (mu_n4)) ; 
}
  if (!(mu__boolexpr219)) mu__boolexpr218 = FALSE ;
  else {
  mu__boolexpr218 = ((mu_n3) != (mu_n4)) ; 
}
    return mu__boolexpr218;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 2304;
    static mu__subrange_496 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_495 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_494 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_493 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 2560 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr229;
bool mu__boolexpr230;
bool mu__boolexpr231;
bool mu__boolexpr232;
bool mu__boolexpr233;
bool mu__boolexpr234;
bool mu__boolexpr235;
bool mu__boolexpr236;
bool mu__boolexpr237;
bool mu__boolexpr238;
bool mu__boolexpr239;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_request))) mu__boolexpr239 = FALSE ;
  else {
  mu__boolexpr239 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr239)) mu__boolexpr238 = FALSE ;
  else {
  mu__boolexpr238 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr238)) mu__boolexpr237 = FALSE ;
  else {
  mu__boolexpr237 = ((mu_TailPointers[mu_ExitPath[mu_n2]][mu_n2]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr237)) mu__boolexpr236 = FALSE ;
  else {
  mu__boolexpr236 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr236)) mu__boolexpr235 = FALSE ;
  else {
  mu__boolexpr235 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr235)) mu__boolexpr234 = FALSE ;
  else {
  mu__boolexpr234 = ((mu_n1) != (mu_n2)) ; 
}
  if (!(mu__boolexpr234)) mu__boolexpr233 = FALSE ;
  else {
  mu__boolexpr233 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr233)) mu__boolexpr232 = FALSE ;
  else {
  mu__boolexpr232 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr232)) mu__boolexpr231 = FALSE ;
  else {
  mu__boolexpr231 = ((mu_n2) != (mu_n3)) ; 
}
  if (!(mu__boolexpr231)) mu__boolexpr230 = FALSE ;
  else {
  mu__boolexpr230 = ((mu_n2) != (mu_n4)) ; 
}
  if (!(mu__boolexpr230)) mu__boolexpr229 = FALSE ;
  else {
  mu__boolexpr229 = ((mu_n3) != (mu_n4)) ; 
}
	      if (mu__boolexpr229) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 2304;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_496 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_495 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_494 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_493 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_ProcessRequest ( (int)mu_n1, mu_EntryPath[mu_n1], mu_ExitPath[mu_n1] );
mu_ProcessRequest ( (int)mu_n2, mu_EntryPath[mu_n2], mu_ExitPath[mu_n2] );
mu_ProcessResponse ( (int)mu_n3, mu_EntryPath[mu_n3] );
mu_Tokens[mu_n3] = (mu_Tokens[mu_n3]) + (1);
mu_ProcessResponse ( (int)mu_n4, mu_EntryPath[mu_n4] );
mu_Tokens[mu_n4] = (mu_Tokens[mu_n4]) + (1);
  };

};
/******************** RuleBase10 ********************/
class RuleBase10
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_492 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_491 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_490 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_489 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Process request + Process request + Process fwd_response + Process response, n4:%s, n3:%s, n2:%s, n1:%s", mu_n4.Name(), mu_n3.Name(), mu_n2.Name(), mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_492 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_491 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_490 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_489 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr240;
bool mu__boolexpr241;
bool mu__boolexpr242;
bool mu__boolexpr243;
bool mu__boolexpr244;
bool mu__boolexpr245;
bool mu__boolexpr246;
bool mu__boolexpr247;
bool mu__boolexpr248;
bool mu__boolexpr249;
bool mu__boolexpr250;
bool mu__boolexpr251;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_request))) mu__boolexpr251 = FALSE ;
  else {
  mu__boolexpr251 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr251)) mu__boolexpr250 = FALSE ;
  else {
  mu__boolexpr250 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr250)) mu__boolexpr249 = FALSE ;
  else {
  mu__boolexpr249 = ((mu_TailPointers[mu_ExitPath[mu_n2]][mu_n2]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr249)) mu__boolexpr248 = FALSE ;
  else {
  mu__boolexpr248 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr248)) mu__boolexpr247 = FALSE ;
  else {
  mu__boolexpr247 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr247)) mu__boolexpr246 = FALSE ;
  else {
  mu__boolexpr246 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr246)) mu__boolexpr245 = FALSE ;
  else {
  mu__boolexpr245 = ((mu_n1) != (mu_n2)) ; 
}
  if (!(mu__boolexpr245)) mu__boolexpr244 = FALSE ;
  else {
  mu__boolexpr244 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr244)) mu__boolexpr243 = FALSE ;
  else {
  mu__boolexpr243 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr243)) mu__boolexpr242 = FALSE ;
  else {
  mu__boolexpr242 = ((mu_n2) != (mu_n3)) ; 
}
  if (!(mu__boolexpr242)) mu__boolexpr241 = FALSE ;
  else {
  mu__boolexpr241 = ((mu_n2) != (mu_n4)) ; 
}
  if (!(mu__boolexpr241)) mu__boolexpr240 = FALSE ;
  else {
  mu__boolexpr240 = ((mu_n3) != (mu_n4)) ; 
}
    return mu__boolexpr240;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 2560;
    static mu__subrange_492 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_491 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_490 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_489 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 2816 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr252;
bool mu__boolexpr253;
bool mu__boolexpr254;
bool mu__boolexpr255;
bool mu__boolexpr256;
bool mu__boolexpr257;
bool mu__boolexpr258;
bool mu__boolexpr259;
bool mu__boolexpr260;
bool mu__boolexpr261;
bool mu__boolexpr262;
bool mu__boolexpr263;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_request))) mu__boolexpr263 = FALSE ;
  else {
  mu__boolexpr263 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr263)) mu__boolexpr262 = FALSE ;
  else {
  mu__boolexpr262 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr262)) mu__boolexpr261 = FALSE ;
  else {
  mu__boolexpr261 = ((mu_TailPointers[mu_ExitPath[mu_n2]][mu_n2]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr261)) mu__boolexpr260 = FALSE ;
  else {
  mu__boolexpr260 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr260)) mu__boolexpr259 = FALSE ;
  else {
  mu__boolexpr259 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr259)) mu__boolexpr258 = FALSE ;
  else {
  mu__boolexpr258 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr258)) mu__boolexpr257 = FALSE ;
  else {
  mu__boolexpr257 = ((mu_n1) != (mu_n2)) ; 
}
  if (!(mu__boolexpr257)) mu__boolexpr256 = FALSE ;
  else {
  mu__boolexpr256 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr256)) mu__boolexpr255 = FALSE ;
  else {
  mu__boolexpr255 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr255)) mu__boolexpr254 = FALSE ;
  else {
  mu__boolexpr254 = ((mu_n2) != (mu_n3)) ; 
}
  if (!(mu__boolexpr254)) mu__boolexpr253 = FALSE ;
  else {
  mu__boolexpr253 = ((mu_n2) != (mu_n4)) ; 
}
  if (!(mu__boolexpr253)) mu__boolexpr252 = FALSE ;
  else {
  mu__boolexpr252 = ((mu_n3) != (mu_n4)) ; 
}
	      if (mu__boolexpr252) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 2560;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_492 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_491 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_490 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_489 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_ProcessRequest ( (int)mu_n1, mu_EntryPath[mu_n1], mu_ExitPath[mu_n1] );
mu_ProcessRequest ( (int)mu_n2, mu_EntryPath[mu_n2], mu_ExitPath[mu_n2] );
mu_ProcessFwdResponse ( (int)mu_n3, mu_EntryPath[mu_n3], mu_ExitPath[mu_n3] );
mu_ProcessResponse ( (int)mu_n4, mu_EntryPath[mu_n4] );
mu_Tokens[mu_n4] = (mu_Tokens[mu_n4]) + (1);
  };

};
/******************** RuleBase11 ********************/
class RuleBase11
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_488 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_487 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_486 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_485 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Process request + Process request + Process fwd_response + Process fwd_response, n4:%s, n3:%s, n2:%s, n1:%s", mu_n4.Name(), mu_n3.Name(), mu_n2.Name(), mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_488 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_487 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_486 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_485 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr264;
bool mu__boolexpr265;
bool mu__boolexpr266;
bool mu__boolexpr267;
bool mu__boolexpr268;
bool mu__boolexpr269;
bool mu__boolexpr270;
bool mu__boolexpr271;
bool mu__boolexpr272;
bool mu__boolexpr273;
bool mu__boolexpr274;
bool mu__boolexpr275;
bool mu__boolexpr276;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_request))) mu__boolexpr276 = FALSE ;
  else {
  mu__boolexpr276 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr276)) mu__boolexpr275 = FALSE ;
  else {
  mu__boolexpr275 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr275)) mu__boolexpr274 = FALSE ;
  else {
  mu__boolexpr274 = ((mu_TailPointers[mu_ExitPath[mu_n2]][mu_n2]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr274)) mu__boolexpr273 = FALSE ;
  else {
  mu__boolexpr273 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr273)) mu__boolexpr272 = FALSE ;
  else {
  mu__boolexpr272 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr272)) mu__boolexpr271 = FALSE ;
  else {
  mu__boolexpr271 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr271)) mu__boolexpr270 = FALSE ;
  else {
  mu__boolexpr270 = ((mu_TailPointers[mu_ExitPath[mu_n4]][mu_n4]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr270)) mu__boolexpr269 = FALSE ;
  else {
  mu__boolexpr269 = ((mu_n1) != (mu_n2)) ; 
}
  if (!(mu__boolexpr269)) mu__boolexpr268 = FALSE ;
  else {
  mu__boolexpr268 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr268)) mu__boolexpr267 = FALSE ;
  else {
  mu__boolexpr267 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr267)) mu__boolexpr266 = FALSE ;
  else {
  mu__boolexpr266 = ((mu_n2) != (mu_n3)) ; 
}
  if (!(mu__boolexpr266)) mu__boolexpr265 = FALSE ;
  else {
  mu__boolexpr265 = ((mu_n2) != (mu_n4)) ; 
}
  if (!(mu__boolexpr265)) mu__boolexpr264 = FALSE ;
  else {
  mu__boolexpr264 = ((mu_n3) != (mu_n4)) ; 
}
    return mu__boolexpr264;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 2816;
    static mu__subrange_488 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_487 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_486 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_485 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 3072 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr277;
bool mu__boolexpr278;
bool mu__boolexpr279;
bool mu__boolexpr280;
bool mu__boolexpr281;
bool mu__boolexpr282;
bool mu__boolexpr283;
bool mu__boolexpr284;
bool mu__boolexpr285;
bool mu__boolexpr286;
bool mu__boolexpr287;
bool mu__boolexpr288;
bool mu__boolexpr289;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_request))) mu__boolexpr289 = FALSE ;
  else {
  mu__boolexpr289 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr289)) mu__boolexpr288 = FALSE ;
  else {
  mu__boolexpr288 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr288)) mu__boolexpr287 = FALSE ;
  else {
  mu__boolexpr287 = ((mu_TailPointers[mu_ExitPath[mu_n2]][mu_n2]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr287)) mu__boolexpr286 = FALSE ;
  else {
  mu__boolexpr286 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr286)) mu__boolexpr285 = FALSE ;
  else {
  mu__boolexpr285 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr285)) mu__boolexpr284 = FALSE ;
  else {
  mu__boolexpr284 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr284)) mu__boolexpr283 = FALSE ;
  else {
  mu__boolexpr283 = ((mu_TailPointers[mu_ExitPath[mu_n4]][mu_n4]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr283)) mu__boolexpr282 = FALSE ;
  else {
  mu__boolexpr282 = ((mu_n1) != (mu_n2)) ; 
}
  if (!(mu__boolexpr282)) mu__boolexpr281 = FALSE ;
  else {
  mu__boolexpr281 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr281)) mu__boolexpr280 = FALSE ;
  else {
  mu__boolexpr280 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr280)) mu__boolexpr279 = FALSE ;
  else {
  mu__boolexpr279 = ((mu_n2) != (mu_n3)) ; 
}
  if (!(mu__boolexpr279)) mu__boolexpr278 = FALSE ;
  else {
  mu__boolexpr278 = ((mu_n2) != (mu_n4)) ; 
}
  if (!(mu__boolexpr278)) mu__boolexpr277 = FALSE ;
  else {
  mu__boolexpr277 = ((mu_n3) != (mu_n4)) ; 
}
	      if (mu__boolexpr277) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 2816;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_488 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_487 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_486 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_485 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_ProcessRequest ( (int)mu_n1, mu_EntryPath[mu_n1], mu_ExitPath[mu_n1] );
mu_ProcessRequest ( (int)mu_n2, mu_EntryPath[mu_n2], mu_ExitPath[mu_n2] );
mu_ProcessFwdResponse ( (int)mu_n3, mu_EntryPath[mu_n3], mu_ExitPath[mu_n3] );
mu_ProcessFwdResponse ( (int)mu_n4, mu_EntryPath[mu_n4], mu_ExitPath[mu_n4] );
  };

};
/******************** RuleBase12 ********************/
class RuleBase12
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_484 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_483 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_482 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_481 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Process request + Process request + Process request + Process response, n4:%s, n3:%s, n2:%s, n1:%s", mu_n4.Name(), mu_n3.Name(), mu_n2.Name(), mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_484 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_483 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_482 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_481 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr290;
bool mu__boolexpr291;
bool mu__boolexpr292;
bool mu__boolexpr293;
bool mu__boolexpr294;
bool mu__boolexpr295;
bool mu__boolexpr296;
bool mu__boolexpr297;
bool mu__boolexpr298;
bool mu__boolexpr299;
bool mu__boolexpr300;
bool mu__boolexpr301;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_request))) mu__boolexpr301 = FALSE ;
  else {
  mu__boolexpr301 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr301)) mu__boolexpr300 = FALSE ;
  else {
  mu__boolexpr300 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr300)) mu__boolexpr299 = FALSE ;
  else {
  mu__boolexpr299 = ((mu_TailPointers[mu_ExitPath[mu_n2]][mu_n2]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr299)) mu__boolexpr298 = FALSE ;
  else {
  mu__boolexpr298 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr298)) mu__boolexpr297 = FALSE ;
  else {
  mu__boolexpr297 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr297)) mu__boolexpr296 = FALSE ;
  else {
  mu__boolexpr296 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr296)) mu__boolexpr295 = FALSE ;
  else {
  mu__boolexpr295 = ((mu_n1) != (mu_n2)) ; 
}
  if (!(mu__boolexpr295)) mu__boolexpr294 = FALSE ;
  else {
  mu__boolexpr294 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr294)) mu__boolexpr293 = FALSE ;
  else {
  mu__boolexpr293 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr293)) mu__boolexpr292 = FALSE ;
  else {
  mu__boolexpr292 = ((mu_n2) != (mu_n3)) ; 
}
  if (!(mu__boolexpr292)) mu__boolexpr291 = FALSE ;
  else {
  mu__boolexpr291 = ((mu_n2) != (mu_n4)) ; 
}
  if (!(mu__boolexpr291)) mu__boolexpr290 = FALSE ;
  else {
  mu__boolexpr290 = ((mu_n3) != (mu_n4)) ; 
}
    return mu__boolexpr290;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 3072;
    static mu__subrange_484 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_483 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_482 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_481 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 3328 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr302;
bool mu__boolexpr303;
bool mu__boolexpr304;
bool mu__boolexpr305;
bool mu__boolexpr306;
bool mu__boolexpr307;
bool mu__boolexpr308;
bool mu__boolexpr309;
bool mu__boolexpr310;
bool mu__boolexpr311;
bool mu__boolexpr312;
bool mu__boolexpr313;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_request))) mu__boolexpr313 = FALSE ;
  else {
  mu__boolexpr313 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr313)) mu__boolexpr312 = FALSE ;
  else {
  mu__boolexpr312 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr312)) mu__boolexpr311 = FALSE ;
  else {
  mu__boolexpr311 = ((mu_TailPointers[mu_ExitPath[mu_n2]][mu_n2]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr311)) mu__boolexpr310 = FALSE ;
  else {
  mu__boolexpr310 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr310)) mu__boolexpr309 = FALSE ;
  else {
  mu__boolexpr309 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr309)) mu__boolexpr308 = FALSE ;
  else {
  mu__boolexpr308 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr308)) mu__boolexpr307 = FALSE ;
  else {
  mu__boolexpr307 = ((mu_n1) != (mu_n2)) ; 
}
  if (!(mu__boolexpr307)) mu__boolexpr306 = FALSE ;
  else {
  mu__boolexpr306 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr306)) mu__boolexpr305 = FALSE ;
  else {
  mu__boolexpr305 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr305)) mu__boolexpr304 = FALSE ;
  else {
  mu__boolexpr304 = ((mu_n2) != (mu_n3)) ; 
}
  if (!(mu__boolexpr304)) mu__boolexpr303 = FALSE ;
  else {
  mu__boolexpr303 = ((mu_n2) != (mu_n4)) ; 
}
  if (!(mu__boolexpr303)) mu__boolexpr302 = FALSE ;
  else {
  mu__boolexpr302 = ((mu_n3) != (mu_n4)) ; 
}
	      if (mu__boolexpr302) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 3072;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_484 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_483 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_482 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_481 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_ProcessRequest ( (int)mu_n1, mu_EntryPath[mu_n1], mu_ExitPath[mu_n1] );
mu_ProcessRequest ( (int)mu_n2, mu_EntryPath[mu_n2], mu_ExitPath[mu_n2] );
mu_ProcessRequest ( (int)mu_n3, mu_EntryPath[mu_n3], mu_ExitPath[mu_n3] );
mu_ProcessResponse ( (int)mu_n4, mu_EntryPath[mu_n4] );
mu_Tokens[mu_n4] = (mu_Tokens[mu_n4]) + (1);
  };

};
/******************** RuleBase13 ********************/
class RuleBase13
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_480 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_479 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_478 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_477 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Process request + Process request + Process request + Process fwd_response, n4:%s, n3:%s, n2:%s, n1:%s", mu_n4.Name(), mu_n3.Name(), mu_n2.Name(), mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_480 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_479 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_478 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_477 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr314;
bool mu__boolexpr315;
bool mu__boolexpr316;
bool mu__boolexpr317;
bool mu__boolexpr318;
bool mu__boolexpr319;
bool mu__boolexpr320;
bool mu__boolexpr321;
bool mu__boolexpr322;
bool mu__boolexpr323;
bool mu__boolexpr324;
bool mu__boolexpr325;
bool mu__boolexpr326;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_request))) mu__boolexpr326 = FALSE ;
  else {
  mu__boolexpr326 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr326)) mu__boolexpr325 = FALSE ;
  else {
  mu__boolexpr325 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr325)) mu__boolexpr324 = FALSE ;
  else {
  mu__boolexpr324 = ((mu_TailPointers[mu_ExitPath[mu_n2]][mu_n2]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr324)) mu__boolexpr323 = FALSE ;
  else {
  mu__boolexpr323 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr323)) mu__boolexpr322 = FALSE ;
  else {
  mu__boolexpr322 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr322)) mu__boolexpr321 = FALSE ;
  else {
  mu__boolexpr321 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr321)) mu__boolexpr320 = FALSE ;
  else {
  mu__boolexpr320 = ((mu_TailPointers[mu_ExitPath[mu_n4]][mu_n4]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr320)) mu__boolexpr319 = FALSE ;
  else {
  mu__boolexpr319 = ((mu_n1) != (mu_n2)) ; 
}
  if (!(mu__boolexpr319)) mu__boolexpr318 = FALSE ;
  else {
  mu__boolexpr318 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr318)) mu__boolexpr317 = FALSE ;
  else {
  mu__boolexpr317 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr317)) mu__boolexpr316 = FALSE ;
  else {
  mu__boolexpr316 = ((mu_n2) != (mu_n3)) ; 
}
  if (!(mu__boolexpr316)) mu__boolexpr315 = FALSE ;
  else {
  mu__boolexpr315 = ((mu_n2) != (mu_n4)) ; 
}
  if (!(mu__boolexpr315)) mu__boolexpr314 = FALSE ;
  else {
  mu__boolexpr314 = ((mu_n3) != (mu_n4)) ; 
}
    return mu__boolexpr314;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 3328;
    static mu__subrange_480 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_479 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_478 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_477 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 3584 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr327;
bool mu__boolexpr328;
bool mu__boolexpr329;
bool mu__boolexpr330;
bool mu__boolexpr331;
bool mu__boolexpr332;
bool mu__boolexpr333;
bool mu__boolexpr334;
bool mu__boolexpr335;
bool mu__boolexpr336;
bool mu__boolexpr337;
bool mu__boolexpr338;
bool mu__boolexpr339;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_request))) mu__boolexpr339 = FALSE ;
  else {
  mu__boolexpr339 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr339)) mu__boolexpr338 = FALSE ;
  else {
  mu__boolexpr338 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr338)) mu__boolexpr337 = FALSE ;
  else {
  mu__boolexpr337 = ((mu_TailPointers[mu_ExitPath[mu_n2]][mu_n2]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr337)) mu__boolexpr336 = FALSE ;
  else {
  mu__boolexpr336 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr336)) mu__boolexpr335 = FALSE ;
  else {
  mu__boolexpr335 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr335)) mu__boolexpr334 = FALSE ;
  else {
  mu__boolexpr334 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr334)) mu__boolexpr333 = FALSE ;
  else {
  mu__boolexpr333 = ((mu_TailPointers[mu_ExitPath[mu_n4]][mu_n4]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr333)) mu__boolexpr332 = FALSE ;
  else {
  mu__boolexpr332 = ((mu_n1) != (mu_n2)) ; 
}
  if (!(mu__boolexpr332)) mu__boolexpr331 = FALSE ;
  else {
  mu__boolexpr331 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr331)) mu__boolexpr330 = FALSE ;
  else {
  mu__boolexpr330 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr330)) mu__boolexpr329 = FALSE ;
  else {
  mu__boolexpr329 = ((mu_n2) != (mu_n3)) ; 
}
  if (!(mu__boolexpr329)) mu__boolexpr328 = FALSE ;
  else {
  mu__boolexpr328 = ((mu_n2) != (mu_n4)) ; 
}
  if (!(mu__boolexpr328)) mu__boolexpr327 = FALSE ;
  else {
  mu__boolexpr327 = ((mu_n3) != (mu_n4)) ; 
}
	      if (mu__boolexpr327) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 3328;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_480 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_479 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_478 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_477 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_ProcessRequest ( (int)mu_n1, mu_EntryPath[mu_n1], mu_ExitPath[mu_n1] );
mu_ProcessRequest ( (int)mu_n2, mu_EntryPath[mu_n2], mu_ExitPath[mu_n2] );
mu_ProcessRequest ( (int)mu_n3, mu_EntryPath[mu_n3], mu_ExitPath[mu_n3] );
mu_ProcessFwdResponse ( (int)mu_n4, mu_EntryPath[mu_n4], mu_ExitPath[mu_n4] );
  };

};
/******************** RuleBase14 ********************/
class RuleBase14
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_476 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_475 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_474 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_473 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Process request + Process request + Process request + Process request, n4:%s, n3:%s, n2:%s, n1:%s", mu_n4.Name(), mu_n3.Name(), mu_n2.Name(), mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_476 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_475 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_474 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_473 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr340;
bool mu__boolexpr341;
bool mu__boolexpr342;
bool mu__boolexpr343;
bool mu__boolexpr344;
bool mu__boolexpr345;
bool mu__boolexpr346;
bool mu__boolexpr347;
bool mu__boolexpr348;
bool mu__boolexpr349;
bool mu__boolexpr350;
bool mu__boolexpr351;
bool mu__boolexpr352;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_request))) mu__boolexpr352 = FALSE ;
  else {
  mu__boolexpr352 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr352)) mu__boolexpr351 = FALSE ;
  else {
  mu__boolexpr351 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr351)) mu__boolexpr350 = FALSE ;
  else {
  mu__boolexpr350 = ((mu_TailPointers[mu_ExitPath[mu_n2]][mu_n2]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr350)) mu__boolexpr349 = FALSE ;
  else {
  mu__boolexpr349 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr349)) mu__boolexpr348 = FALSE ;
  else {
  mu__boolexpr348 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr348)) mu__boolexpr347 = FALSE ;
  else {
  mu__boolexpr347 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr347)) mu__boolexpr346 = FALSE ;
  else {
  mu__boolexpr346 = ((mu_TailPointers[mu_ExitPath[mu_n4]][mu_n4]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr346)) mu__boolexpr345 = FALSE ;
  else {
  mu__boolexpr345 = ((mu_n1) != (mu_n2)) ; 
}
  if (!(mu__boolexpr345)) mu__boolexpr344 = FALSE ;
  else {
  mu__boolexpr344 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr344)) mu__boolexpr343 = FALSE ;
  else {
  mu__boolexpr343 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr343)) mu__boolexpr342 = FALSE ;
  else {
  mu__boolexpr342 = ((mu_n2) != (mu_n3)) ; 
}
  if (!(mu__boolexpr342)) mu__boolexpr341 = FALSE ;
  else {
  mu__boolexpr341 = ((mu_n2) != (mu_n4)) ; 
}
  if (!(mu__boolexpr341)) mu__boolexpr340 = FALSE ;
  else {
  mu__boolexpr340 = ((mu_n3) != (mu_n4)) ; 
}
    return mu__boolexpr340;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 3584;
    static mu__subrange_476 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_475 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_474 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_473 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 3840 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr353;
bool mu__boolexpr354;
bool mu__boolexpr355;
bool mu__boolexpr356;
bool mu__boolexpr357;
bool mu__boolexpr358;
bool mu__boolexpr359;
bool mu__boolexpr360;
bool mu__boolexpr361;
bool mu__boolexpr362;
bool mu__boolexpr363;
bool mu__boolexpr364;
bool mu__boolexpr365;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_request))) mu__boolexpr365 = FALSE ;
  else {
  mu__boolexpr365 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr365)) mu__boolexpr364 = FALSE ;
  else {
  mu__boolexpr364 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr364)) mu__boolexpr363 = FALSE ;
  else {
  mu__boolexpr363 = ((mu_TailPointers[mu_ExitPath[mu_n2]][mu_n2]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr363)) mu__boolexpr362 = FALSE ;
  else {
  mu__boolexpr362 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr362)) mu__boolexpr361 = FALSE ;
  else {
  mu__boolexpr361 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr361)) mu__boolexpr360 = FALSE ;
  else {
  mu__boolexpr360 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr360)) mu__boolexpr359 = FALSE ;
  else {
  mu__boolexpr359 = ((mu_TailPointers[mu_ExitPath[mu_n4]][mu_n4]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr359)) mu__boolexpr358 = FALSE ;
  else {
  mu__boolexpr358 = ((mu_n1) != (mu_n2)) ; 
}
  if (!(mu__boolexpr358)) mu__boolexpr357 = FALSE ;
  else {
  mu__boolexpr357 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr357)) mu__boolexpr356 = FALSE ;
  else {
  mu__boolexpr356 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr356)) mu__boolexpr355 = FALSE ;
  else {
  mu__boolexpr355 = ((mu_n2) != (mu_n3)) ; 
}
  if (!(mu__boolexpr355)) mu__boolexpr354 = FALSE ;
  else {
  mu__boolexpr354 = ((mu_n2) != (mu_n4)) ; 
}
  if (!(mu__boolexpr354)) mu__boolexpr353 = FALSE ;
  else {
  mu__boolexpr353 = ((mu_n3) != (mu_n4)) ; 
}
	      if (mu__boolexpr353) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 3584;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_476 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_475 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_474 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_473 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_ProcessRequest ( (int)mu_n1, mu_EntryPath[mu_n1], mu_ExitPath[mu_n1] );
mu_ProcessRequest ( (int)mu_n2, mu_EntryPath[mu_n2], mu_ExitPath[mu_n2] );
mu_ProcessRequest ( (int)mu_n3, mu_EntryPath[mu_n3], mu_ExitPath[mu_n3] );
mu_ProcessRequest ( (int)mu_n4, mu_EntryPath[mu_n4], mu_ExitPath[mu_n4] );
  };

};
/******************** RuleBase15 ********************/
class RuleBase15
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_472 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_471 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_470 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_469 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Process fwd_request + Process response + Process response + Process response, n4:%s, n3:%s, n2:%s, n1:%s", mu_n4.Name(), mu_n3.Name(), mu_n2.Name(), mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_472 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_471 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_470 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_469 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr366;
bool mu__boolexpr367;
bool mu__boolexpr368;
bool mu__boolexpr369;
bool mu__boolexpr370;
bool mu__boolexpr371;
bool mu__boolexpr372;
bool mu__boolexpr373;
bool mu__boolexpr374;
bool mu__boolexpr375;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_fwd_request))) mu__boolexpr375 = FALSE ;
  else {
  mu__boolexpr375 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr375)) mu__boolexpr374 = FALSE ;
  else {
  mu__boolexpr374 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr374)) mu__boolexpr373 = FALSE ;
  else {
  mu__boolexpr373 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr373)) mu__boolexpr372 = FALSE ;
  else {
  mu__boolexpr372 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr372)) mu__boolexpr371 = FALSE ;
  else {
  mu__boolexpr371 = ((mu_n1) != (mu_n2)) ; 
}
  if (!(mu__boolexpr371)) mu__boolexpr370 = FALSE ;
  else {
  mu__boolexpr370 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr370)) mu__boolexpr369 = FALSE ;
  else {
  mu__boolexpr369 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr369)) mu__boolexpr368 = FALSE ;
  else {
  mu__boolexpr368 = ((mu_n2) != (mu_n3)) ; 
}
  if (!(mu__boolexpr368)) mu__boolexpr367 = FALSE ;
  else {
  mu__boolexpr367 = ((mu_n2) != (mu_n4)) ; 
}
  if (!(mu__boolexpr367)) mu__boolexpr366 = FALSE ;
  else {
  mu__boolexpr366 = ((mu_n3) != (mu_n4)) ; 
}
    return mu__boolexpr366;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 3840;
    static mu__subrange_472 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_471 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_470 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_469 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 4096 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr376;
bool mu__boolexpr377;
bool mu__boolexpr378;
bool mu__boolexpr379;
bool mu__boolexpr380;
bool mu__boolexpr381;
bool mu__boolexpr382;
bool mu__boolexpr383;
bool mu__boolexpr384;
bool mu__boolexpr385;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_fwd_request))) mu__boolexpr385 = FALSE ;
  else {
  mu__boolexpr385 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr385)) mu__boolexpr384 = FALSE ;
  else {
  mu__boolexpr384 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr384)) mu__boolexpr383 = FALSE ;
  else {
  mu__boolexpr383 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr383)) mu__boolexpr382 = FALSE ;
  else {
  mu__boolexpr382 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr382)) mu__boolexpr381 = FALSE ;
  else {
  mu__boolexpr381 = ((mu_n1) != (mu_n2)) ; 
}
  if (!(mu__boolexpr381)) mu__boolexpr380 = FALSE ;
  else {
  mu__boolexpr380 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr380)) mu__boolexpr379 = FALSE ;
  else {
  mu__boolexpr379 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr379)) mu__boolexpr378 = FALSE ;
  else {
  mu__boolexpr378 = ((mu_n2) != (mu_n3)) ; 
}
  if (!(mu__boolexpr378)) mu__boolexpr377 = FALSE ;
  else {
  mu__boolexpr377 = ((mu_n2) != (mu_n4)) ; 
}
  if (!(mu__boolexpr377)) mu__boolexpr376 = FALSE ;
  else {
  mu__boolexpr376 = ((mu_n3) != (mu_n4)) ; 
}
	      if (mu__boolexpr376) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 3840;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_472 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_471 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_470 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_469 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_ProcessFwdRequest ( (int)mu_n1, mu_EntryPath[mu_n1], mu_ExitPath[mu_n1] );
mu_ProcessResponse ( (int)mu_n2, mu_EntryPath[mu_n2] );
mu_Tokens[mu_n2] = (mu_Tokens[mu_n2]) + (1);
mu_ProcessResponse ( (int)mu_n3, mu_EntryPath[mu_n3] );
mu_Tokens[mu_n3] = (mu_Tokens[mu_n3]) + (1);
mu_ProcessResponse ( (int)mu_n4, mu_EntryPath[mu_n4] );
mu_Tokens[mu_n4] = (mu_Tokens[mu_n4]) + (1);
  };

};
/******************** RuleBase16 ********************/
class RuleBase16
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_468 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_467 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_466 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_465 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Process fwd_request + Process fwd_response + Process response + Process response, n4:%s, n3:%s, n2:%s, n1:%s", mu_n4.Name(), mu_n3.Name(), mu_n2.Name(), mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_468 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_467 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_466 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_465 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr386;
bool mu__boolexpr387;
bool mu__boolexpr388;
bool mu__boolexpr389;
bool mu__boolexpr390;
bool mu__boolexpr391;
bool mu__boolexpr392;
bool mu__boolexpr393;
bool mu__boolexpr394;
bool mu__boolexpr395;
bool mu__boolexpr396;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_fwd_request))) mu__boolexpr396 = FALSE ;
  else {
  mu__boolexpr396 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr396)) mu__boolexpr395 = FALSE ;
  else {
  mu__boolexpr395 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr395)) mu__boolexpr394 = FALSE ;
  else {
  mu__boolexpr394 = ((mu_TailPointers[mu_ExitPath[mu_n2]][mu_n2]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr394)) mu__boolexpr393 = FALSE ;
  else {
  mu__boolexpr393 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr393)) mu__boolexpr392 = FALSE ;
  else {
  mu__boolexpr392 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr392)) mu__boolexpr391 = FALSE ;
  else {
  mu__boolexpr391 = ((mu_n1) != (mu_n2)) ; 
}
  if (!(mu__boolexpr391)) mu__boolexpr390 = FALSE ;
  else {
  mu__boolexpr390 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr390)) mu__boolexpr389 = FALSE ;
  else {
  mu__boolexpr389 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr389)) mu__boolexpr388 = FALSE ;
  else {
  mu__boolexpr388 = ((mu_n2) != (mu_n3)) ; 
}
  if (!(mu__boolexpr388)) mu__boolexpr387 = FALSE ;
  else {
  mu__boolexpr387 = ((mu_n2) != (mu_n4)) ; 
}
  if (!(mu__boolexpr387)) mu__boolexpr386 = FALSE ;
  else {
  mu__boolexpr386 = ((mu_n3) != (mu_n4)) ; 
}
    return mu__boolexpr386;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 4096;
    static mu__subrange_468 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_467 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_466 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_465 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 4352 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr397;
bool mu__boolexpr398;
bool mu__boolexpr399;
bool mu__boolexpr400;
bool mu__boolexpr401;
bool mu__boolexpr402;
bool mu__boolexpr403;
bool mu__boolexpr404;
bool mu__boolexpr405;
bool mu__boolexpr406;
bool mu__boolexpr407;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_fwd_request))) mu__boolexpr407 = FALSE ;
  else {
  mu__boolexpr407 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr407)) mu__boolexpr406 = FALSE ;
  else {
  mu__boolexpr406 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr406)) mu__boolexpr405 = FALSE ;
  else {
  mu__boolexpr405 = ((mu_TailPointers[mu_ExitPath[mu_n2]][mu_n2]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr405)) mu__boolexpr404 = FALSE ;
  else {
  mu__boolexpr404 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr404)) mu__boolexpr403 = FALSE ;
  else {
  mu__boolexpr403 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr403)) mu__boolexpr402 = FALSE ;
  else {
  mu__boolexpr402 = ((mu_n1) != (mu_n2)) ; 
}
  if (!(mu__boolexpr402)) mu__boolexpr401 = FALSE ;
  else {
  mu__boolexpr401 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr401)) mu__boolexpr400 = FALSE ;
  else {
  mu__boolexpr400 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr400)) mu__boolexpr399 = FALSE ;
  else {
  mu__boolexpr399 = ((mu_n2) != (mu_n3)) ; 
}
  if (!(mu__boolexpr399)) mu__boolexpr398 = FALSE ;
  else {
  mu__boolexpr398 = ((mu_n2) != (mu_n4)) ; 
}
  if (!(mu__boolexpr398)) mu__boolexpr397 = FALSE ;
  else {
  mu__boolexpr397 = ((mu_n3) != (mu_n4)) ; 
}
	      if (mu__boolexpr397) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 4096;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_468 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_467 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_466 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_465 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_ProcessFwdRequest ( (int)mu_n1, mu_EntryPath[mu_n1], mu_ExitPath[mu_n1] );
mu_ProcessFwdResponse ( (int)mu_n2, mu_EntryPath[mu_n2], mu_ExitPath[mu_n2] );
mu_ProcessResponse ( (int)mu_n3, mu_EntryPath[mu_n3] );
mu_Tokens[mu_n3] = (mu_Tokens[mu_n3]) + (1);
mu_ProcessResponse ( (int)mu_n4, mu_EntryPath[mu_n4] );
mu_Tokens[mu_n4] = (mu_Tokens[mu_n4]) + (1);
  };

};
/******************** RuleBase17 ********************/
class RuleBase17
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_464 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_463 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_462 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_461 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Process fwd_request + Process fwd_response + Process fwd_response + Process response, n4:%s, n3:%s, n2:%s, n1:%s", mu_n4.Name(), mu_n3.Name(), mu_n2.Name(), mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_464 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_463 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_462 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_461 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr408;
bool mu__boolexpr409;
bool mu__boolexpr410;
bool mu__boolexpr411;
bool mu__boolexpr412;
bool mu__boolexpr413;
bool mu__boolexpr414;
bool mu__boolexpr415;
bool mu__boolexpr416;
bool mu__boolexpr417;
bool mu__boolexpr418;
bool mu__boolexpr419;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_fwd_request))) mu__boolexpr419 = FALSE ;
  else {
  mu__boolexpr419 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr419)) mu__boolexpr418 = FALSE ;
  else {
  mu__boolexpr418 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr418)) mu__boolexpr417 = FALSE ;
  else {
  mu__boolexpr417 = ((mu_TailPointers[mu_ExitPath[mu_n2]][mu_n2]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr417)) mu__boolexpr416 = FALSE ;
  else {
  mu__boolexpr416 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr416)) mu__boolexpr415 = FALSE ;
  else {
  mu__boolexpr415 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr415)) mu__boolexpr414 = FALSE ;
  else {
  mu__boolexpr414 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr414)) mu__boolexpr413 = FALSE ;
  else {
  mu__boolexpr413 = ((mu_n1) != (mu_n2)) ; 
}
  if (!(mu__boolexpr413)) mu__boolexpr412 = FALSE ;
  else {
  mu__boolexpr412 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr412)) mu__boolexpr411 = FALSE ;
  else {
  mu__boolexpr411 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr411)) mu__boolexpr410 = FALSE ;
  else {
  mu__boolexpr410 = ((mu_n2) != (mu_n3)) ; 
}
  if (!(mu__boolexpr410)) mu__boolexpr409 = FALSE ;
  else {
  mu__boolexpr409 = ((mu_n2) != (mu_n4)) ; 
}
  if (!(mu__boolexpr409)) mu__boolexpr408 = FALSE ;
  else {
  mu__boolexpr408 = ((mu_n3) != (mu_n4)) ; 
}
    return mu__boolexpr408;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 4352;
    static mu__subrange_464 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_463 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_462 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_461 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 4608 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr420;
bool mu__boolexpr421;
bool mu__boolexpr422;
bool mu__boolexpr423;
bool mu__boolexpr424;
bool mu__boolexpr425;
bool mu__boolexpr426;
bool mu__boolexpr427;
bool mu__boolexpr428;
bool mu__boolexpr429;
bool mu__boolexpr430;
bool mu__boolexpr431;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_fwd_request))) mu__boolexpr431 = FALSE ;
  else {
  mu__boolexpr431 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr431)) mu__boolexpr430 = FALSE ;
  else {
  mu__boolexpr430 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr430)) mu__boolexpr429 = FALSE ;
  else {
  mu__boolexpr429 = ((mu_TailPointers[mu_ExitPath[mu_n2]][mu_n2]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr429)) mu__boolexpr428 = FALSE ;
  else {
  mu__boolexpr428 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr428)) mu__boolexpr427 = FALSE ;
  else {
  mu__boolexpr427 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr427)) mu__boolexpr426 = FALSE ;
  else {
  mu__boolexpr426 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr426)) mu__boolexpr425 = FALSE ;
  else {
  mu__boolexpr425 = ((mu_n1) != (mu_n2)) ; 
}
  if (!(mu__boolexpr425)) mu__boolexpr424 = FALSE ;
  else {
  mu__boolexpr424 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr424)) mu__boolexpr423 = FALSE ;
  else {
  mu__boolexpr423 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr423)) mu__boolexpr422 = FALSE ;
  else {
  mu__boolexpr422 = ((mu_n2) != (mu_n3)) ; 
}
  if (!(mu__boolexpr422)) mu__boolexpr421 = FALSE ;
  else {
  mu__boolexpr421 = ((mu_n2) != (mu_n4)) ; 
}
  if (!(mu__boolexpr421)) mu__boolexpr420 = FALSE ;
  else {
  mu__boolexpr420 = ((mu_n3) != (mu_n4)) ; 
}
	      if (mu__boolexpr420) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 4352;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_464 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_463 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_462 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_461 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_ProcessFwdRequest ( (int)mu_n1, mu_EntryPath[mu_n1], mu_ExitPath[mu_n1] );
mu_ProcessFwdResponse ( (int)mu_n2, mu_EntryPath[mu_n2], mu_ExitPath[mu_n2] );
mu_ProcessFwdResponse ( (int)mu_n3, mu_EntryPath[mu_n3], mu_ExitPath[mu_n3] );
mu_ProcessResponse ( (int)mu_n4, mu_EntryPath[mu_n4] );
mu_Tokens[mu_n4] = (mu_Tokens[mu_n4]) + (1);
  };

};
/******************** RuleBase18 ********************/
class RuleBase18
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_460 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_459 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_458 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_457 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Process fwd_request + Process fwd_response + Process fwd_response + Process fwd_response, n4:%s, n3:%s, n2:%s, n1:%s", mu_n4.Name(), mu_n3.Name(), mu_n2.Name(), mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_460 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_459 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_458 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_457 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr432;
bool mu__boolexpr433;
bool mu__boolexpr434;
bool mu__boolexpr435;
bool mu__boolexpr436;
bool mu__boolexpr437;
bool mu__boolexpr438;
bool mu__boolexpr439;
bool mu__boolexpr440;
bool mu__boolexpr441;
bool mu__boolexpr442;
bool mu__boolexpr443;
bool mu__boolexpr444;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_fwd_request))) mu__boolexpr444 = FALSE ;
  else {
  mu__boolexpr444 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr444)) mu__boolexpr443 = FALSE ;
  else {
  mu__boolexpr443 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr443)) mu__boolexpr442 = FALSE ;
  else {
  mu__boolexpr442 = ((mu_TailPointers[mu_ExitPath[mu_n2]][mu_n2]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr442)) mu__boolexpr441 = FALSE ;
  else {
  mu__boolexpr441 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr441)) mu__boolexpr440 = FALSE ;
  else {
  mu__boolexpr440 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr440)) mu__boolexpr439 = FALSE ;
  else {
  mu__boolexpr439 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr439)) mu__boolexpr438 = FALSE ;
  else {
  mu__boolexpr438 = ((mu_TailPointers[mu_ExitPath[mu_n4]][mu_n4]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr438)) mu__boolexpr437 = FALSE ;
  else {
  mu__boolexpr437 = ((mu_n1) != (mu_n2)) ; 
}
  if (!(mu__boolexpr437)) mu__boolexpr436 = FALSE ;
  else {
  mu__boolexpr436 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr436)) mu__boolexpr435 = FALSE ;
  else {
  mu__boolexpr435 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr435)) mu__boolexpr434 = FALSE ;
  else {
  mu__boolexpr434 = ((mu_n2) != (mu_n3)) ; 
}
  if (!(mu__boolexpr434)) mu__boolexpr433 = FALSE ;
  else {
  mu__boolexpr433 = ((mu_n2) != (mu_n4)) ; 
}
  if (!(mu__boolexpr433)) mu__boolexpr432 = FALSE ;
  else {
  mu__boolexpr432 = ((mu_n3) != (mu_n4)) ; 
}
    return mu__boolexpr432;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 4608;
    static mu__subrange_460 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_459 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_458 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_457 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 4864 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr445;
bool mu__boolexpr446;
bool mu__boolexpr447;
bool mu__boolexpr448;
bool mu__boolexpr449;
bool mu__boolexpr450;
bool mu__boolexpr451;
bool mu__boolexpr452;
bool mu__boolexpr453;
bool mu__boolexpr454;
bool mu__boolexpr455;
bool mu__boolexpr456;
bool mu__boolexpr457;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_fwd_request))) mu__boolexpr457 = FALSE ;
  else {
  mu__boolexpr457 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr457)) mu__boolexpr456 = FALSE ;
  else {
  mu__boolexpr456 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr456)) mu__boolexpr455 = FALSE ;
  else {
  mu__boolexpr455 = ((mu_TailPointers[mu_ExitPath[mu_n2]][mu_n2]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr455)) mu__boolexpr454 = FALSE ;
  else {
  mu__boolexpr454 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr454)) mu__boolexpr453 = FALSE ;
  else {
  mu__boolexpr453 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr453)) mu__boolexpr452 = FALSE ;
  else {
  mu__boolexpr452 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr452)) mu__boolexpr451 = FALSE ;
  else {
  mu__boolexpr451 = ((mu_TailPointers[mu_ExitPath[mu_n4]][mu_n4]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr451)) mu__boolexpr450 = FALSE ;
  else {
  mu__boolexpr450 = ((mu_n1) != (mu_n2)) ; 
}
  if (!(mu__boolexpr450)) mu__boolexpr449 = FALSE ;
  else {
  mu__boolexpr449 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr449)) mu__boolexpr448 = FALSE ;
  else {
  mu__boolexpr448 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr448)) mu__boolexpr447 = FALSE ;
  else {
  mu__boolexpr447 = ((mu_n2) != (mu_n3)) ; 
}
  if (!(mu__boolexpr447)) mu__boolexpr446 = FALSE ;
  else {
  mu__boolexpr446 = ((mu_n2) != (mu_n4)) ; 
}
  if (!(mu__boolexpr446)) mu__boolexpr445 = FALSE ;
  else {
  mu__boolexpr445 = ((mu_n3) != (mu_n4)) ; 
}
	      if (mu__boolexpr445) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 4608;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_460 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_459 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_458 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_457 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_ProcessFwdRequest ( (int)mu_n1, mu_EntryPath[mu_n1], mu_ExitPath[mu_n1] );
mu_ProcessFwdResponse ( (int)mu_n2, mu_EntryPath[mu_n2], mu_ExitPath[mu_n2] );
mu_ProcessFwdResponse ( (int)mu_n3, mu_EntryPath[mu_n3], mu_ExitPath[mu_n3] );
mu_ProcessFwdResponse ( (int)mu_n4, mu_EntryPath[mu_n4], mu_ExitPath[mu_n4] );
  };

};
/******************** RuleBase19 ********************/
class RuleBase19
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_456 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_455 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_454 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_453 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Process fwd_request + Process request + Process response + Process response, n4:%s, n3:%s, n2:%s, n1:%s", mu_n4.Name(), mu_n3.Name(), mu_n2.Name(), mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_456 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_455 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_454 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_453 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr458;
bool mu__boolexpr459;
bool mu__boolexpr460;
bool mu__boolexpr461;
bool mu__boolexpr462;
bool mu__boolexpr463;
bool mu__boolexpr464;
bool mu__boolexpr465;
bool mu__boolexpr466;
bool mu__boolexpr467;
bool mu__boolexpr468;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_fwd_request))) mu__boolexpr468 = FALSE ;
  else {
  mu__boolexpr468 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr468)) mu__boolexpr467 = FALSE ;
  else {
  mu__boolexpr467 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr467)) mu__boolexpr466 = FALSE ;
  else {
  mu__boolexpr466 = ((mu_TailPointers[mu_ExitPath[mu_n2]][mu_n2]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr466)) mu__boolexpr465 = FALSE ;
  else {
  mu__boolexpr465 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr465)) mu__boolexpr464 = FALSE ;
  else {
  mu__boolexpr464 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr464)) mu__boolexpr463 = FALSE ;
  else {
  mu__boolexpr463 = ((mu_n1) != (mu_n2)) ; 
}
  if (!(mu__boolexpr463)) mu__boolexpr462 = FALSE ;
  else {
  mu__boolexpr462 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr462)) mu__boolexpr461 = FALSE ;
  else {
  mu__boolexpr461 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr461)) mu__boolexpr460 = FALSE ;
  else {
  mu__boolexpr460 = ((mu_n2) != (mu_n3)) ; 
}
  if (!(mu__boolexpr460)) mu__boolexpr459 = FALSE ;
  else {
  mu__boolexpr459 = ((mu_n2) != (mu_n4)) ; 
}
  if (!(mu__boolexpr459)) mu__boolexpr458 = FALSE ;
  else {
  mu__boolexpr458 = ((mu_n3) != (mu_n4)) ; 
}
    return mu__boolexpr458;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 4864;
    static mu__subrange_456 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_455 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_454 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_453 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 5120 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr469;
bool mu__boolexpr470;
bool mu__boolexpr471;
bool mu__boolexpr472;
bool mu__boolexpr473;
bool mu__boolexpr474;
bool mu__boolexpr475;
bool mu__boolexpr476;
bool mu__boolexpr477;
bool mu__boolexpr478;
bool mu__boolexpr479;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_fwd_request))) mu__boolexpr479 = FALSE ;
  else {
  mu__boolexpr479 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr479)) mu__boolexpr478 = FALSE ;
  else {
  mu__boolexpr478 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr478)) mu__boolexpr477 = FALSE ;
  else {
  mu__boolexpr477 = ((mu_TailPointers[mu_ExitPath[mu_n2]][mu_n2]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr477)) mu__boolexpr476 = FALSE ;
  else {
  mu__boolexpr476 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr476)) mu__boolexpr475 = FALSE ;
  else {
  mu__boolexpr475 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr475)) mu__boolexpr474 = FALSE ;
  else {
  mu__boolexpr474 = ((mu_n1) != (mu_n2)) ; 
}
  if (!(mu__boolexpr474)) mu__boolexpr473 = FALSE ;
  else {
  mu__boolexpr473 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr473)) mu__boolexpr472 = FALSE ;
  else {
  mu__boolexpr472 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr472)) mu__boolexpr471 = FALSE ;
  else {
  mu__boolexpr471 = ((mu_n2) != (mu_n3)) ; 
}
  if (!(mu__boolexpr471)) mu__boolexpr470 = FALSE ;
  else {
  mu__boolexpr470 = ((mu_n2) != (mu_n4)) ; 
}
  if (!(mu__boolexpr470)) mu__boolexpr469 = FALSE ;
  else {
  mu__boolexpr469 = ((mu_n3) != (mu_n4)) ; 
}
	      if (mu__boolexpr469) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 4864;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_456 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_455 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_454 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_453 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_ProcessFwdRequest ( (int)mu_n1, mu_EntryPath[mu_n1], mu_ExitPath[mu_n1] );
mu_ProcessRequest ( (int)mu_n2, mu_EntryPath[mu_n2], mu_ExitPath[mu_n2] );
mu_ProcessResponse ( (int)mu_n3, mu_EntryPath[mu_n3] );
mu_Tokens[mu_n3] = (mu_Tokens[mu_n3]) + (1);
mu_ProcessResponse ( (int)mu_n4, mu_EntryPath[mu_n4] );
mu_Tokens[mu_n4] = (mu_Tokens[mu_n4]) + (1);
  };

};
/******************** RuleBase20 ********************/
class RuleBase20
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_452 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_451 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_450 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_449 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Process fwd_request + Process request + Process fwd_response + Process response, n4:%s, n3:%s, n2:%s, n1:%s", mu_n4.Name(), mu_n3.Name(), mu_n2.Name(), mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_452 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_451 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_450 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_449 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr480;
bool mu__boolexpr481;
bool mu__boolexpr482;
bool mu__boolexpr483;
bool mu__boolexpr484;
bool mu__boolexpr485;
bool mu__boolexpr486;
bool mu__boolexpr487;
bool mu__boolexpr488;
bool mu__boolexpr489;
bool mu__boolexpr490;
bool mu__boolexpr491;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_fwd_request))) mu__boolexpr491 = FALSE ;
  else {
  mu__boolexpr491 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr491)) mu__boolexpr490 = FALSE ;
  else {
  mu__boolexpr490 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr490)) mu__boolexpr489 = FALSE ;
  else {
  mu__boolexpr489 = ((mu_TailPointers[mu_ExitPath[mu_n2]][mu_n2]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr489)) mu__boolexpr488 = FALSE ;
  else {
  mu__boolexpr488 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr488)) mu__boolexpr487 = FALSE ;
  else {
  mu__boolexpr487 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr487)) mu__boolexpr486 = FALSE ;
  else {
  mu__boolexpr486 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr486)) mu__boolexpr485 = FALSE ;
  else {
  mu__boolexpr485 = ((mu_n1) != (mu_n2)) ; 
}
  if (!(mu__boolexpr485)) mu__boolexpr484 = FALSE ;
  else {
  mu__boolexpr484 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr484)) mu__boolexpr483 = FALSE ;
  else {
  mu__boolexpr483 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr483)) mu__boolexpr482 = FALSE ;
  else {
  mu__boolexpr482 = ((mu_n2) != (mu_n3)) ; 
}
  if (!(mu__boolexpr482)) mu__boolexpr481 = FALSE ;
  else {
  mu__boolexpr481 = ((mu_n2) != (mu_n4)) ; 
}
  if (!(mu__boolexpr481)) mu__boolexpr480 = FALSE ;
  else {
  mu__boolexpr480 = ((mu_n3) != (mu_n4)) ; 
}
    return mu__boolexpr480;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 5120;
    static mu__subrange_452 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_451 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_450 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_449 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 5376 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr492;
bool mu__boolexpr493;
bool mu__boolexpr494;
bool mu__boolexpr495;
bool mu__boolexpr496;
bool mu__boolexpr497;
bool mu__boolexpr498;
bool mu__boolexpr499;
bool mu__boolexpr500;
bool mu__boolexpr501;
bool mu__boolexpr502;
bool mu__boolexpr503;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_fwd_request))) mu__boolexpr503 = FALSE ;
  else {
  mu__boolexpr503 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr503)) mu__boolexpr502 = FALSE ;
  else {
  mu__boolexpr502 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr502)) mu__boolexpr501 = FALSE ;
  else {
  mu__boolexpr501 = ((mu_TailPointers[mu_ExitPath[mu_n2]][mu_n2]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr501)) mu__boolexpr500 = FALSE ;
  else {
  mu__boolexpr500 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr500)) mu__boolexpr499 = FALSE ;
  else {
  mu__boolexpr499 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr499)) mu__boolexpr498 = FALSE ;
  else {
  mu__boolexpr498 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr498)) mu__boolexpr497 = FALSE ;
  else {
  mu__boolexpr497 = ((mu_n1) != (mu_n2)) ; 
}
  if (!(mu__boolexpr497)) mu__boolexpr496 = FALSE ;
  else {
  mu__boolexpr496 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr496)) mu__boolexpr495 = FALSE ;
  else {
  mu__boolexpr495 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr495)) mu__boolexpr494 = FALSE ;
  else {
  mu__boolexpr494 = ((mu_n2) != (mu_n3)) ; 
}
  if (!(mu__boolexpr494)) mu__boolexpr493 = FALSE ;
  else {
  mu__boolexpr493 = ((mu_n2) != (mu_n4)) ; 
}
  if (!(mu__boolexpr493)) mu__boolexpr492 = FALSE ;
  else {
  mu__boolexpr492 = ((mu_n3) != (mu_n4)) ; 
}
	      if (mu__boolexpr492) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 5120;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_452 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_451 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_450 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_449 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_ProcessFwdRequest ( (int)mu_n1, mu_EntryPath[mu_n1], mu_ExitPath[mu_n1] );
mu_ProcessRequest ( (int)mu_n2, mu_EntryPath[mu_n2], mu_ExitPath[mu_n2] );
mu_ProcessFwdResponse ( (int)mu_n3, mu_EntryPath[mu_n3], mu_ExitPath[mu_n3] );
mu_ProcessResponse ( (int)mu_n4, mu_EntryPath[mu_n4] );
mu_Tokens[mu_n4] = (mu_Tokens[mu_n4]) + (1);
  };

};
/******************** RuleBase21 ********************/
class RuleBase21
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_448 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_447 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_446 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_445 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Process fwd_request + Process request + Process fwd_response + Process fwd_response, n4:%s, n3:%s, n2:%s, n1:%s", mu_n4.Name(), mu_n3.Name(), mu_n2.Name(), mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_448 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_447 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_446 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_445 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr504;
bool mu__boolexpr505;
bool mu__boolexpr506;
bool mu__boolexpr507;
bool mu__boolexpr508;
bool mu__boolexpr509;
bool mu__boolexpr510;
bool mu__boolexpr511;
bool mu__boolexpr512;
bool mu__boolexpr513;
bool mu__boolexpr514;
bool mu__boolexpr515;
bool mu__boolexpr516;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_fwd_request))) mu__boolexpr516 = FALSE ;
  else {
  mu__boolexpr516 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr516)) mu__boolexpr515 = FALSE ;
  else {
  mu__boolexpr515 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr515)) mu__boolexpr514 = FALSE ;
  else {
  mu__boolexpr514 = ((mu_TailPointers[mu_ExitPath[mu_n2]][mu_n2]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr514)) mu__boolexpr513 = FALSE ;
  else {
  mu__boolexpr513 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr513)) mu__boolexpr512 = FALSE ;
  else {
  mu__boolexpr512 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr512)) mu__boolexpr511 = FALSE ;
  else {
  mu__boolexpr511 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr511)) mu__boolexpr510 = FALSE ;
  else {
  mu__boolexpr510 = ((mu_TailPointers[mu_ExitPath[mu_n4]][mu_n4]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr510)) mu__boolexpr509 = FALSE ;
  else {
  mu__boolexpr509 = ((mu_n1) != (mu_n2)) ; 
}
  if (!(mu__boolexpr509)) mu__boolexpr508 = FALSE ;
  else {
  mu__boolexpr508 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr508)) mu__boolexpr507 = FALSE ;
  else {
  mu__boolexpr507 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr507)) mu__boolexpr506 = FALSE ;
  else {
  mu__boolexpr506 = ((mu_n2) != (mu_n3)) ; 
}
  if (!(mu__boolexpr506)) mu__boolexpr505 = FALSE ;
  else {
  mu__boolexpr505 = ((mu_n2) != (mu_n4)) ; 
}
  if (!(mu__boolexpr505)) mu__boolexpr504 = FALSE ;
  else {
  mu__boolexpr504 = ((mu_n3) != (mu_n4)) ; 
}
    return mu__boolexpr504;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 5376;
    static mu__subrange_448 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_447 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_446 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_445 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 5632 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr517;
bool mu__boolexpr518;
bool mu__boolexpr519;
bool mu__boolexpr520;
bool mu__boolexpr521;
bool mu__boolexpr522;
bool mu__boolexpr523;
bool mu__boolexpr524;
bool mu__boolexpr525;
bool mu__boolexpr526;
bool mu__boolexpr527;
bool mu__boolexpr528;
bool mu__boolexpr529;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_fwd_request))) mu__boolexpr529 = FALSE ;
  else {
  mu__boolexpr529 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr529)) mu__boolexpr528 = FALSE ;
  else {
  mu__boolexpr528 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr528)) mu__boolexpr527 = FALSE ;
  else {
  mu__boolexpr527 = ((mu_TailPointers[mu_ExitPath[mu_n2]][mu_n2]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr527)) mu__boolexpr526 = FALSE ;
  else {
  mu__boolexpr526 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr526)) mu__boolexpr525 = FALSE ;
  else {
  mu__boolexpr525 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr525)) mu__boolexpr524 = FALSE ;
  else {
  mu__boolexpr524 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr524)) mu__boolexpr523 = FALSE ;
  else {
  mu__boolexpr523 = ((mu_TailPointers[mu_ExitPath[mu_n4]][mu_n4]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr523)) mu__boolexpr522 = FALSE ;
  else {
  mu__boolexpr522 = ((mu_n1) != (mu_n2)) ; 
}
  if (!(mu__boolexpr522)) mu__boolexpr521 = FALSE ;
  else {
  mu__boolexpr521 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr521)) mu__boolexpr520 = FALSE ;
  else {
  mu__boolexpr520 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr520)) mu__boolexpr519 = FALSE ;
  else {
  mu__boolexpr519 = ((mu_n2) != (mu_n3)) ; 
}
  if (!(mu__boolexpr519)) mu__boolexpr518 = FALSE ;
  else {
  mu__boolexpr518 = ((mu_n2) != (mu_n4)) ; 
}
  if (!(mu__boolexpr518)) mu__boolexpr517 = FALSE ;
  else {
  mu__boolexpr517 = ((mu_n3) != (mu_n4)) ; 
}
	      if (mu__boolexpr517) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 5376;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_448 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_447 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_446 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_445 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_ProcessFwdRequest ( (int)mu_n1, mu_EntryPath[mu_n1], mu_ExitPath[mu_n1] );
mu_ProcessRequest ( (int)mu_n2, mu_EntryPath[mu_n2], mu_ExitPath[mu_n2] );
mu_ProcessFwdResponse ( (int)mu_n3, mu_EntryPath[mu_n3], mu_ExitPath[mu_n3] );
mu_ProcessFwdResponse ( (int)mu_n4, mu_EntryPath[mu_n4], mu_ExitPath[mu_n4] );
  };

};
/******************** RuleBase22 ********************/
class RuleBase22
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_444 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_443 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_442 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_441 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Process fwd_request + Process request + Process request + Process response, n4:%s, n3:%s, n2:%s, n1:%s", mu_n4.Name(), mu_n3.Name(), mu_n2.Name(), mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_444 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_443 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_442 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_441 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr530;
bool mu__boolexpr531;
bool mu__boolexpr532;
bool mu__boolexpr533;
bool mu__boolexpr534;
bool mu__boolexpr535;
bool mu__boolexpr536;
bool mu__boolexpr537;
bool mu__boolexpr538;
bool mu__boolexpr539;
bool mu__boolexpr540;
bool mu__boolexpr541;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_fwd_request))) mu__boolexpr541 = FALSE ;
  else {
  mu__boolexpr541 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr541)) mu__boolexpr540 = FALSE ;
  else {
  mu__boolexpr540 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr540)) mu__boolexpr539 = FALSE ;
  else {
  mu__boolexpr539 = ((mu_TailPointers[mu_ExitPath[mu_n2]][mu_n2]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr539)) mu__boolexpr538 = FALSE ;
  else {
  mu__boolexpr538 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr538)) mu__boolexpr537 = FALSE ;
  else {
  mu__boolexpr537 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr537)) mu__boolexpr536 = FALSE ;
  else {
  mu__boolexpr536 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr536)) mu__boolexpr535 = FALSE ;
  else {
  mu__boolexpr535 = ((mu_n1) != (mu_n2)) ; 
}
  if (!(mu__boolexpr535)) mu__boolexpr534 = FALSE ;
  else {
  mu__boolexpr534 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr534)) mu__boolexpr533 = FALSE ;
  else {
  mu__boolexpr533 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr533)) mu__boolexpr532 = FALSE ;
  else {
  mu__boolexpr532 = ((mu_n2) != (mu_n3)) ; 
}
  if (!(mu__boolexpr532)) mu__boolexpr531 = FALSE ;
  else {
  mu__boolexpr531 = ((mu_n2) != (mu_n4)) ; 
}
  if (!(mu__boolexpr531)) mu__boolexpr530 = FALSE ;
  else {
  mu__boolexpr530 = ((mu_n3) != (mu_n4)) ; 
}
    return mu__boolexpr530;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 5632;
    static mu__subrange_444 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_443 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_442 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_441 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 5888 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr542;
bool mu__boolexpr543;
bool mu__boolexpr544;
bool mu__boolexpr545;
bool mu__boolexpr546;
bool mu__boolexpr547;
bool mu__boolexpr548;
bool mu__boolexpr549;
bool mu__boolexpr550;
bool mu__boolexpr551;
bool mu__boolexpr552;
bool mu__boolexpr553;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_fwd_request))) mu__boolexpr553 = FALSE ;
  else {
  mu__boolexpr553 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr553)) mu__boolexpr552 = FALSE ;
  else {
  mu__boolexpr552 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr552)) mu__boolexpr551 = FALSE ;
  else {
  mu__boolexpr551 = ((mu_TailPointers[mu_ExitPath[mu_n2]][mu_n2]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr551)) mu__boolexpr550 = FALSE ;
  else {
  mu__boolexpr550 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr550)) mu__boolexpr549 = FALSE ;
  else {
  mu__boolexpr549 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr549)) mu__boolexpr548 = FALSE ;
  else {
  mu__boolexpr548 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr548)) mu__boolexpr547 = FALSE ;
  else {
  mu__boolexpr547 = ((mu_n1) != (mu_n2)) ; 
}
  if (!(mu__boolexpr547)) mu__boolexpr546 = FALSE ;
  else {
  mu__boolexpr546 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr546)) mu__boolexpr545 = FALSE ;
  else {
  mu__boolexpr545 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr545)) mu__boolexpr544 = FALSE ;
  else {
  mu__boolexpr544 = ((mu_n2) != (mu_n3)) ; 
}
  if (!(mu__boolexpr544)) mu__boolexpr543 = FALSE ;
  else {
  mu__boolexpr543 = ((mu_n2) != (mu_n4)) ; 
}
  if (!(mu__boolexpr543)) mu__boolexpr542 = FALSE ;
  else {
  mu__boolexpr542 = ((mu_n3) != (mu_n4)) ; 
}
	      if (mu__boolexpr542) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 5632;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_444 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_443 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_442 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_441 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_ProcessFwdRequest ( (int)mu_n1, mu_EntryPath[mu_n1], mu_ExitPath[mu_n1] );
mu_ProcessRequest ( (int)mu_n2, mu_EntryPath[mu_n2], mu_ExitPath[mu_n2] );
mu_ProcessRequest ( (int)mu_n3, mu_EntryPath[mu_n3], mu_ExitPath[mu_n3] );
mu_ProcessResponse ( (int)mu_n4, mu_EntryPath[mu_n4] );
mu_Tokens[mu_n4] = (mu_Tokens[mu_n4]) + (1);
  };

};
/******************** RuleBase23 ********************/
class RuleBase23
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_440 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_439 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_438 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_437 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Process fwd_request + Process request + Process request + Process fwd_response, n4:%s, n3:%s, n2:%s, n1:%s", mu_n4.Name(), mu_n3.Name(), mu_n2.Name(), mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_440 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_439 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_438 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_437 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr554;
bool mu__boolexpr555;
bool mu__boolexpr556;
bool mu__boolexpr557;
bool mu__boolexpr558;
bool mu__boolexpr559;
bool mu__boolexpr560;
bool mu__boolexpr561;
bool mu__boolexpr562;
bool mu__boolexpr563;
bool mu__boolexpr564;
bool mu__boolexpr565;
bool mu__boolexpr566;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_fwd_request))) mu__boolexpr566 = FALSE ;
  else {
  mu__boolexpr566 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr566)) mu__boolexpr565 = FALSE ;
  else {
  mu__boolexpr565 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr565)) mu__boolexpr564 = FALSE ;
  else {
  mu__boolexpr564 = ((mu_TailPointers[mu_ExitPath[mu_n2]][mu_n2]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr564)) mu__boolexpr563 = FALSE ;
  else {
  mu__boolexpr563 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr563)) mu__boolexpr562 = FALSE ;
  else {
  mu__boolexpr562 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr562)) mu__boolexpr561 = FALSE ;
  else {
  mu__boolexpr561 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr561)) mu__boolexpr560 = FALSE ;
  else {
  mu__boolexpr560 = ((mu_TailPointers[mu_ExitPath[mu_n4]][mu_n4]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr560)) mu__boolexpr559 = FALSE ;
  else {
  mu__boolexpr559 = ((mu_n1) != (mu_n2)) ; 
}
  if (!(mu__boolexpr559)) mu__boolexpr558 = FALSE ;
  else {
  mu__boolexpr558 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr558)) mu__boolexpr557 = FALSE ;
  else {
  mu__boolexpr557 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr557)) mu__boolexpr556 = FALSE ;
  else {
  mu__boolexpr556 = ((mu_n2) != (mu_n3)) ; 
}
  if (!(mu__boolexpr556)) mu__boolexpr555 = FALSE ;
  else {
  mu__boolexpr555 = ((mu_n2) != (mu_n4)) ; 
}
  if (!(mu__boolexpr555)) mu__boolexpr554 = FALSE ;
  else {
  mu__boolexpr554 = ((mu_n3) != (mu_n4)) ; 
}
    return mu__boolexpr554;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 5888;
    static mu__subrange_440 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_439 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_438 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_437 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 6144 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr567;
bool mu__boolexpr568;
bool mu__boolexpr569;
bool mu__boolexpr570;
bool mu__boolexpr571;
bool mu__boolexpr572;
bool mu__boolexpr573;
bool mu__boolexpr574;
bool mu__boolexpr575;
bool mu__boolexpr576;
bool mu__boolexpr577;
bool mu__boolexpr578;
bool mu__boolexpr579;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_fwd_request))) mu__boolexpr579 = FALSE ;
  else {
  mu__boolexpr579 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr579)) mu__boolexpr578 = FALSE ;
  else {
  mu__boolexpr578 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr578)) mu__boolexpr577 = FALSE ;
  else {
  mu__boolexpr577 = ((mu_TailPointers[mu_ExitPath[mu_n2]][mu_n2]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr577)) mu__boolexpr576 = FALSE ;
  else {
  mu__boolexpr576 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr576)) mu__boolexpr575 = FALSE ;
  else {
  mu__boolexpr575 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr575)) mu__boolexpr574 = FALSE ;
  else {
  mu__boolexpr574 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr574)) mu__boolexpr573 = FALSE ;
  else {
  mu__boolexpr573 = ((mu_TailPointers[mu_ExitPath[mu_n4]][mu_n4]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr573)) mu__boolexpr572 = FALSE ;
  else {
  mu__boolexpr572 = ((mu_n1) != (mu_n2)) ; 
}
  if (!(mu__boolexpr572)) mu__boolexpr571 = FALSE ;
  else {
  mu__boolexpr571 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr571)) mu__boolexpr570 = FALSE ;
  else {
  mu__boolexpr570 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr570)) mu__boolexpr569 = FALSE ;
  else {
  mu__boolexpr569 = ((mu_n2) != (mu_n3)) ; 
}
  if (!(mu__boolexpr569)) mu__boolexpr568 = FALSE ;
  else {
  mu__boolexpr568 = ((mu_n2) != (mu_n4)) ; 
}
  if (!(mu__boolexpr568)) mu__boolexpr567 = FALSE ;
  else {
  mu__boolexpr567 = ((mu_n3) != (mu_n4)) ; 
}
	      if (mu__boolexpr567) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 5888;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_440 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_439 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_438 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_437 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_ProcessFwdRequest ( (int)mu_n1, mu_EntryPath[mu_n1], mu_ExitPath[mu_n1] );
mu_ProcessRequest ( (int)mu_n2, mu_EntryPath[mu_n2], mu_ExitPath[mu_n2] );
mu_ProcessRequest ( (int)mu_n3, mu_EntryPath[mu_n3], mu_ExitPath[mu_n3] );
mu_ProcessFwdResponse ( (int)mu_n4, mu_EntryPath[mu_n4], mu_ExitPath[mu_n4] );
  };

};
/******************** RuleBase24 ********************/
class RuleBase24
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_436 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_435 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_434 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_433 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Process fwd_request + Process request + Process request + Process request, n4:%s, n3:%s, n2:%s, n1:%s", mu_n4.Name(), mu_n3.Name(), mu_n2.Name(), mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_436 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_435 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_434 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_433 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr580;
bool mu__boolexpr581;
bool mu__boolexpr582;
bool mu__boolexpr583;
bool mu__boolexpr584;
bool mu__boolexpr585;
bool mu__boolexpr586;
bool mu__boolexpr587;
bool mu__boolexpr588;
bool mu__boolexpr589;
bool mu__boolexpr590;
bool mu__boolexpr591;
bool mu__boolexpr592;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_fwd_request))) mu__boolexpr592 = FALSE ;
  else {
  mu__boolexpr592 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr592)) mu__boolexpr591 = FALSE ;
  else {
  mu__boolexpr591 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr591)) mu__boolexpr590 = FALSE ;
  else {
  mu__boolexpr590 = ((mu_TailPointers[mu_ExitPath[mu_n2]][mu_n2]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr590)) mu__boolexpr589 = FALSE ;
  else {
  mu__boolexpr589 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr589)) mu__boolexpr588 = FALSE ;
  else {
  mu__boolexpr588 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr588)) mu__boolexpr587 = FALSE ;
  else {
  mu__boolexpr587 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr587)) mu__boolexpr586 = FALSE ;
  else {
  mu__boolexpr586 = ((mu_TailPointers[mu_ExitPath[mu_n4]][mu_n4]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr586)) mu__boolexpr585 = FALSE ;
  else {
  mu__boolexpr585 = ((mu_n1) != (mu_n2)) ; 
}
  if (!(mu__boolexpr585)) mu__boolexpr584 = FALSE ;
  else {
  mu__boolexpr584 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr584)) mu__boolexpr583 = FALSE ;
  else {
  mu__boolexpr583 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr583)) mu__boolexpr582 = FALSE ;
  else {
  mu__boolexpr582 = ((mu_n2) != (mu_n3)) ; 
}
  if (!(mu__boolexpr582)) mu__boolexpr581 = FALSE ;
  else {
  mu__boolexpr581 = ((mu_n2) != (mu_n4)) ; 
}
  if (!(mu__boolexpr581)) mu__boolexpr580 = FALSE ;
  else {
  mu__boolexpr580 = ((mu_n3) != (mu_n4)) ; 
}
    return mu__boolexpr580;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 6144;
    static mu__subrange_436 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_435 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_434 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_433 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 6400 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr593;
bool mu__boolexpr594;
bool mu__boolexpr595;
bool mu__boolexpr596;
bool mu__boolexpr597;
bool mu__boolexpr598;
bool mu__boolexpr599;
bool mu__boolexpr600;
bool mu__boolexpr601;
bool mu__boolexpr602;
bool mu__boolexpr603;
bool mu__boolexpr604;
bool mu__boolexpr605;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_fwd_request))) mu__boolexpr605 = FALSE ;
  else {
  mu__boolexpr605 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr605)) mu__boolexpr604 = FALSE ;
  else {
  mu__boolexpr604 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr604)) mu__boolexpr603 = FALSE ;
  else {
  mu__boolexpr603 = ((mu_TailPointers[mu_ExitPath[mu_n2]][mu_n2]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr603)) mu__boolexpr602 = FALSE ;
  else {
  mu__boolexpr602 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr602)) mu__boolexpr601 = FALSE ;
  else {
  mu__boolexpr601 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr601)) mu__boolexpr600 = FALSE ;
  else {
  mu__boolexpr600 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr600)) mu__boolexpr599 = FALSE ;
  else {
  mu__boolexpr599 = ((mu_TailPointers[mu_ExitPath[mu_n4]][mu_n4]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr599)) mu__boolexpr598 = FALSE ;
  else {
  mu__boolexpr598 = ((mu_n1) != (mu_n2)) ; 
}
  if (!(mu__boolexpr598)) mu__boolexpr597 = FALSE ;
  else {
  mu__boolexpr597 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr597)) mu__boolexpr596 = FALSE ;
  else {
  mu__boolexpr596 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr596)) mu__boolexpr595 = FALSE ;
  else {
  mu__boolexpr595 = ((mu_n2) != (mu_n3)) ; 
}
  if (!(mu__boolexpr595)) mu__boolexpr594 = FALSE ;
  else {
  mu__boolexpr594 = ((mu_n2) != (mu_n4)) ; 
}
  if (!(mu__boolexpr594)) mu__boolexpr593 = FALSE ;
  else {
  mu__boolexpr593 = ((mu_n3) != (mu_n4)) ; 
}
	      if (mu__boolexpr593) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 6144;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_436 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_435 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_434 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_433 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_ProcessFwdRequest ( (int)mu_n1, mu_EntryPath[mu_n1], mu_ExitPath[mu_n1] );
mu_ProcessRequest ( (int)mu_n2, mu_EntryPath[mu_n2], mu_ExitPath[mu_n2] );
mu_ProcessRequest ( (int)mu_n3, mu_EntryPath[mu_n3], mu_ExitPath[mu_n3] );
mu_ProcessRequest ( (int)mu_n4, mu_EntryPath[mu_n4], mu_ExitPath[mu_n4] );
  };

};
/******************** RuleBase25 ********************/
class RuleBase25
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_432 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_431 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_430 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_429 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Process fwd_request + Process fwd_request + Process response + Process response, n4:%s, n3:%s, n2:%s, n1:%s", mu_n4.Name(), mu_n3.Name(), mu_n2.Name(), mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_432 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_431 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_430 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_429 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr606;
bool mu__boolexpr607;
bool mu__boolexpr608;
bool mu__boolexpr609;
bool mu__boolexpr610;
bool mu__boolexpr611;
bool mu__boolexpr612;
bool mu__boolexpr613;
bool mu__boolexpr614;
bool mu__boolexpr615;
bool mu__boolexpr616;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_fwd_request))) mu__boolexpr616 = FALSE ;
  else {
  mu__boolexpr616 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr616)) mu__boolexpr615 = FALSE ;
  else {
  mu__boolexpr615 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_fwd_request)) ; 
}
  if (!(mu__boolexpr615)) mu__boolexpr614 = FALSE ;
  else {
  mu__boolexpr614 = ((mu_TailPointers[mu_ExitPath[mu_n2]][mu_n2]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr614)) mu__boolexpr613 = FALSE ;
  else {
  mu__boolexpr613 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr613)) mu__boolexpr612 = FALSE ;
  else {
  mu__boolexpr612 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr612)) mu__boolexpr611 = FALSE ;
  else {
  mu__boolexpr611 = ((mu_n1) != (mu_n2)) ; 
}
  if (!(mu__boolexpr611)) mu__boolexpr610 = FALSE ;
  else {
  mu__boolexpr610 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr610)) mu__boolexpr609 = FALSE ;
  else {
  mu__boolexpr609 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr609)) mu__boolexpr608 = FALSE ;
  else {
  mu__boolexpr608 = ((mu_n2) != (mu_n3)) ; 
}
  if (!(mu__boolexpr608)) mu__boolexpr607 = FALSE ;
  else {
  mu__boolexpr607 = ((mu_n2) != (mu_n4)) ; 
}
  if (!(mu__boolexpr607)) mu__boolexpr606 = FALSE ;
  else {
  mu__boolexpr606 = ((mu_n3) != (mu_n4)) ; 
}
    return mu__boolexpr606;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 6400;
    static mu__subrange_432 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_431 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_430 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_429 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 6656 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr617;
bool mu__boolexpr618;
bool mu__boolexpr619;
bool mu__boolexpr620;
bool mu__boolexpr621;
bool mu__boolexpr622;
bool mu__boolexpr623;
bool mu__boolexpr624;
bool mu__boolexpr625;
bool mu__boolexpr626;
bool mu__boolexpr627;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_fwd_request))) mu__boolexpr627 = FALSE ;
  else {
  mu__boolexpr627 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr627)) mu__boolexpr626 = FALSE ;
  else {
  mu__boolexpr626 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_fwd_request)) ; 
}
  if (!(mu__boolexpr626)) mu__boolexpr625 = FALSE ;
  else {
  mu__boolexpr625 = ((mu_TailPointers[mu_ExitPath[mu_n2]][mu_n2]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr625)) mu__boolexpr624 = FALSE ;
  else {
  mu__boolexpr624 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr624)) mu__boolexpr623 = FALSE ;
  else {
  mu__boolexpr623 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr623)) mu__boolexpr622 = FALSE ;
  else {
  mu__boolexpr622 = ((mu_n1) != (mu_n2)) ; 
}
  if (!(mu__boolexpr622)) mu__boolexpr621 = FALSE ;
  else {
  mu__boolexpr621 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr621)) mu__boolexpr620 = FALSE ;
  else {
  mu__boolexpr620 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr620)) mu__boolexpr619 = FALSE ;
  else {
  mu__boolexpr619 = ((mu_n2) != (mu_n3)) ; 
}
  if (!(mu__boolexpr619)) mu__boolexpr618 = FALSE ;
  else {
  mu__boolexpr618 = ((mu_n2) != (mu_n4)) ; 
}
  if (!(mu__boolexpr618)) mu__boolexpr617 = FALSE ;
  else {
  mu__boolexpr617 = ((mu_n3) != (mu_n4)) ; 
}
	      if (mu__boolexpr617) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 6400;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_432 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_431 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_430 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_429 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_ProcessFwdRequest ( (int)mu_n1, mu_EntryPath[mu_n1], mu_ExitPath[mu_n1] );
mu_ProcessFwdRequest ( (int)mu_n2, mu_EntryPath[mu_n2], mu_ExitPath[mu_n2] );
mu_ProcessResponse ( (int)mu_n3, mu_EntryPath[mu_n3] );
mu_Tokens[mu_n3] = (mu_Tokens[mu_n3]) + (1);
mu_ProcessResponse ( (int)mu_n4, mu_EntryPath[mu_n4] );
mu_Tokens[mu_n4] = (mu_Tokens[mu_n4]) + (1);
  };

};
/******************** RuleBase26 ********************/
class RuleBase26
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_428 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_427 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_426 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_425 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Process fwd_request + Process fwd_request + Process fwd_response + Process response, n4:%s, n3:%s, n2:%s, n1:%s", mu_n4.Name(), mu_n3.Name(), mu_n2.Name(), mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_428 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_427 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_426 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_425 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr628;
bool mu__boolexpr629;
bool mu__boolexpr630;
bool mu__boolexpr631;
bool mu__boolexpr632;
bool mu__boolexpr633;
bool mu__boolexpr634;
bool mu__boolexpr635;
bool mu__boolexpr636;
bool mu__boolexpr637;
bool mu__boolexpr638;
bool mu__boolexpr639;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_fwd_request))) mu__boolexpr639 = FALSE ;
  else {
  mu__boolexpr639 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr639)) mu__boolexpr638 = FALSE ;
  else {
  mu__boolexpr638 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_fwd_request)) ; 
}
  if (!(mu__boolexpr638)) mu__boolexpr637 = FALSE ;
  else {
  mu__boolexpr637 = ((mu_TailPointers[mu_ExitPath[mu_n2]][mu_n2]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr637)) mu__boolexpr636 = FALSE ;
  else {
  mu__boolexpr636 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr636)) mu__boolexpr635 = FALSE ;
  else {
  mu__boolexpr635 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr635)) mu__boolexpr634 = FALSE ;
  else {
  mu__boolexpr634 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr634)) mu__boolexpr633 = FALSE ;
  else {
  mu__boolexpr633 = ((mu_n1) != (mu_n2)) ; 
}
  if (!(mu__boolexpr633)) mu__boolexpr632 = FALSE ;
  else {
  mu__boolexpr632 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr632)) mu__boolexpr631 = FALSE ;
  else {
  mu__boolexpr631 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr631)) mu__boolexpr630 = FALSE ;
  else {
  mu__boolexpr630 = ((mu_n2) != (mu_n3)) ; 
}
  if (!(mu__boolexpr630)) mu__boolexpr629 = FALSE ;
  else {
  mu__boolexpr629 = ((mu_n2) != (mu_n4)) ; 
}
  if (!(mu__boolexpr629)) mu__boolexpr628 = FALSE ;
  else {
  mu__boolexpr628 = ((mu_n3) != (mu_n4)) ; 
}
    return mu__boolexpr628;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 6656;
    static mu__subrange_428 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_427 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_426 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_425 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 6912 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr640;
bool mu__boolexpr641;
bool mu__boolexpr642;
bool mu__boolexpr643;
bool mu__boolexpr644;
bool mu__boolexpr645;
bool mu__boolexpr646;
bool mu__boolexpr647;
bool mu__boolexpr648;
bool mu__boolexpr649;
bool mu__boolexpr650;
bool mu__boolexpr651;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_fwd_request))) mu__boolexpr651 = FALSE ;
  else {
  mu__boolexpr651 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr651)) mu__boolexpr650 = FALSE ;
  else {
  mu__boolexpr650 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_fwd_request)) ; 
}
  if (!(mu__boolexpr650)) mu__boolexpr649 = FALSE ;
  else {
  mu__boolexpr649 = ((mu_TailPointers[mu_ExitPath[mu_n2]][mu_n2]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr649)) mu__boolexpr648 = FALSE ;
  else {
  mu__boolexpr648 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr648)) mu__boolexpr647 = FALSE ;
  else {
  mu__boolexpr647 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr647)) mu__boolexpr646 = FALSE ;
  else {
  mu__boolexpr646 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr646)) mu__boolexpr645 = FALSE ;
  else {
  mu__boolexpr645 = ((mu_n1) != (mu_n2)) ; 
}
  if (!(mu__boolexpr645)) mu__boolexpr644 = FALSE ;
  else {
  mu__boolexpr644 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr644)) mu__boolexpr643 = FALSE ;
  else {
  mu__boolexpr643 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr643)) mu__boolexpr642 = FALSE ;
  else {
  mu__boolexpr642 = ((mu_n2) != (mu_n3)) ; 
}
  if (!(mu__boolexpr642)) mu__boolexpr641 = FALSE ;
  else {
  mu__boolexpr641 = ((mu_n2) != (mu_n4)) ; 
}
  if (!(mu__boolexpr641)) mu__boolexpr640 = FALSE ;
  else {
  mu__boolexpr640 = ((mu_n3) != (mu_n4)) ; 
}
	      if (mu__boolexpr640) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 6656;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_428 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_427 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_426 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_425 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_ProcessFwdRequest ( (int)mu_n1, mu_EntryPath[mu_n1], mu_ExitPath[mu_n1] );
mu_ProcessFwdRequest ( (int)mu_n2, mu_EntryPath[mu_n2], mu_ExitPath[mu_n2] );
mu_ProcessFwdResponse ( (int)mu_n3, mu_EntryPath[mu_n3], mu_ExitPath[mu_n3] );
mu_ProcessResponse ( (int)mu_n4, mu_EntryPath[mu_n4] );
mu_Tokens[mu_n4] = (mu_Tokens[mu_n4]) + (1);
  };

};
/******************** RuleBase27 ********************/
class RuleBase27
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_424 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_423 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_422 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_421 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Process fwd_request + Process fwd_request + Process fwd_response + Process fwd_response, n4:%s, n3:%s, n2:%s, n1:%s", mu_n4.Name(), mu_n3.Name(), mu_n2.Name(), mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_424 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_423 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_422 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_421 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr652;
bool mu__boolexpr653;
bool mu__boolexpr654;
bool mu__boolexpr655;
bool mu__boolexpr656;
bool mu__boolexpr657;
bool mu__boolexpr658;
bool mu__boolexpr659;
bool mu__boolexpr660;
bool mu__boolexpr661;
bool mu__boolexpr662;
bool mu__boolexpr663;
bool mu__boolexpr664;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_fwd_request))) mu__boolexpr664 = FALSE ;
  else {
  mu__boolexpr664 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr664)) mu__boolexpr663 = FALSE ;
  else {
  mu__boolexpr663 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_fwd_request)) ; 
}
  if (!(mu__boolexpr663)) mu__boolexpr662 = FALSE ;
  else {
  mu__boolexpr662 = ((mu_TailPointers[mu_ExitPath[mu_n2]][mu_n2]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr662)) mu__boolexpr661 = FALSE ;
  else {
  mu__boolexpr661 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr661)) mu__boolexpr660 = FALSE ;
  else {
  mu__boolexpr660 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr660)) mu__boolexpr659 = FALSE ;
  else {
  mu__boolexpr659 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr659)) mu__boolexpr658 = FALSE ;
  else {
  mu__boolexpr658 = ((mu_TailPointers[mu_ExitPath[mu_n4]][mu_n4]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr658)) mu__boolexpr657 = FALSE ;
  else {
  mu__boolexpr657 = ((mu_n1) != (mu_n2)) ; 
}
  if (!(mu__boolexpr657)) mu__boolexpr656 = FALSE ;
  else {
  mu__boolexpr656 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr656)) mu__boolexpr655 = FALSE ;
  else {
  mu__boolexpr655 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr655)) mu__boolexpr654 = FALSE ;
  else {
  mu__boolexpr654 = ((mu_n2) != (mu_n3)) ; 
}
  if (!(mu__boolexpr654)) mu__boolexpr653 = FALSE ;
  else {
  mu__boolexpr653 = ((mu_n2) != (mu_n4)) ; 
}
  if (!(mu__boolexpr653)) mu__boolexpr652 = FALSE ;
  else {
  mu__boolexpr652 = ((mu_n3) != (mu_n4)) ; 
}
    return mu__boolexpr652;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 6912;
    static mu__subrange_424 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_423 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_422 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_421 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 7168 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr665;
bool mu__boolexpr666;
bool mu__boolexpr667;
bool mu__boolexpr668;
bool mu__boolexpr669;
bool mu__boolexpr670;
bool mu__boolexpr671;
bool mu__boolexpr672;
bool mu__boolexpr673;
bool mu__boolexpr674;
bool mu__boolexpr675;
bool mu__boolexpr676;
bool mu__boolexpr677;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_fwd_request))) mu__boolexpr677 = FALSE ;
  else {
  mu__boolexpr677 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr677)) mu__boolexpr676 = FALSE ;
  else {
  mu__boolexpr676 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_fwd_request)) ; 
}
  if (!(mu__boolexpr676)) mu__boolexpr675 = FALSE ;
  else {
  mu__boolexpr675 = ((mu_TailPointers[mu_ExitPath[mu_n2]][mu_n2]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr675)) mu__boolexpr674 = FALSE ;
  else {
  mu__boolexpr674 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr674)) mu__boolexpr673 = FALSE ;
  else {
  mu__boolexpr673 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr673)) mu__boolexpr672 = FALSE ;
  else {
  mu__boolexpr672 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr672)) mu__boolexpr671 = FALSE ;
  else {
  mu__boolexpr671 = ((mu_TailPointers[mu_ExitPath[mu_n4]][mu_n4]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr671)) mu__boolexpr670 = FALSE ;
  else {
  mu__boolexpr670 = ((mu_n1) != (mu_n2)) ; 
}
  if (!(mu__boolexpr670)) mu__boolexpr669 = FALSE ;
  else {
  mu__boolexpr669 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr669)) mu__boolexpr668 = FALSE ;
  else {
  mu__boolexpr668 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr668)) mu__boolexpr667 = FALSE ;
  else {
  mu__boolexpr667 = ((mu_n2) != (mu_n3)) ; 
}
  if (!(mu__boolexpr667)) mu__boolexpr666 = FALSE ;
  else {
  mu__boolexpr666 = ((mu_n2) != (mu_n4)) ; 
}
  if (!(mu__boolexpr666)) mu__boolexpr665 = FALSE ;
  else {
  mu__boolexpr665 = ((mu_n3) != (mu_n4)) ; 
}
	      if (mu__boolexpr665) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 6912;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_424 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_423 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_422 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_421 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_ProcessFwdRequest ( (int)mu_n1, mu_EntryPath[mu_n1], mu_ExitPath[mu_n1] );
mu_ProcessFwdRequest ( (int)mu_n2, mu_EntryPath[mu_n2], mu_ExitPath[mu_n2] );
mu_ProcessFwdResponse ( (int)mu_n3, mu_EntryPath[mu_n3], mu_ExitPath[mu_n3] );
mu_ProcessFwdResponse ( (int)mu_n4, mu_EntryPath[mu_n4], mu_ExitPath[mu_n4] );
  };

};
/******************** RuleBase28 ********************/
class RuleBase28
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_420 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_419 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_418 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_417 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Process fwd_request + Process fwd_request + Process request + Process response, n4:%s, n3:%s, n2:%s, n1:%s", mu_n4.Name(), mu_n3.Name(), mu_n2.Name(), mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_420 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_419 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_418 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_417 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr678;
bool mu__boolexpr679;
bool mu__boolexpr680;
bool mu__boolexpr681;
bool mu__boolexpr682;
bool mu__boolexpr683;
bool mu__boolexpr684;
bool mu__boolexpr685;
bool mu__boolexpr686;
bool mu__boolexpr687;
bool mu__boolexpr688;
bool mu__boolexpr689;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_fwd_request))) mu__boolexpr689 = FALSE ;
  else {
  mu__boolexpr689 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr689)) mu__boolexpr688 = FALSE ;
  else {
  mu__boolexpr688 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_fwd_request)) ; 
}
  if (!(mu__boolexpr688)) mu__boolexpr687 = FALSE ;
  else {
  mu__boolexpr687 = ((mu_TailPointers[mu_ExitPath[mu_n2]][mu_n2]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr687)) mu__boolexpr686 = FALSE ;
  else {
  mu__boolexpr686 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr686)) mu__boolexpr685 = FALSE ;
  else {
  mu__boolexpr685 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr685)) mu__boolexpr684 = FALSE ;
  else {
  mu__boolexpr684 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr684)) mu__boolexpr683 = FALSE ;
  else {
  mu__boolexpr683 = ((mu_n1) != (mu_n2)) ; 
}
  if (!(mu__boolexpr683)) mu__boolexpr682 = FALSE ;
  else {
  mu__boolexpr682 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr682)) mu__boolexpr681 = FALSE ;
  else {
  mu__boolexpr681 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr681)) mu__boolexpr680 = FALSE ;
  else {
  mu__boolexpr680 = ((mu_n2) != (mu_n3)) ; 
}
  if (!(mu__boolexpr680)) mu__boolexpr679 = FALSE ;
  else {
  mu__boolexpr679 = ((mu_n2) != (mu_n4)) ; 
}
  if (!(mu__boolexpr679)) mu__boolexpr678 = FALSE ;
  else {
  mu__boolexpr678 = ((mu_n3) != (mu_n4)) ; 
}
    return mu__boolexpr678;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 7168;
    static mu__subrange_420 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_419 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_418 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_417 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 7424 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr690;
bool mu__boolexpr691;
bool mu__boolexpr692;
bool mu__boolexpr693;
bool mu__boolexpr694;
bool mu__boolexpr695;
bool mu__boolexpr696;
bool mu__boolexpr697;
bool mu__boolexpr698;
bool mu__boolexpr699;
bool mu__boolexpr700;
bool mu__boolexpr701;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_fwd_request))) mu__boolexpr701 = FALSE ;
  else {
  mu__boolexpr701 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr701)) mu__boolexpr700 = FALSE ;
  else {
  mu__boolexpr700 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_fwd_request)) ; 
}
  if (!(mu__boolexpr700)) mu__boolexpr699 = FALSE ;
  else {
  mu__boolexpr699 = ((mu_TailPointers[mu_ExitPath[mu_n2]][mu_n2]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr699)) mu__boolexpr698 = FALSE ;
  else {
  mu__boolexpr698 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr698)) mu__boolexpr697 = FALSE ;
  else {
  mu__boolexpr697 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr697)) mu__boolexpr696 = FALSE ;
  else {
  mu__boolexpr696 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr696)) mu__boolexpr695 = FALSE ;
  else {
  mu__boolexpr695 = ((mu_n1) != (mu_n2)) ; 
}
  if (!(mu__boolexpr695)) mu__boolexpr694 = FALSE ;
  else {
  mu__boolexpr694 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr694)) mu__boolexpr693 = FALSE ;
  else {
  mu__boolexpr693 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr693)) mu__boolexpr692 = FALSE ;
  else {
  mu__boolexpr692 = ((mu_n2) != (mu_n3)) ; 
}
  if (!(mu__boolexpr692)) mu__boolexpr691 = FALSE ;
  else {
  mu__boolexpr691 = ((mu_n2) != (mu_n4)) ; 
}
  if (!(mu__boolexpr691)) mu__boolexpr690 = FALSE ;
  else {
  mu__boolexpr690 = ((mu_n3) != (mu_n4)) ; 
}
	      if (mu__boolexpr690) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 7168;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_420 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_419 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_418 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_417 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_ProcessFwdRequest ( (int)mu_n1, mu_EntryPath[mu_n1], mu_ExitPath[mu_n1] );
mu_ProcessFwdRequest ( (int)mu_n2, mu_EntryPath[mu_n2], mu_ExitPath[mu_n2] );
mu_ProcessRequest ( (int)mu_n3, mu_EntryPath[mu_n3], mu_ExitPath[mu_n3] );
mu_ProcessResponse ( (int)mu_n4, mu_EntryPath[mu_n4] );
mu_Tokens[mu_n4] = (mu_Tokens[mu_n4]) + (1);
  };

};
/******************** RuleBase29 ********************/
class RuleBase29
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_416 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_415 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_414 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_413 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Process fwd_request + Process fwd_request + Process request + Process fwd_response, n4:%s, n3:%s, n2:%s, n1:%s", mu_n4.Name(), mu_n3.Name(), mu_n2.Name(), mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_416 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_415 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_414 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_413 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr702;
bool mu__boolexpr703;
bool mu__boolexpr704;
bool mu__boolexpr705;
bool mu__boolexpr706;
bool mu__boolexpr707;
bool mu__boolexpr708;
bool mu__boolexpr709;
bool mu__boolexpr710;
bool mu__boolexpr711;
bool mu__boolexpr712;
bool mu__boolexpr713;
bool mu__boolexpr714;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_fwd_request))) mu__boolexpr714 = FALSE ;
  else {
  mu__boolexpr714 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr714)) mu__boolexpr713 = FALSE ;
  else {
  mu__boolexpr713 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_fwd_request)) ; 
}
  if (!(mu__boolexpr713)) mu__boolexpr712 = FALSE ;
  else {
  mu__boolexpr712 = ((mu_TailPointers[mu_ExitPath[mu_n2]][mu_n2]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr712)) mu__boolexpr711 = FALSE ;
  else {
  mu__boolexpr711 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr711)) mu__boolexpr710 = FALSE ;
  else {
  mu__boolexpr710 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr710)) mu__boolexpr709 = FALSE ;
  else {
  mu__boolexpr709 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr709)) mu__boolexpr708 = FALSE ;
  else {
  mu__boolexpr708 = ((mu_TailPointers[mu_ExitPath[mu_n4]][mu_n4]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr708)) mu__boolexpr707 = FALSE ;
  else {
  mu__boolexpr707 = ((mu_n1) != (mu_n2)) ; 
}
  if (!(mu__boolexpr707)) mu__boolexpr706 = FALSE ;
  else {
  mu__boolexpr706 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr706)) mu__boolexpr705 = FALSE ;
  else {
  mu__boolexpr705 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr705)) mu__boolexpr704 = FALSE ;
  else {
  mu__boolexpr704 = ((mu_n2) != (mu_n3)) ; 
}
  if (!(mu__boolexpr704)) mu__boolexpr703 = FALSE ;
  else {
  mu__boolexpr703 = ((mu_n2) != (mu_n4)) ; 
}
  if (!(mu__boolexpr703)) mu__boolexpr702 = FALSE ;
  else {
  mu__boolexpr702 = ((mu_n3) != (mu_n4)) ; 
}
    return mu__boolexpr702;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 7424;
    static mu__subrange_416 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_415 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_414 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_413 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 7680 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr715;
bool mu__boolexpr716;
bool mu__boolexpr717;
bool mu__boolexpr718;
bool mu__boolexpr719;
bool mu__boolexpr720;
bool mu__boolexpr721;
bool mu__boolexpr722;
bool mu__boolexpr723;
bool mu__boolexpr724;
bool mu__boolexpr725;
bool mu__boolexpr726;
bool mu__boolexpr727;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_fwd_request))) mu__boolexpr727 = FALSE ;
  else {
  mu__boolexpr727 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr727)) mu__boolexpr726 = FALSE ;
  else {
  mu__boolexpr726 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_fwd_request)) ; 
}
  if (!(mu__boolexpr726)) mu__boolexpr725 = FALSE ;
  else {
  mu__boolexpr725 = ((mu_TailPointers[mu_ExitPath[mu_n2]][mu_n2]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr725)) mu__boolexpr724 = FALSE ;
  else {
  mu__boolexpr724 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr724)) mu__boolexpr723 = FALSE ;
  else {
  mu__boolexpr723 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr723)) mu__boolexpr722 = FALSE ;
  else {
  mu__boolexpr722 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr722)) mu__boolexpr721 = FALSE ;
  else {
  mu__boolexpr721 = ((mu_TailPointers[mu_ExitPath[mu_n4]][mu_n4]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr721)) mu__boolexpr720 = FALSE ;
  else {
  mu__boolexpr720 = ((mu_n1) != (mu_n2)) ; 
}
  if (!(mu__boolexpr720)) mu__boolexpr719 = FALSE ;
  else {
  mu__boolexpr719 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr719)) mu__boolexpr718 = FALSE ;
  else {
  mu__boolexpr718 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr718)) mu__boolexpr717 = FALSE ;
  else {
  mu__boolexpr717 = ((mu_n2) != (mu_n3)) ; 
}
  if (!(mu__boolexpr717)) mu__boolexpr716 = FALSE ;
  else {
  mu__boolexpr716 = ((mu_n2) != (mu_n4)) ; 
}
  if (!(mu__boolexpr716)) mu__boolexpr715 = FALSE ;
  else {
  mu__boolexpr715 = ((mu_n3) != (mu_n4)) ; 
}
	      if (mu__boolexpr715) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 7424;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_416 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_415 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_414 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_413 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_ProcessFwdRequest ( (int)mu_n1, mu_EntryPath[mu_n1], mu_ExitPath[mu_n1] );
mu_ProcessFwdRequest ( (int)mu_n2, mu_EntryPath[mu_n2], mu_ExitPath[mu_n2] );
mu_ProcessRequest ( (int)mu_n3, mu_EntryPath[mu_n3], mu_ExitPath[mu_n3] );
mu_ProcessFwdResponse ( (int)mu_n4, mu_EntryPath[mu_n4], mu_ExitPath[mu_n4] );
  };

};
/******************** RuleBase30 ********************/
class RuleBase30
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_412 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_411 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_410 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_409 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Process fwd_request + Process fwd_request + Process request + Process request, n4:%s, n3:%s, n2:%s, n1:%s", mu_n4.Name(), mu_n3.Name(), mu_n2.Name(), mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_412 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_411 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_410 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_409 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr728;
bool mu__boolexpr729;
bool mu__boolexpr730;
bool mu__boolexpr731;
bool mu__boolexpr732;
bool mu__boolexpr733;
bool mu__boolexpr734;
bool mu__boolexpr735;
bool mu__boolexpr736;
bool mu__boolexpr737;
bool mu__boolexpr738;
bool mu__boolexpr739;
bool mu__boolexpr740;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_fwd_request))) mu__boolexpr740 = FALSE ;
  else {
  mu__boolexpr740 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr740)) mu__boolexpr739 = FALSE ;
  else {
  mu__boolexpr739 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_fwd_request)) ; 
}
  if (!(mu__boolexpr739)) mu__boolexpr738 = FALSE ;
  else {
  mu__boolexpr738 = ((mu_TailPointers[mu_ExitPath[mu_n2]][mu_n2]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr738)) mu__boolexpr737 = FALSE ;
  else {
  mu__boolexpr737 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr737)) mu__boolexpr736 = FALSE ;
  else {
  mu__boolexpr736 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr736)) mu__boolexpr735 = FALSE ;
  else {
  mu__boolexpr735 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr735)) mu__boolexpr734 = FALSE ;
  else {
  mu__boolexpr734 = ((mu_TailPointers[mu_ExitPath[mu_n4]][mu_n4]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr734)) mu__boolexpr733 = FALSE ;
  else {
  mu__boolexpr733 = ((mu_n1) != (mu_n2)) ; 
}
  if (!(mu__boolexpr733)) mu__boolexpr732 = FALSE ;
  else {
  mu__boolexpr732 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr732)) mu__boolexpr731 = FALSE ;
  else {
  mu__boolexpr731 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr731)) mu__boolexpr730 = FALSE ;
  else {
  mu__boolexpr730 = ((mu_n2) != (mu_n3)) ; 
}
  if (!(mu__boolexpr730)) mu__boolexpr729 = FALSE ;
  else {
  mu__boolexpr729 = ((mu_n2) != (mu_n4)) ; 
}
  if (!(mu__boolexpr729)) mu__boolexpr728 = FALSE ;
  else {
  mu__boolexpr728 = ((mu_n3) != (mu_n4)) ; 
}
    return mu__boolexpr728;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 7680;
    static mu__subrange_412 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_411 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_410 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_409 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 7936 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr741;
bool mu__boolexpr742;
bool mu__boolexpr743;
bool mu__boolexpr744;
bool mu__boolexpr745;
bool mu__boolexpr746;
bool mu__boolexpr747;
bool mu__boolexpr748;
bool mu__boolexpr749;
bool mu__boolexpr750;
bool mu__boolexpr751;
bool mu__boolexpr752;
bool mu__boolexpr753;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_fwd_request))) mu__boolexpr753 = FALSE ;
  else {
  mu__boolexpr753 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr753)) mu__boolexpr752 = FALSE ;
  else {
  mu__boolexpr752 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_fwd_request)) ; 
}
  if (!(mu__boolexpr752)) mu__boolexpr751 = FALSE ;
  else {
  mu__boolexpr751 = ((mu_TailPointers[mu_ExitPath[mu_n2]][mu_n2]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr751)) mu__boolexpr750 = FALSE ;
  else {
  mu__boolexpr750 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr750)) mu__boolexpr749 = FALSE ;
  else {
  mu__boolexpr749 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr749)) mu__boolexpr748 = FALSE ;
  else {
  mu__boolexpr748 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr748)) mu__boolexpr747 = FALSE ;
  else {
  mu__boolexpr747 = ((mu_TailPointers[mu_ExitPath[mu_n4]][mu_n4]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr747)) mu__boolexpr746 = FALSE ;
  else {
  mu__boolexpr746 = ((mu_n1) != (mu_n2)) ; 
}
  if (!(mu__boolexpr746)) mu__boolexpr745 = FALSE ;
  else {
  mu__boolexpr745 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr745)) mu__boolexpr744 = FALSE ;
  else {
  mu__boolexpr744 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr744)) mu__boolexpr743 = FALSE ;
  else {
  mu__boolexpr743 = ((mu_n2) != (mu_n3)) ; 
}
  if (!(mu__boolexpr743)) mu__boolexpr742 = FALSE ;
  else {
  mu__boolexpr742 = ((mu_n2) != (mu_n4)) ; 
}
  if (!(mu__boolexpr742)) mu__boolexpr741 = FALSE ;
  else {
  mu__boolexpr741 = ((mu_n3) != (mu_n4)) ; 
}
	      if (mu__boolexpr741) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 7680;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_412 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_411 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_410 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_409 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_ProcessFwdRequest ( (int)mu_n1, mu_EntryPath[mu_n1], mu_ExitPath[mu_n1] );
mu_ProcessFwdRequest ( (int)mu_n2, mu_EntryPath[mu_n2], mu_ExitPath[mu_n2] );
mu_ProcessRequest ( (int)mu_n3, mu_EntryPath[mu_n3], mu_ExitPath[mu_n3] );
mu_ProcessRequest ( (int)mu_n4, mu_EntryPath[mu_n4], mu_ExitPath[mu_n4] );
  };

};
/******************** RuleBase31 ********************/
class RuleBase31
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_408 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_407 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_406 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_405 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Process fwd_request + Process fwd_request + Process fwd_request + Process response, n4:%s, n3:%s, n2:%s, n1:%s", mu_n4.Name(), mu_n3.Name(), mu_n2.Name(), mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_408 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_407 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_406 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_405 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr754;
bool mu__boolexpr755;
bool mu__boolexpr756;
bool mu__boolexpr757;
bool mu__boolexpr758;
bool mu__boolexpr759;
bool mu__boolexpr760;
bool mu__boolexpr761;
bool mu__boolexpr762;
bool mu__boolexpr763;
bool mu__boolexpr764;
bool mu__boolexpr765;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_fwd_request))) mu__boolexpr765 = FALSE ;
  else {
  mu__boolexpr765 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr765)) mu__boolexpr764 = FALSE ;
  else {
  mu__boolexpr764 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_fwd_request)) ; 
}
  if (!(mu__boolexpr764)) mu__boolexpr763 = FALSE ;
  else {
  mu__boolexpr763 = ((mu_TailPointers[mu_ExitPath[mu_n2]][mu_n2]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr763)) mu__boolexpr762 = FALSE ;
  else {
  mu__boolexpr762 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_fwd_request)) ; 
}
  if (!(mu__boolexpr762)) mu__boolexpr761 = FALSE ;
  else {
  mu__boolexpr761 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr761)) mu__boolexpr760 = FALSE ;
  else {
  mu__boolexpr760 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr760)) mu__boolexpr759 = FALSE ;
  else {
  mu__boolexpr759 = ((mu_n1) != (mu_n2)) ; 
}
  if (!(mu__boolexpr759)) mu__boolexpr758 = FALSE ;
  else {
  mu__boolexpr758 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr758)) mu__boolexpr757 = FALSE ;
  else {
  mu__boolexpr757 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr757)) mu__boolexpr756 = FALSE ;
  else {
  mu__boolexpr756 = ((mu_n2) != (mu_n3)) ; 
}
  if (!(mu__boolexpr756)) mu__boolexpr755 = FALSE ;
  else {
  mu__boolexpr755 = ((mu_n2) != (mu_n4)) ; 
}
  if (!(mu__boolexpr755)) mu__boolexpr754 = FALSE ;
  else {
  mu__boolexpr754 = ((mu_n3) != (mu_n4)) ; 
}
    return mu__boolexpr754;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 7936;
    static mu__subrange_408 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_407 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_406 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_405 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 8192 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr766;
bool mu__boolexpr767;
bool mu__boolexpr768;
bool mu__boolexpr769;
bool mu__boolexpr770;
bool mu__boolexpr771;
bool mu__boolexpr772;
bool mu__boolexpr773;
bool mu__boolexpr774;
bool mu__boolexpr775;
bool mu__boolexpr776;
bool mu__boolexpr777;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_fwd_request))) mu__boolexpr777 = FALSE ;
  else {
  mu__boolexpr777 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr777)) mu__boolexpr776 = FALSE ;
  else {
  mu__boolexpr776 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_fwd_request)) ; 
}
  if (!(mu__boolexpr776)) mu__boolexpr775 = FALSE ;
  else {
  mu__boolexpr775 = ((mu_TailPointers[mu_ExitPath[mu_n2]][mu_n2]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr775)) mu__boolexpr774 = FALSE ;
  else {
  mu__boolexpr774 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_fwd_request)) ; 
}
  if (!(mu__boolexpr774)) mu__boolexpr773 = FALSE ;
  else {
  mu__boolexpr773 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr773)) mu__boolexpr772 = FALSE ;
  else {
  mu__boolexpr772 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr772)) mu__boolexpr771 = FALSE ;
  else {
  mu__boolexpr771 = ((mu_n1) != (mu_n2)) ; 
}
  if (!(mu__boolexpr771)) mu__boolexpr770 = FALSE ;
  else {
  mu__boolexpr770 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr770)) mu__boolexpr769 = FALSE ;
  else {
  mu__boolexpr769 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr769)) mu__boolexpr768 = FALSE ;
  else {
  mu__boolexpr768 = ((mu_n2) != (mu_n3)) ; 
}
  if (!(mu__boolexpr768)) mu__boolexpr767 = FALSE ;
  else {
  mu__boolexpr767 = ((mu_n2) != (mu_n4)) ; 
}
  if (!(mu__boolexpr767)) mu__boolexpr766 = FALSE ;
  else {
  mu__boolexpr766 = ((mu_n3) != (mu_n4)) ; 
}
	      if (mu__boolexpr766) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 7936;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_408 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_407 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_406 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_405 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_ProcessFwdRequest ( (int)mu_n1, mu_EntryPath[mu_n1], mu_ExitPath[mu_n1] );
mu_ProcessFwdRequest ( (int)mu_n2, mu_EntryPath[mu_n2], mu_ExitPath[mu_n2] );
mu_ProcessFwdRequest ( (int)mu_n3, mu_EntryPath[mu_n3], mu_ExitPath[mu_n3] );
mu_ProcessResponse ( (int)mu_n4, mu_EntryPath[mu_n4] );
mu_Tokens[mu_n4] = (mu_Tokens[mu_n4]) + (1);
  };

};
/******************** RuleBase32 ********************/
class RuleBase32
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_404 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_403 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_402 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_401 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Process fwd_request + Process fwd_request + Process fwd_request + Process fwd_response, n4:%s, n3:%s, n2:%s, n1:%s", mu_n4.Name(), mu_n3.Name(), mu_n2.Name(), mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_404 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_403 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_402 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_401 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr778;
bool mu__boolexpr779;
bool mu__boolexpr780;
bool mu__boolexpr781;
bool mu__boolexpr782;
bool mu__boolexpr783;
bool mu__boolexpr784;
bool mu__boolexpr785;
bool mu__boolexpr786;
bool mu__boolexpr787;
bool mu__boolexpr788;
bool mu__boolexpr789;
bool mu__boolexpr790;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_fwd_request))) mu__boolexpr790 = FALSE ;
  else {
  mu__boolexpr790 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr790)) mu__boolexpr789 = FALSE ;
  else {
  mu__boolexpr789 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_fwd_request)) ; 
}
  if (!(mu__boolexpr789)) mu__boolexpr788 = FALSE ;
  else {
  mu__boolexpr788 = ((mu_TailPointers[mu_ExitPath[mu_n2]][mu_n2]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr788)) mu__boolexpr787 = FALSE ;
  else {
  mu__boolexpr787 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_fwd_request)) ; 
}
  if (!(mu__boolexpr787)) mu__boolexpr786 = FALSE ;
  else {
  mu__boolexpr786 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr786)) mu__boolexpr785 = FALSE ;
  else {
  mu__boolexpr785 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr785)) mu__boolexpr784 = FALSE ;
  else {
  mu__boolexpr784 = ((mu_TailPointers[mu_ExitPath[mu_n4]][mu_n4]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr784)) mu__boolexpr783 = FALSE ;
  else {
  mu__boolexpr783 = ((mu_n1) != (mu_n2)) ; 
}
  if (!(mu__boolexpr783)) mu__boolexpr782 = FALSE ;
  else {
  mu__boolexpr782 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr782)) mu__boolexpr781 = FALSE ;
  else {
  mu__boolexpr781 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr781)) mu__boolexpr780 = FALSE ;
  else {
  mu__boolexpr780 = ((mu_n2) != (mu_n3)) ; 
}
  if (!(mu__boolexpr780)) mu__boolexpr779 = FALSE ;
  else {
  mu__boolexpr779 = ((mu_n2) != (mu_n4)) ; 
}
  if (!(mu__boolexpr779)) mu__boolexpr778 = FALSE ;
  else {
  mu__boolexpr778 = ((mu_n3) != (mu_n4)) ; 
}
    return mu__boolexpr778;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 8192;
    static mu__subrange_404 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_403 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_402 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_401 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 8448 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr791;
bool mu__boolexpr792;
bool mu__boolexpr793;
bool mu__boolexpr794;
bool mu__boolexpr795;
bool mu__boolexpr796;
bool mu__boolexpr797;
bool mu__boolexpr798;
bool mu__boolexpr799;
bool mu__boolexpr800;
bool mu__boolexpr801;
bool mu__boolexpr802;
bool mu__boolexpr803;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_fwd_request))) mu__boolexpr803 = FALSE ;
  else {
  mu__boolexpr803 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr803)) mu__boolexpr802 = FALSE ;
  else {
  mu__boolexpr802 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_fwd_request)) ; 
}
  if (!(mu__boolexpr802)) mu__boolexpr801 = FALSE ;
  else {
  mu__boolexpr801 = ((mu_TailPointers[mu_ExitPath[mu_n2]][mu_n2]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr801)) mu__boolexpr800 = FALSE ;
  else {
  mu__boolexpr800 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_fwd_request)) ; 
}
  if (!(mu__boolexpr800)) mu__boolexpr799 = FALSE ;
  else {
  mu__boolexpr799 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr799)) mu__boolexpr798 = FALSE ;
  else {
  mu__boolexpr798 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr798)) mu__boolexpr797 = FALSE ;
  else {
  mu__boolexpr797 = ((mu_TailPointers[mu_ExitPath[mu_n4]][mu_n4]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr797)) mu__boolexpr796 = FALSE ;
  else {
  mu__boolexpr796 = ((mu_n1) != (mu_n2)) ; 
}
  if (!(mu__boolexpr796)) mu__boolexpr795 = FALSE ;
  else {
  mu__boolexpr795 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr795)) mu__boolexpr794 = FALSE ;
  else {
  mu__boolexpr794 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr794)) mu__boolexpr793 = FALSE ;
  else {
  mu__boolexpr793 = ((mu_n2) != (mu_n3)) ; 
}
  if (!(mu__boolexpr793)) mu__boolexpr792 = FALSE ;
  else {
  mu__boolexpr792 = ((mu_n2) != (mu_n4)) ; 
}
  if (!(mu__boolexpr792)) mu__boolexpr791 = FALSE ;
  else {
  mu__boolexpr791 = ((mu_n3) != (mu_n4)) ; 
}
	      if (mu__boolexpr791) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 8192;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_404 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_403 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_402 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_401 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_ProcessFwdRequest ( (int)mu_n1, mu_EntryPath[mu_n1], mu_ExitPath[mu_n1] );
mu_ProcessFwdRequest ( (int)mu_n2, mu_EntryPath[mu_n2], mu_ExitPath[mu_n2] );
mu_ProcessFwdRequest ( (int)mu_n3, mu_EntryPath[mu_n3], mu_ExitPath[mu_n3] );
mu_ProcessFwdResponse ( (int)mu_n4, mu_EntryPath[mu_n4], mu_ExitPath[mu_n4] );
  };

};
/******************** RuleBase33 ********************/
class RuleBase33
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_400 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_399 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_398 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_397 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Process fwd_request + Process fwd_request + Process fwd_request + Process request, n4:%s, n3:%s, n2:%s, n1:%s", mu_n4.Name(), mu_n3.Name(), mu_n2.Name(), mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_400 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_399 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_398 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_397 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr804;
bool mu__boolexpr805;
bool mu__boolexpr806;
bool mu__boolexpr807;
bool mu__boolexpr808;
bool mu__boolexpr809;
bool mu__boolexpr810;
bool mu__boolexpr811;
bool mu__boolexpr812;
bool mu__boolexpr813;
bool mu__boolexpr814;
bool mu__boolexpr815;
bool mu__boolexpr816;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_fwd_request))) mu__boolexpr816 = FALSE ;
  else {
  mu__boolexpr816 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr816)) mu__boolexpr815 = FALSE ;
  else {
  mu__boolexpr815 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_fwd_request)) ; 
}
  if (!(mu__boolexpr815)) mu__boolexpr814 = FALSE ;
  else {
  mu__boolexpr814 = ((mu_TailPointers[mu_ExitPath[mu_n2]][mu_n2]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr814)) mu__boolexpr813 = FALSE ;
  else {
  mu__boolexpr813 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_fwd_request)) ; 
}
  if (!(mu__boolexpr813)) mu__boolexpr812 = FALSE ;
  else {
  mu__boolexpr812 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr812)) mu__boolexpr811 = FALSE ;
  else {
  mu__boolexpr811 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr811)) mu__boolexpr810 = FALSE ;
  else {
  mu__boolexpr810 = ((mu_TailPointers[mu_ExitPath[mu_n4]][mu_n4]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr810)) mu__boolexpr809 = FALSE ;
  else {
  mu__boolexpr809 = ((mu_n1) != (mu_n2)) ; 
}
  if (!(mu__boolexpr809)) mu__boolexpr808 = FALSE ;
  else {
  mu__boolexpr808 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr808)) mu__boolexpr807 = FALSE ;
  else {
  mu__boolexpr807 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr807)) mu__boolexpr806 = FALSE ;
  else {
  mu__boolexpr806 = ((mu_n2) != (mu_n3)) ; 
}
  if (!(mu__boolexpr806)) mu__boolexpr805 = FALSE ;
  else {
  mu__boolexpr805 = ((mu_n2) != (mu_n4)) ; 
}
  if (!(mu__boolexpr805)) mu__boolexpr804 = FALSE ;
  else {
  mu__boolexpr804 = ((mu_n3) != (mu_n4)) ; 
}
    return mu__boolexpr804;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 8448;
    static mu__subrange_400 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_399 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_398 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_397 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 8704 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr817;
bool mu__boolexpr818;
bool mu__boolexpr819;
bool mu__boolexpr820;
bool mu__boolexpr821;
bool mu__boolexpr822;
bool mu__boolexpr823;
bool mu__boolexpr824;
bool mu__boolexpr825;
bool mu__boolexpr826;
bool mu__boolexpr827;
bool mu__boolexpr828;
bool mu__boolexpr829;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_fwd_request))) mu__boolexpr829 = FALSE ;
  else {
  mu__boolexpr829 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr829)) mu__boolexpr828 = FALSE ;
  else {
  mu__boolexpr828 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_fwd_request)) ; 
}
  if (!(mu__boolexpr828)) mu__boolexpr827 = FALSE ;
  else {
  mu__boolexpr827 = ((mu_TailPointers[mu_ExitPath[mu_n2]][mu_n2]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr827)) mu__boolexpr826 = FALSE ;
  else {
  mu__boolexpr826 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_fwd_request)) ; 
}
  if (!(mu__boolexpr826)) mu__boolexpr825 = FALSE ;
  else {
  mu__boolexpr825 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr825)) mu__boolexpr824 = FALSE ;
  else {
  mu__boolexpr824 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr824)) mu__boolexpr823 = FALSE ;
  else {
  mu__boolexpr823 = ((mu_TailPointers[mu_ExitPath[mu_n4]][mu_n4]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr823)) mu__boolexpr822 = FALSE ;
  else {
  mu__boolexpr822 = ((mu_n1) != (mu_n2)) ; 
}
  if (!(mu__boolexpr822)) mu__boolexpr821 = FALSE ;
  else {
  mu__boolexpr821 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr821)) mu__boolexpr820 = FALSE ;
  else {
  mu__boolexpr820 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr820)) mu__boolexpr819 = FALSE ;
  else {
  mu__boolexpr819 = ((mu_n2) != (mu_n3)) ; 
}
  if (!(mu__boolexpr819)) mu__boolexpr818 = FALSE ;
  else {
  mu__boolexpr818 = ((mu_n2) != (mu_n4)) ; 
}
  if (!(mu__boolexpr818)) mu__boolexpr817 = FALSE ;
  else {
  mu__boolexpr817 = ((mu_n3) != (mu_n4)) ; 
}
	      if (mu__boolexpr817) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 8448;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_400 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_399 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_398 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_397 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_ProcessFwdRequest ( (int)mu_n1, mu_EntryPath[mu_n1], mu_ExitPath[mu_n1] );
mu_ProcessFwdRequest ( (int)mu_n2, mu_EntryPath[mu_n2], mu_ExitPath[mu_n2] );
mu_ProcessFwdRequest ( (int)mu_n3, mu_EntryPath[mu_n3], mu_ExitPath[mu_n3] );
mu_ProcessRequest ( (int)mu_n4, mu_EntryPath[mu_n4], mu_ExitPath[mu_n4] );
  };

};
/******************** RuleBase34 ********************/
class RuleBase34
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_396 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_395 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_394 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_393 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Process fwd_request + Process fwd_request + Process fwd_request + Process fwd_request, n4:%s, n3:%s, n2:%s, n1:%s", mu_n4.Name(), mu_n3.Name(), mu_n2.Name(), mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_396 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_395 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_394 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_393 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr830;
bool mu__boolexpr831;
bool mu__boolexpr832;
bool mu__boolexpr833;
bool mu__boolexpr834;
bool mu__boolexpr835;
bool mu__boolexpr836;
bool mu__boolexpr837;
bool mu__boolexpr838;
bool mu__boolexpr839;
bool mu__boolexpr840;
bool mu__boolexpr841;
bool mu__boolexpr842;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_fwd_request))) mu__boolexpr842 = FALSE ;
  else {
  mu__boolexpr842 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr842)) mu__boolexpr841 = FALSE ;
  else {
  mu__boolexpr841 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_fwd_request)) ; 
}
  if (!(mu__boolexpr841)) mu__boolexpr840 = FALSE ;
  else {
  mu__boolexpr840 = ((mu_TailPointers[mu_ExitPath[mu_n2]][mu_n2]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr840)) mu__boolexpr839 = FALSE ;
  else {
  mu__boolexpr839 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_fwd_request)) ; 
}
  if (!(mu__boolexpr839)) mu__boolexpr838 = FALSE ;
  else {
  mu__boolexpr838 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr838)) mu__boolexpr837 = FALSE ;
  else {
  mu__boolexpr837 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_fwd_request)) ; 
}
  if (!(mu__boolexpr837)) mu__boolexpr836 = FALSE ;
  else {
  mu__boolexpr836 = ((mu_TailPointers[mu_ExitPath[mu_n4]][mu_n4]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr836)) mu__boolexpr835 = FALSE ;
  else {
  mu__boolexpr835 = ((mu_n1) != (mu_n2)) ; 
}
  if (!(mu__boolexpr835)) mu__boolexpr834 = FALSE ;
  else {
  mu__boolexpr834 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr834)) mu__boolexpr833 = FALSE ;
  else {
  mu__boolexpr833 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr833)) mu__boolexpr832 = FALSE ;
  else {
  mu__boolexpr832 = ((mu_n2) != (mu_n3)) ; 
}
  if (!(mu__boolexpr832)) mu__boolexpr831 = FALSE ;
  else {
  mu__boolexpr831 = ((mu_n2) != (mu_n4)) ; 
}
  if (!(mu__boolexpr831)) mu__boolexpr830 = FALSE ;
  else {
  mu__boolexpr830 = ((mu_n3) != (mu_n4)) ; 
}
    return mu__boolexpr830;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 8704;
    static mu__subrange_396 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_395 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_394 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_393 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 8960 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr843;
bool mu__boolexpr844;
bool mu__boolexpr845;
bool mu__boolexpr846;
bool mu__boolexpr847;
bool mu__boolexpr848;
bool mu__boolexpr849;
bool mu__boolexpr850;
bool mu__boolexpr851;
bool mu__boolexpr852;
bool mu__boolexpr853;
bool mu__boolexpr854;
bool mu__boolexpr855;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_fwd_request))) mu__boolexpr855 = FALSE ;
  else {
  mu__boolexpr855 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr855)) mu__boolexpr854 = FALSE ;
  else {
  mu__boolexpr854 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_fwd_request)) ; 
}
  if (!(mu__boolexpr854)) mu__boolexpr853 = FALSE ;
  else {
  mu__boolexpr853 = ((mu_TailPointers[mu_ExitPath[mu_n2]][mu_n2]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr853)) mu__boolexpr852 = FALSE ;
  else {
  mu__boolexpr852 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_fwd_request)) ; 
}
  if (!(mu__boolexpr852)) mu__boolexpr851 = FALSE ;
  else {
  mu__boolexpr851 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr851)) mu__boolexpr850 = FALSE ;
  else {
  mu__boolexpr850 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_fwd_request)) ; 
}
  if (!(mu__boolexpr850)) mu__boolexpr849 = FALSE ;
  else {
  mu__boolexpr849 = ((mu_TailPointers[mu_ExitPath[mu_n4]][mu_n4]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr849)) mu__boolexpr848 = FALSE ;
  else {
  mu__boolexpr848 = ((mu_n1) != (mu_n2)) ; 
}
  if (!(mu__boolexpr848)) mu__boolexpr847 = FALSE ;
  else {
  mu__boolexpr847 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr847)) mu__boolexpr846 = FALSE ;
  else {
  mu__boolexpr846 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr846)) mu__boolexpr845 = FALSE ;
  else {
  mu__boolexpr845 = ((mu_n2) != (mu_n3)) ; 
}
  if (!(mu__boolexpr845)) mu__boolexpr844 = FALSE ;
  else {
  mu__boolexpr844 = ((mu_n2) != (mu_n4)) ; 
}
  if (!(mu__boolexpr844)) mu__boolexpr843 = FALSE ;
  else {
  mu__boolexpr843 = ((mu_n3) != (mu_n4)) ; 
}
	      if (mu__boolexpr843) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 8704;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_396 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_395 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_394 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_393 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_ProcessFwdRequest ( (int)mu_n1, mu_EntryPath[mu_n1], mu_ExitPath[mu_n1] );
mu_ProcessFwdRequest ( (int)mu_n2, mu_EntryPath[mu_n2], mu_ExitPath[mu_n2] );
mu_ProcessFwdRequest ( (int)mu_n3, mu_EntryPath[mu_n3], mu_ExitPath[mu_n3] );
mu_ProcessFwdRequest ( (int)mu_n4, mu_EntryPath[mu_n4], mu_ExitPath[mu_n4] );
  };

};
/******************** RuleBase35 ********************/
class RuleBase35
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_392 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_391 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_390 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_389 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_388 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Send request + Process response + Process response + Process response, n5:%s, n4:%s, n3:%s, n2:%s, n1:%s", mu_n5.Name(), mu_n4.Name(), mu_n3.Name(), mu_n2.Name(), mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_392 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_391 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_390 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_389 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_388 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr856;
bool mu__boolexpr857;
bool mu__boolexpr858;
bool mu__boolexpr859;
bool mu__boolexpr860;
bool mu__boolexpr861;
bool mu__boolexpr862;
bool mu__boolexpr863;
bool mu__boolexpr864;
bool mu__boolexpr865;
bool mu__boolexpr866;
bool mu__boolexpr867;
bool mu__boolexpr868;
  if (!((mu_n1) != (mu_n2))) mu__boolexpr868 = FALSE ;
  else {
  mu__boolexpr868 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr868)) mu__boolexpr867 = FALSE ;
  else {
  mu__boolexpr867 = ((mu_Routers[mu_n1]) == (0)) ; 
}
  if (!(mu__boolexpr867)) mu__boolexpr866 = FALSE ;
  else {
  mu__boolexpr866 = ((mu_Routers[mu_n2]) == (0)) ; 
}
  if (!(mu__boolexpr866)) mu__boolexpr865 = FALSE ;
  else {
  mu__boolexpr865 = ((mu_Tokens[mu_n1]) > (0)) ; 
}
  if (!(mu__boolexpr865)) mu__boolexpr864 = FALSE ;
  else {
  mu__boolexpr864 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr864)) mu__boolexpr863 = FALSE ;
  else {
  mu__boolexpr863 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr863)) mu__boolexpr862 = FALSE ;
  else {
  mu__boolexpr862 = ((mu_IncomingQueue[mu_n5][mu_EntryPath[mu_n5]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr862)) mu__boolexpr861 = FALSE ;
  else {
  mu__boolexpr861 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr861)) mu__boolexpr860 = FALSE ;
  else {
  mu__boolexpr860 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr860)) mu__boolexpr859 = FALSE ;
  else {
  mu__boolexpr859 = ((mu_n1) != (mu_n5)) ; 
}
  if (!(mu__boolexpr859)) mu__boolexpr858 = FALSE ;
  else {
  mu__boolexpr858 = ((mu_n3) != (mu_n4)) ; 
}
  if (!(mu__boolexpr858)) mu__boolexpr857 = FALSE ;
  else {
  mu__boolexpr857 = ((mu_n3) != (mu_n5)) ; 
}
  if (!(mu__boolexpr857)) mu__boolexpr856 = FALSE ;
  else {
  mu__boolexpr856 = ((mu_n4) != (mu_n5)) ; 
}
    return mu__boolexpr856;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 8960;
    static mu__subrange_392 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_391 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_390 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_389 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_388 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 9984 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr869;
bool mu__boolexpr870;
bool mu__boolexpr871;
bool mu__boolexpr872;
bool mu__boolexpr873;
bool mu__boolexpr874;
bool mu__boolexpr875;
bool mu__boolexpr876;
bool mu__boolexpr877;
bool mu__boolexpr878;
bool mu__boolexpr879;
bool mu__boolexpr880;
bool mu__boolexpr881;
  if (!((mu_n1) != (mu_n2))) mu__boolexpr881 = FALSE ;
  else {
  mu__boolexpr881 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr881)) mu__boolexpr880 = FALSE ;
  else {
  mu__boolexpr880 = ((mu_Routers[mu_n1]) == (0)) ; 
}
  if (!(mu__boolexpr880)) mu__boolexpr879 = FALSE ;
  else {
  mu__boolexpr879 = ((mu_Routers[mu_n2]) == (0)) ; 
}
  if (!(mu__boolexpr879)) mu__boolexpr878 = FALSE ;
  else {
  mu__boolexpr878 = ((mu_Tokens[mu_n1]) > (0)) ; 
}
  if (!(mu__boolexpr878)) mu__boolexpr877 = FALSE ;
  else {
  mu__boolexpr877 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr877)) mu__boolexpr876 = FALSE ;
  else {
  mu__boolexpr876 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr876)) mu__boolexpr875 = FALSE ;
  else {
  mu__boolexpr875 = ((mu_IncomingQueue[mu_n5][mu_EntryPath[mu_n5]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr875)) mu__boolexpr874 = FALSE ;
  else {
  mu__boolexpr874 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr874)) mu__boolexpr873 = FALSE ;
  else {
  mu__boolexpr873 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr873)) mu__boolexpr872 = FALSE ;
  else {
  mu__boolexpr872 = ((mu_n1) != (mu_n5)) ; 
}
  if (!(mu__boolexpr872)) mu__boolexpr871 = FALSE ;
  else {
  mu__boolexpr871 = ((mu_n3) != (mu_n4)) ; 
}
  if (!(mu__boolexpr871)) mu__boolexpr870 = FALSE ;
  else {
  mu__boolexpr870 = ((mu_n3) != (mu_n5)) ; 
}
  if (!(mu__boolexpr870)) mu__boolexpr869 = FALSE ;
  else {
  mu__boolexpr869 = ((mu_n4) != (mu_n5)) ; 
}
	      if (mu__boolexpr869) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 8960;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_392 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_391 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_390 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_389 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_388 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_SendRequest ( (int)mu_n1, mu_ExitPath[mu_n1], (int)mu_n2 );
mu_Tokens[mu_n1] = (mu_Tokens[mu_n1]) - (1);
mu_ProcessResponse ( (int)mu_n3, mu_EntryPath[mu_n3] );
mu_Tokens[mu_n3] = (mu_Tokens[mu_n3]) + (1);
mu_ProcessResponse ( (int)mu_n4, mu_EntryPath[mu_n4] );
mu_Tokens[mu_n4] = (mu_Tokens[mu_n4]) + (1);
mu_ProcessResponse ( (int)mu_n5, mu_EntryPath[mu_n5] );
mu_Tokens[mu_n5] = (mu_Tokens[mu_n5]) + (1);
  };

};
/******************** RuleBase36 ********************/
class RuleBase36
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_387 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_386 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_385 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_384 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_383 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Send request + Process fwd_response + Process response + Process response, n5:%s, n4:%s, n3:%s, n2:%s, n1:%s", mu_n5.Name(), mu_n4.Name(), mu_n3.Name(), mu_n2.Name(), mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_387 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_386 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_385 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_384 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_383 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr882;
bool mu__boolexpr883;
bool mu__boolexpr884;
bool mu__boolexpr885;
bool mu__boolexpr886;
bool mu__boolexpr887;
bool mu__boolexpr888;
bool mu__boolexpr889;
bool mu__boolexpr890;
bool mu__boolexpr891;
bool mu__boolexpr892;
bool mu__boolexpr893;
bool mu__boolexpr894;
bool mu__boolexpr895;
  if (!((mu_n1) != (mu_n2))) mu__boolexpr895 = FALSE ;
  else {
  mu__boolexpr895 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr895)) mu__boolexpr894 = FALSE ;
  else {
  mu__boolexpr894 = ((mu_Routers[mu_n1]) == (0)) ; 
}
  if (!(mu__boolexpr894)) mu__boolexpr893 = FALSE ;
  else {
  mu__boolexpr893 = ((mu_Routers[mu_n2]) == (0)) ; 
}
  if (!(mu__boolexpr893)) mu__boolexpr892 = FALSE ;
  else {
  mu__boolexpr892 = ((mu_Tokens[mu_n1]) > (0)) ; 
}
  if (!(mu__boolexpr892)) mu__boolexpr891 = FALSE ;
  else {
  mu__boolexpr891 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr891)) mu__boolexpr890 = FALSE ;
  else {
  mu__boolexpr890 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr890)) mu__boolexpr889 = FALSE ;
  else {
  mu__boolexpr889 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr889)) mu__boolexpr888 = FALSE ;
  else {
  mu__boolexpr888 = ((mu_IncomingQueue[mu_n5][mu_EntryPath[mu_n5]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr888)) mu__boolexpr887 = FALSE ;
  else {
  mu__boolexpr887 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr887)) mu__boolexpr886 = FALSE ;
  else {
  mu__boolexpr886 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr886)) mu__boolexpr885 = FALSE ;
  else {
  mu__boolexpr885 = ((mu_n1) != (mu_n5)) ; 
}
  if (!(mu__boolexpr885)) mu__boolexpr884 = FALSE ;
  else {
  mu__boolexpr884 = ((mu_n3) != (mu_n4)) ; 
}
  if (!(mu__boolexpr884)) mu__boolexpr883 = FALSE ;
  else {
  mu__boolexpr883 = ((mu_n3) != (mu_n5)) ; 
}
  if (!(mu__boolexpr883)) mu__boolexpr882 = FALSE ;
  else {
  mu__boolexpr882 = ((mu_n4) != (mu_n5)) ; 
}
    return mu__boolexpr882;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 9984;
    static mu__subrange_387 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_386 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_385 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_384 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_383 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 11008 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr896;
bool mu__boolexpr897;
bool mu__boolexpr898;
bool mu__boolexpr899;
bool mu__boolexpr900;
bool mu__boolexpr901;
bool mu__boolexpr902;
bool mu__boolexpr903;
bool mu__boolexpr904;
bool mu__boolexpr905;
bool mu__boolexpr906;
bool mu__boolexpr907;
bool mu__boolexpr908;
bool mu__boolexpr909;
  if (!((mu_n1) != (mu_n2))) mu__boolexpr909 = FALSE ;
  else {
  mu__boolexpr909 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr909)) mu__boolexpr908 = FALSE ;
  else {
  mu__boolexpr908 = ((mu_Routers[mu_n1]) == (0)) ; 
}
  if (!(mu__boolexpr908)) mu__boolexpr907 = FALSE ;
  else {
  mu__boolexpr907 = ((mu_Routers[mu_n2]) == (0)) ; 
}
  if (!(mu__boolexpr907)) mu__boolexpr906 = FALSE ;
  else {
  mu__boolexpr906 = ((mu_Tokens[mu_n1]) > (0)) ; 
}
  if (!(mu__boolexpr906)) mu__boolexpr905 = FALSE ;
  else {
  mu__boolexpr905 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr905)) mu__boolexpr904 = FALSE ;
  else {
  mu__boolexpr904 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr904)) mu__boolexpr903 = FALSE ;
  else {
  mu__boolexpr903 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr903)) mu__boolexpr902 = FALSE ;
  else {
  mu__boolexpr902 = ((mu_IncomingQueue[mu_n5][mu_EntryPath[mu_n5]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr902)) mu__boolexpr901 = FALSE ;
  else {
  mu__boolexpr901 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr901)) mu__boolexpr900 = FALSE ;
  else {
  mu__boolexpr900 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr900)) mu__boolexpr899 = FALSE ;
  else {
  mu__boolexpr899 = ((mu_n1) != (mu_n5)) ; 
}
  if (!(mu__boolexpr899)) mu__boolexpr898 = FALSE ;
  else {
  mu__boolexpr898 = ((mu_n3) != (mu_n4)) ; 
}
  if (!(mu__boolexpr898)) mu__boolexpr897 = FALSE ;
  else {
  mu__boolexpr897 = ((mu_n3) != (mu_n5)) ; 
}
  if (!(mu__boolexpr897)) mu__boolexpr896 = FALSE ;
  else {
  mu__boolexpr896 = ((mu_n4) != (mu_n5)) ; 
}
	      if (mu__boolexpr896) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 9984;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_387 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_386 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_385 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_384 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_383 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_SendRequest ( (int)mu_n1, mu_ExitPath[mu_n1], (int)mu_n2 );
mu_Tokens[mu_n1] = (mu_Tokens[mu_n1]) - (1);
mu_ProcessFwdResponse ( (int)mu_n3, mu_EntryPath[mu_n3], mu_ExitPath[mu_n3] );
mu_ProcessResponse ( (int)mu_n4, mu_EntryPath[mu_n4] );
mu_Tokens[mu_n4] = (mu_Tokens[mu_n4]) + (1);
mu_ProcessResponse ( (int)mu_n5, mu_EntryPath[mu_n5] );
mu_Tokens[mu_n5] = (mu_Tokens[mu_n5]) + (1);
  };

};
/******************** RuleBase37 ********************/
class RuleBase37
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_382 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_381 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_380 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_379 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_378 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Send request + Process fwd_response + Process fwd_response + Process response, n5:%s, n4:%s, n3:%s, n2:%s, n1:%s", mu_n5.Name(), mu_n4.Name(), mu_n3.Name(), mu_n2.Name(), mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_382 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_381 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_380 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_379 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_378 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr910;
bool mu__boolexpr911;
bool mu__boolexpr912;
bool mu__boolexpr913;
bool mu__boolexpr914;
bool mu__boolexpr915;
bool mu__boolexpr916;
bool mu__boolexpr917;
bool mu__boolexpr918;
bool mu__boolexpr919;
bool mu__boolexpr920;
bool mu__boolexpr921;
bool mu__boolexpr922;
bool mu__boolexpr923;
bool mu__boolexpr924;
  if (!((mu_n1) != (mu_n2))) mu__boolexpr924 = FALSE ;
  else {
  mu__boolexpr924 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr924)) mu__boolexpr923 = FALSE ;
  else {
  mu__boolexpr923 = ((mu_Routers[mu_n1]) == (0)) ; 
}
  if (!(mu__boolexpr923)) mu__boolexpr922 = FALSE ;
  else {
  mu__boolexpr922 = ((mu_Routers[mu_n2]) == (0)) ; 
}
  if (!(mu__boolexpr922)) mu__boolexpr921 = FALSE ;
  else {
  mu__boolexpr921 = ((mu_Tokens[mu_n1]) > (0)) ; 
}
  if (!(mu__boolexpr921)) mu__boolexpr920 = FALSE ;
  else {
  mu__boolexpr920 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr920)) mu__boolexpr919 = FALSE ;
  else {
  mu__boolexpr919 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr919)) mu__boolexpr918 = FALSE ;
  else {
  mu__boolexpr918 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr918)) mu__boolexpr917 = FALSE ;
  else {
  mu__boolexpr917 = ((mu_TailPointers[mu_ExitPath[mu_n4]][mu_n4]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr917)) mu__boolexpr916 = FALSE ;
  else {
  mu__boolexpr916 = ((mu_IncomingQueue[mu_n5][mu_EntryPath[mu_n5]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr916)) mu__boolexpr915 = FALSE ;
  else {
  mu__boolexpr915 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr915)) mu__boolexpr914 = FALSE ;
  else {
  mu__boolexpr914 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr914)) mu__boolexpr913 = FALSE ;
  else {
  mu__boolexpr913 = ((mu_n1) != (mu_n5)) ; 
}
  if (!(mu__boolexpr913)) mu__boolexpr912 = FALSE ;
  else {
  mu__boolexpr912 = ((mu_n3) != (mu_n4)) ; 
}
  if (!(mu__boolexpr912)) mu__boolexpr911 = FALSE ;
  else {
  mu__boolexpr911 = ((mu_n3) != (mu_n5)) ; 
}
  if (!(mu__boolexpr911)) mu__boolexpr910 = FALSE ;
  else {
  mu__boolexpr910 = ((mu_n4) != (mu_n5)) ; 
}
    return mu__boolexpr910;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 11008;
    static mu__subrange_382 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_381 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_380 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_379 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_378 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 12032 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr925;
bool mu__boolexpr926;
bool mu__boolexpr927;
bool mu__boolexpr928;
bool mu__boolexpr929;
bool mu__boolexpr930;
bool mu__boolexpr931;
bool mu__boolexpr932;
bool mu__boolexpr933;
bool mu__boolexpr934;
bool mu__boolexpr935;
bool mu__boolexpr936;
bool mu__boolexpr937;
bool mu__boolexpr938;
bool mu__boolexpr939;
  if (!((mu_n1) != (mu_n2))) mu__boolexpr939 = FALSE ;
  else {
  mu__boolexpr939 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr939)) mu__boolexpr938 = FALSE ;
  else {
  mu__boolexpr938 = ((mu_Routers[mu_n1]) == (0)) ; 
}
  if (!(mu__boolexpr938)) mu__boolexpr937 = FALSE ;
  else {
  mu__boolexpr937 = ((mu_Routers[mu_n2]) == (0)) ; 
}
  if (!(mu__boolexpr937)) mu__boolexpr936 = FALSE ;
  else {
  mu__boolexpr936 = ((mu_Tokens[mu_n1]) > (0)) ; 
}
  if (!(mu__boolexpr936)) mu__boolexpr935 = FALSE ;
  else {
  mu__boolexpr935 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr935)) mu__boolexpr934 = FALSE ;
  else {
  mu__boolexpr934 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr934)) mu__boolexpr933 = FALSE ;
  else {
  mu__boolexpr933 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr933)) mu__boolexpr932 = FALSE ;
  else {
  mu__boolexpr932 = ((mu_TailPointers[mu_ExitPath[mu_n4]][mu_n4]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr932)) mu__boolexpr931 = FALSE ;
  else {
  mu__boolexpr931 = ((mu_IncomingQueue[mu_n5][mu_EntryPath[mu_n5]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr931)) mu__boolexpr930 = FALSE ;
  else {
  mu__boolexpr930 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr930)) mu__boolexpr929 = FALSE ;
  else {
  mu__boolexpr929 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr929)) mu__boolexpr928 = FALSE ;
  else {
  mu__boolexpr928 = ((mu_n1) != (mu_n5)) ; 
}
  if (!(mu__boolexpr928)) mu__boolexpr927 = FALSE ;
  else {
  mu__boolexpr927 = ((mu_n3) != (mu_n4)) ; 
}
  if (!(mu__boolexpr927)) mu__boolexpr926 = FALSE ;
  else {
  mu__boolexpr926 = ((mu_n3) != (mu_n5)) ; 
}
  if (!(mu__boolexpr926)) mu__boolexpr925 = FALSE ;
  else {
  mu__boolexpr925 = ((mu_n4) != (mu_n5)) ; 
}
	      if (mu__boolexpr925) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 11008;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_382 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_381 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_380 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_379 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_378 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_SendRequest ( (int)mu_n1, mu_ExitPath[mu_n1], (int)mu_n2 );
mu_Tokens[mu_n1] = (mu_Tokens[mu_n1]) - (1);
mu_ProcessFwdResponse ( (int)mu_n3, mu_EntryPath[mu_n3], mu_ExitPath[mu_n3] );
mu_ProcessFwdResponse ( (int)mu_n4, mu_EntryPath[mu_n4], mu_ExitPath[mu_n4] );
mu_ProcessResponse ( (int)mu_n5, mu_EntryPath[mu_n5] );
mu_Tokens[mu_n5] = (mu_Tokens[mu_n5]) + (1);
  };

};
/******************** RuleBase38 ********************/
class RuleBase38
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_377 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_376 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_375 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_374 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_373 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Send request + Process fwd_response + Process fwd_response + Process fwd_response, n5:%s, n4:%s, n3:%s, n2:%s, n1:%s", mu_n5.Name(), mu_n4.Name(), mu_n3.Name(), mu_n2.Name(), mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_377 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_376 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_375 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_374 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_373 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr940;
bool mu__boolexpr941;
bool mu__boolexpr942;
bool mu__boolexpr943;
bool mu__boolexpr944;
bool mu__boolexpr945;
bool mu__boolexpr946;
bool mu__boolexpr947;
bool mu__boolexpr948;
bool mu__boolexpr949;
bool mu__boolexpr950;
bool mu__boolexpr951;
bool mu__boolexpr952;
bool mu__boolexpr953;
bool mu__boolexpr954;
bool mu__boolexpr955;
  if (!((mu_n1) != (mu_n2))) mu__boolexpr955 = FALSE ;
  else {
  mu__boolexpr955 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr955)) mu__boolexpr954 = FALSE ;
  else {
  mu__boolexpr954 = ((mu_Routers[mu_n1]) == (0)) ; 
}
  if (!(mu__boolexpr954)) mu__boolexpr953 = FALSE ;
  else {
  mu__boolexpr953 = ((mu_Routers[mu_n2]) == (0)) ; 
}
  if (!(mu__boolexpr953)) mu__boolexpr952 = FALSE ;
  else {
  mu__boolexpr952 = ((mu_Tokens[mu_n1]) > (0)) ; 
}
  if (!(mu__boolexpr952)) mu__boolexpr951 = FALSE ;
  else {
  mu__boolexpr951 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr951)) mu__boolexpr950 = FALSE ;
  else {
  mu__boolexpr950 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr950)) mu__boolexpr949 = FALSE ;
  else {
  mu__boolexpr949 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr949)) mu__boolexpr948 = FALSE ;
  else {
  mu__boolexpr948 = ((mu_TailPointers[mu_ExitPath[mu_n4]][mu_n4]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr948)) mu__boolexpr947 = FALSE ;
  else {
  mu__boolexpr947 = ((mu_IncomingQueue[mu_n5][mu_EntryPath[mu_n5]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr947)) mu__boolexpr946 = FALSE ;
  else {
  mu__boolexpr946 = ((mu_TailPointers[mu_ExitPath[mu_n5]][mu_n5]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr946)) mu__boolexpr945 = FALSE ;
  else {
  mu__boolexpr945 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr945)) mu__boolexpr944 = FALSE ;
  else {
  mu__boolexpr944 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr944)) mu__boolexpr943 = FALSE ;
  else {
  mu__boolexpr943 = ((mu_n1) != (mu_n5)) ; 
}
  if (!(mu__boolexpr943)) mu__boolexpr942 = FALSE ;
  else {
  mu__boolexpr942 = ((mu_n3) != (mu_n4)) ; 
}
  if (!(mu__boolexpr942)) mu__boolexpr941 = FALSE ;
  else {
  mu__boolexpr941 = ((mu_n3) != (mu_n5)) ; 
}
  if (!(mu__boolexpr941)) mu__boolexpr940 = FALSE ;
  else {
  mu__boolexpr940 = ((mu_n4) != (mu_n5)) ; 
}
    return mu__boolexpr940;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 12032;
    static mu__subrange_377 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_376 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_375 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_374 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_373 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 13056 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr956;
bool mu__boolexpr957;
bool mu__boolexpr958;
bool mu__boolexpr959;
bool mu__boolexpr960;
bool mu__boolexpr961;
bool mu__boolexpr962;
bool mu__boolexpr963;
bool mu__boolexpr964;
bool mu__boolexpr965;
bool mu__boolexpr966;
bool mu__boolexpr967;
bool mu__boolexpr968;
bool mu__boolexpr969;
bool mu__boolexpr970;
bool mu__boolexpr971;
  if (!((mu_n1) != (mu_n2))) mu__boolexpr971 = FALSE ;
  else {
  mu__boolexpr971 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr971)) mu__boolexpr970 = FALSE ;
  else {
  mu__boolexpr970 = ((mu_Routers[mu_n1]) == (0)) ; 
}
  if (!(mu__boolexpr970)) mu__boolexpr969 = FALSE ;
  else {
  mu__boolexpr969 = ((mu_Routers[mu_n2]) == (0)) ; 
}
  if (!(mu__boolexpr969)) mu__boolexpr968 = FALSE ;
  else {
  mu__boolexpr968 = ((mu_Tokens[mu_n1]) > (0)) ; 
}
  if (!(mu__boolexpr968)) mu__boolexpr967 = FALSE ;
  else {
  mu__boolexpr967 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr967)) mu__boolexpr966 = FALSE ;
  else {
  mu__boolexpr966 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr966)) mu__boolexpr965 = FALSE ;
  else {
  mu__boolexpr965 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr965)) mu__boolexpr964 = FALSE ;
  else {
  mu__boolexpr964 = ((mu_TailPointers[mu_ExitPath[mu_n4]][mu_n4]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr964)) mu__boolexpr963 = FALSE ;
  else {
  mu__boolexpr963 = ((mu_IncomingQueue[mu_n5][mu_EntryPath[mu_n5]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr963)) mu__boolexpr962 = FALSE ;
  else {
  mu__boolexpr962 = ((mu_TailPointers[mu_ExitPath[mu_n5]][mu_n5]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr962)) mu__boolexpr961 = FALSE ;
  else {
  mu__boolexpr961 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr961)) mu__boolexpr960 = FALSE ;
  else {
  mu__boolexpr960 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr960)) mu__boolexpr959 = FALSE ;
  else {
  mu__boolexpr959 = ((mu_n1) != (mu_n5)) ; 
}
  if (!(mu__boolexpr959)) mu__boolexpr958 = FALSE ;
  else {
  mu__boolexpr958 = ((mu_n3) != (mu_n4)) ; 
}
  if (!(mu__boolexpr958)) mu__boolexpr957 = FALSE ;
  else {
  mu__boolexpr957 = ((mu_n3) != (mu_n5)) ; 
}
  if (!(mu__boolexpr957)) mu__boolexpr956 = FALSE ;
  else {
  mu__boolexpr956 = ((mu_n4) != (mu_n5)) ; 
}
	      if (mu__boolexpr956) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 12032;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_377 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_376 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_375 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_374 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_373 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_SendRequest ( (int)mu_n1, mu_ExitPath[mu_n1], (int)mu_n2 );
mu_Tokens[mu_n1] = (mu_Tokens[mu_n1]) - (1);
mu_ProcessFwdResponse ( (int)mu_n3, mu_EntryPath[mu_n3], mu_ExitPath[mu_n3] );
mu_ProcessFwdResponse ( (int)mu_n4, mu_EntryPath[mu_n4], mu_ExitPath[mu_n4] );
mu_ProcessFwdResponse ( (int)mu_n5, mu_EntryPath[mu_n5], mu_ExitPath[mu_n5] );
  };

};
/******************** RuleBase39 ********************/
class RuleBase39
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_372 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_371 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_370 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_369 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_368 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Send request + Process request + Process response + Process response, n5:%s, n4:%s, n3:%s, n2:%s, n1:%s", mu_n5.Name(), mu_n4.Name(), mu_n3.Name(), mu_n2.Name(), mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_372 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_371 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_370 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_369 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_368 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr972;
bool mu__boolexpr973;
bool mu__boolexpr974;
bool mu__boolexpr975;
bool mu__boolexpr976;
bool mu__boolexpr977;
bool mu__boolexpr978;
bool mu__boolexpr979;
bool mu__boolexpr980;
bool mu__boolexpr981;
bool mu__boolexpr982;
bool mu__boolexpr983;
bool mu__boolexpr984;
bool mu__boolexpr985;
  if (!((mu_n1) != (mu_n2))) mu__boolexpr985 = FALSE ;
  else {
  mu__boolexpr985 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr985)) mu__boolexpr984 = FALSE ;
  else {
  mu__boolexpr984 = ((mu_Routers[mu_n1]) == (0)) ; 
}
  if (!(mu__boolexpr984)) mu__boolexpr983 = FALSE ;
  else {
  mu__boolexpr983 = ((mu_Routers[mu_n2]) == (0)) ; 
}
  if (!(mu__boolexpr983)) mu__boolexpr982 = FALSE ;
  else {
  mu__boolexpr982 = ((mu_Tokens[mu_n1]) > (0)) ; 
}
  if (!(mu__boolexpr982)) mu__boolexpr981 = FALSE ;
  else {
  mu__boolexpr981 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr981)) mu__boolexpr980 = FALSE ;
  else {
  mu__boolexpr980 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr980)) mu__boolexpr979 = FALSE ;
  else {
  mu__boolexpr979 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr979)) mu__boolexpr978 = FALSE ;
  else {
  mu__boolexpr978 = ((mu_IncomingQueue[mu_n5][mu_EntryPath[mu_n5]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr978)) mu__boolexpr977 = FALSE ;
  else {
  mu__boolexpr977 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr977)) mu__boolexpr976 = FALSE ;
  else {
  mu__boolexpr976 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr976)) mu__boolexpr975 = FALSE ;
  else {
  mu__boolexpr975 = ((mu_n1) != (mu_n5)) ; 
}
  if (!(mu__boolexpr975)) mu__boolexpr974 = FALSE ;
  else {
  mu__boolexpr974 = ((mu_n3) != (mu_n4)) ; 
}
  if (!(mu__boolexpr974)) mu__boolexpr973 = FALSE ;
  else {
  mu__boolexpr973 = ((mu_n3) != (mu_n5)) ; 
}
  if (!(mu__boolexpr973)) mu__boolexpr972 = FALSE ;
  else {
  mu__boolexpr972 = ((mu_n4) != (mu_n5)) ; 
}
    return mu__boolexpr972;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 13056;
    static mu__subrange_372 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_371 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_370 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_369 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_368 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 14080 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr986;
bool mu__boolexpr987;
bool mu__boolexpr988;
bool mu__boolexpr989;
bool mu__boolexpr990;
bool mu__boolexpr991;
bool mu__boolexpr992;
bool mu__boolexpr993;
bool mu__boolexpr994;
bool mu__boolexpr995;
bool mu__boolexpr996;
bool mu__boolexpr997;
bool mu__boolexpr998;
bool mu__boolexpr999;
  if (!((mu_n1) != (mu_n2))) mu__boolexpr999 = FALSE ;
  else {
  mu__boolexpr999 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr999)) mu__boolexpr998 = FALSE ;
  else {
  mu__boolexpr998 = ((mu_Routers[mu_n1]) == (0)) ; 
}
  if (!(mu__boolexpr998)) mu__boolexpr997 = FALSE ;
  else {
  mu__boolexpr997 = ((mu_Routers[mu_n2]) == (0)) ; 
}
  if (!(mu__boolexpr997)) mu__boolexpr996 = FALSE ;
  else {
  mu__boolexpr996 = ((mu_Tokens[mu_n1]) > (0)) ; 
}
  if (!(mu__boolexpr996)) mu__boolexpr995 = FALSE ;
  else {
  mu__boolexpr995 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr995)) mu__boolexpr994 = FALSE ;
  else {
  mu__boolexpr994 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr994)) mu__boolexpr993 = FALSE ;
  else {
  mu__boolexpr993 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr993)) mu__boolexpr992 = FALSE ;
  else {
  mu__boolexpr992 = ((mu_IncomingQueue[mu_n5][mu_EntryPath[mu_n5]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr992)) mu__boolexpr991 = FALSE ;
  else {
  mu__boolexpr991 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr991)) mu__boolexpr990 = FALSE ;
  else {
  mu__boolexpr990 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr990)) mu__boolexpr989 = FALSE ;
  else {
  mu__boolexpr989 = ((mu_n1) != (mu_n5)) ; 
}
  if (!(mu__boolexpr989)) mu__boolexpr988 = FALSE ;
  else {
  mu__boolexpr988 = ((mu_n3) != (mu_n4)) ; 
}
  if (!(mu__boolexpr988)) mu__boolexpr987 = FALSE ;
  else {
  mu__boolexpr987 = ((mu_n3) != (mu_n5)) ; 
}
  if (!(mu__boolexpr987)) mu__boolexpr986 = FALSE ;
  else {
  mu__boolexpr986 = ((mu_n4) != (mu_n5)) ; 
}
	      if (mu__boolexpr986) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 13056;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_372 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_371 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_370 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_369 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_368 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_SendRequest ( (int)mu_n1, mu_ExitPath[mu_n1], (int)mu_n2 );
mu_Tokens[mu_n1] = (mu_Tokens[mu_n1]) - (1);
mu_ProcessRequest ( (int)mu_n3, mu_EntryPath[mu_n3], mu_ExitPath[mu_n3] );
mu_ProcessResponse ( (int)mu_n4, mu_EntryPath[mu_n4] );
mu_Tokens[mu_n4] = (mu_Tokens[mu_n4]) + (1);
mu_ProcessResponse ( (int)mu_n5, mu_EntryPath[mu_n5] );
mu_Tokens[mu_n5] = (mu_Tokens[mu_n5]) + (1);
  };

};
/******************** RuleBase40 ********************/
class RuleBase40
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_367 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_366 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_365 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_364 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_363 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Send request + Process request + Process fwd_response + Process response, n5:%s, n4:%s, n3:%s, n2:%s, n1:%s", mu_n5.Name(), mu_n4.Name(), mu_n3.Name(), mu_n2.Name(), mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_367 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_366 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_365 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_364 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_363 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr1000;
bool mu__boolexpr1001;
bool mu__boolexpr1002;
bool mu__boolexpr1003;
bool mu__boolexpr1004;
bool mu__boolexpr1005;
bool mu__boolexpr1006;
bool mu__boolexpr1007;
bool mu__boolexpr1008;
bool mu__boolexpr1009;
bool mu__boolexpr1010;
bool mu__boolexpr1011;
bool mu__boolexpr1012;
bool mu__boolexpr1013;
bool mu__boolexpr1014;
  if (!((mu_n1) != (mu_n2))) mu__boolexpr1014 = FALSE ;
  else {
  mu__boolexpr1014 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1014)) mu__boolexpr1013 = FALSE ;
  else {
  mu__boolexpr1013 = ((mu_Routers[mu_n1]) == (0)) ; 
}
  if (!(mu__boolexpr1013)) mu__boolexpr1012 = FALSE ;
  else {
  mu__boolexpr1012 = ((mu_Routers[mu_n2]) == (0)) ; 
}
  if (!(mu__boolexpr1012)) mu__boolexpr1011 = FALSE ;
  else {
  mu__boolexpr1011 = ((mu_Tokens[mu_n1]) > (0)) ; 
}
  if (!(mu__boolexpr1011)) mu__boolexpr1010 = FALSE ;
  else {
  mu__boolexpr1010 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr1010)) mu__boolexpr1009 = FALSE ;
  else {
  mu__boolexpr1009 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1009)) mu__boolexpr1008 = FALSE ;
  else {
  mu__boolexpr1008 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr1008)) mu__boolexpr1007 = FALSE ;
  else {
  mu__boolexpr1007 = ((mu_TailPointers[mu_ExitPath[mu_n4]][mu_n4]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1007)) mu__boolexpr1006 = FALSE ;
  else {
  mu__boolexpr1006 = ((mu_IncomingQueue[mu_n5][mu_EntryPath[mu_n5]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr1006)) mu__boolexpr1005 = FALSE ;
  else {
  mu__boolexpr1005 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr1005)) mu__boolexpr1004 = FALSE ;
  else {
  mu__boolexpr1004 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr1004)) mu__boolexpr1003 = FALSE ;
  else {
  mu__boolexpr1003 = ((mu_n1) != (mu_n5)) ; 
}
  if (!(mu__boolexpr1003)) mu__boolexpr1002 = FALSE ;
  else {
  mu__boolexpr1002 = ((mu_n3) != (mu_n4)) ; 
}
  if (!(mu__boolexpr1002)) mu__boolexpr1001 = FALSE ;
  else {
  mu__boolexpr1001 = ((mu_n3) != (mu_n5)) ; 
}
  if (!(mu__boolexpr1001)) mu__boolexpr1000 = FALSE ;
  else {
  mu__boolexpr1000 = ((mu_n4) != (mu_n5)) ; 
}
    return mu__boolexpr1000;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 14080;
    static mu__subrange_367 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_366 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_365 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_364 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_363 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 15104 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr1015;
bool mu__boolexpr1016;
bool mu__boolexpr1017;
bool mu__boolexpr1018;
bool mu__boolexpr1019;
bool mu__boolexpr1020;
bool mu__boolexpr1021;
bool mu__boolexpr1022;
bool mu__boolexpr1023;
bool mu__boolexpr1024;
bool mu__boolexpr1025;
bool mu__boolexpr1026;
bool mu__boolexpr1027;
bool mu__boolexpr1028;
bool mu__boolexpr1029;
  if (!((mu_n1) != (mu_n2))) mu__boolexpr1029 = FALSE ;
  else {
  mu__boolexpr1029 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1029)) mu__boolexpr1028 = FALSE ;
  else {
  mu__boolexpr1028 = ((mu_Routers[mu_n1]) == (0)) ; 
}
  if (!(mu__boolexpr1028)) mu__boolexpr1027 = FALSE ;
  else {
  mu__boolexpr1027 = ((mu_Routers[mu_n2]) == (0)) ; 
}
  if (!(mu__boolexpr1027)) mu__boolexpr1026 = FALSE ;
  else {
  mu__boolexpr1026 = ((mu_Tokens[mu_n1]) > (0)) ; 
}
  if (!(mu__boolexpr1026)) mu__boolexpr1025 = FALSE ;
  else {
  mu__boolexpr1025 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr1025)) mu__boolexpr1024 = FALSE ;
  else {
  mu__boolexpr1024 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1024)) mu__boolexpr1023 = FALSE ;
  else {
  mu__boolexpr1023 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr1023)) mu__boolexpr1022 = FALSE ;
  else {
  mu__boolexpr1022 = ((mu_TailPointers[mu_ExitPath[mu_n4]][mu_n4]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1022)) mu__boolexpr1021 = FALSE ;
  else {
  mu__boolexpr1021 = ((mu_IncomingQueue[mu_n5][mu_EntryPath[mu_n5]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr1021)) mu__boolexpr1020 = FALSE ;
  else {
  mu__boolexpr1020 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr1020)) mu__boolexpr1019 = FALSE ;
  else {
  mu__boolexpr1019 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr1019)) mu__boolexpr1018 = FALSE ;
  else {
  mu__boolexpr1018 = ((mu_n1) != (mu_n5)) ; 
}
  if (!(mu__boolexpr1018)) mu__boolexpr1017 = FALSE ;
  else {
  mu__boolexpr1017 = ((mu_n3) != (mu_n4)) ; 
}
  if (!(mu__boolexpr1017)) mu__boolexpr1016 = FALSE ;
  else {
  mu__boolexpr1016 = ((mu_n3) != (mu_n5)) ; 
}
  if (!(mu__boolexpr1016)) mu__boolexpr1015 = FALSE ;
  else {
  mu__boolexpr1015 = ((mu_n4) != (mu_n5)) ; 
}
	      if (mu__boolexpr1015) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 14080;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_367 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_366 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_365 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_364 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_363 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_SendRequest ( (int)mu_n1, mu_ExitPath[mu_n1], (int)mu_n2 );
mu_Tokens[mu_n1] = (mu_Tokens[mu_n1]) - (1);
mu_ProcessRequest ( (int)mu_n3, mu_EntryPath[mu_n3], mu_ExitPath[mu_n3] );
mu_ProcessFwdResponse ( (int)mu_n4, mu_EntryPath[mu_n4], mu_ExitPath[mu_n4] );
mu_ProcessResponse ( (int)mu_n5, mu_EntryPath[mu_n5] );
mu_Tokens[mu_n5] = (mu_Tokens[mu_n5]) + (1);
  };

};
/******************** RuleBase41 ********************/
class RuleBase41
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_362 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_361 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_360 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_359 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_358 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Send request + Process request + Process fwd_response + Process fwd_response, n5:%s, n4:%s, n3:%s, n2:%s, n1:%s", mu_n5.Name(), mu_n4.Name(), mu_n3.Name(), mu_n2.Name(), mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_362 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_361 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_360 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_359 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_358 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr1030;
bool mu__boolexpr1031;
bool mu__boolexpr1032;
bool mu__boolexpr1033;
bool mu__boolexpr1034;
bool mu__boolexpr1035;
bool mu__boolexpr1036;
bool mu__boolexpr1037;
bool mu__boolexpr1038;
bool mu__boolexpr1039;
bool mu__boolexpr1040;
bool mu__boolexpr1041;
bool mu__boolexpr1042;
bool mu__boolexpr1043;
bool mu__boolexpr1044;
bool mu__boolexpr1045;
  if (!((mu_n1) != (mu_n2))) mu__boolexpr1045 = FALSE ;
  else {
  mu__boolexpr1045 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1045)) mu__boolexpr1044 = FALSE ;
  else {
  mu__boolexpr1044 = ((mu_Routers[mu_n1]) == (0)) ; 
}
  if (!(mu__boolexpr1044)) mu__boolexpr1043 = FALSE ;
  else {
  mu__boolexpr1043 = ((mu_Routers[mu_n2]) == (0)) ; 
}
  if (!(mu__boolexpr1043)) mu__boolexpr1042 = FALSE ;
  else {
  mu__boolexpr1042 = ((mu_Tokens[mu_n1]) > (0)) ; 
}
  if (!(mu__boolexpr1042)) mu__boolexpr1041 = FALSE ;
  else {
  mu__boolexpr1041 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr1041)) mu__boolexpr1040 = FALSE ;
  else {
  mu__boolexpr1040 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1040)) mu__boolexpr1039 = FALSE ;
  else {
  mu__boolexpr1039 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr1039)) mu__boolexpr1038 = FALSE ;
  else {
  mu__boolexpr1038 = ((mu_TailPointers[mu_ExitPath[mu_n4]][mu_n4]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1038)) mu__boolexpr1037 = FALSE ;
  else {
  mu__boolexpr1037 = ((mu_IncomingQueue[mu_n5][mu_EntryPath[mu_n5]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr1037)) mu__boolexpr1036 = FALSE ;
  else {
  mu__boolexpr1036 = ((mu_TailPointers[mu_ExitPath[mu_n5]][mu_n5]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1036)) mu__boolexpr1035 = FALSE ;
  else {
  mu__boolexpr1035 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr1035)) mu__boolexpr1034 = FALSE ;
  else {
  mu__boolexpr1034 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr1034)) mu__boolexpr1033 = FALSE ;
  else {
  mu__boolexpr1033 = ((mu_n1) != (mu_n5)) ; 
}
  if (!(mu__boolexpr1033)) mu__boolexpr1032 = FALSE ;
  else {
  mu__boolexpr1032 = ((mu_n3) != (mu_n4)) ; 
}
  if (!(mu__boolexpr1032)) mu__boolexpr1031 = FALSE ;
  else {
  mu__boolexpr1031 = ((mu_n3) != (mu_n5)) ; 
}
  if (!(mu__boolexpr1031)) mu__boolexpr1030 = FALSE ;
  else {
  mu__boolexpr1030 = ((mu_n4) != (mu_n5)) ; 
}
    return mu__boolexpr1030;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 15104;
    static mu__subrange_362 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_361 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_360 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_359 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_358 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 16128 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr1046;
bool mu__boolexpr1047;
bool mu__boolexpr1048;
bool mu__boolexpr1049;
bool mu__boolexpr1050;
bool mu__boolexpr1051;
bool mu__boolexpr1052;
bool mu__boolexpr1053;
bool mu__boolexpr1054;
bool mu__boolexpr1055;
bool mu__boolexpr1056;
bool mu__boolexpr1057;
bool mu__boolexpr1058;
bool mu__boolexpr1059;
bool mu__boolexpr1060;
bool mu__boolexpr1061;
  if (!((mu_n1) != (mu_n2))) mu__boolexpr1061 = FALSE ;
  else {
  mu__boolexpr1061 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1061)) mu__boolexpr1060 = FALSE ;
  else {
  mu__boolexpr1060 = ((mu_Routers[mu_n1]) == (0)) ; 
}
  if (!(mu__boolexpr1060)) mu__boolexpr1059 = FALSE ;
  else {
  mu__boolexpr1059 = ((mu_Routers[mu_n2]) == (0)) ; 
}
  if (!(mu__boolexpr1059)) mu__boolexpr1058 = FALSE ;
  else {
  mu__boolexpr1058 = ((mu_Tokens[mu_n1]) > (0)) ; 
}
  if (!(mu__boolexpr1058)) mu__boolexpr1057 = FALSE ;
  else {
  mu__boolexpr1057 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr1057)) mu__boolexpr1056 = FALSE ;
  else {
  mu__boolexpr1056 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1056)) mu__boolexpr1055 = FALSE ;
  else {
  mu__boolexpr1055 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr1055)) mu__boolexpr1054 = FALSE ;
  else {
  mu__boolexpr1054 = ((mu_TailPointers[mu_ExitPath[mu_n4]][mu_n4]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1054)) mu__boolexpr1053 = FALSE ;
  else {
  mu__boolexpr1053 = ((mu_IncomingQueue[mu_n5][mu_EntryPath[mu_n5]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr1053)) mu__boolexpr1052 = FALSE ;
  else {
  mu__boolexpr1052 = ((mu_TailPointers[mu_ExitPath[mu_n5]][mu_n5]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1052)) mu__boolexpr1051 = FALSE ;
  else {
  mu__boolexpr1051 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr1051)) mu__boolexpr1050 = FALSE ;
  else {
  mu__boolexpr1050 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr1050)) mu__boolexpr1049 = FALSE ;
  else {
  mu__boolexpr1049 = ((mu_n1) != (mu_n5)) ; 
}
  if (!(mu__boolexpr1049)) mu__boolexpr1048 = FALSE ;
  else {
  mu__boolexpr1048 = ((mu_n3) != (mu_n4)) ; 
}
  if (!(mu__boolexpr1048)) mu__boolexpr1047 = FALSE ;
  else {
  mu__boolexpr1047 = ((mu_n3) != (mu_n5)) ; 
}
  if (!(mu__boolexpr1047)) mu__boolexpr1046 = FALSE ;
  else {
  mu__boolexpr1046 = ((mu_n4) != (mu_n5)) ; 
}
	      if (mu__boolexpr1046) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 15104;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_362 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_361 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_360 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_359 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_358 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_SendRequest ( (int)mu_n1, mu_ExitPath[mu_n1], (int)mu_n2 );
mu_Tokens[mu_n1] = (mu_Tokens[mu_n1]) - (1);
mu_ProcessRequest ( (int)mu_n3, mu_EntryPath[mu_n3], mu_ExitPath[mu_n3] );
mu_ProcessFwdResponse ( (int)mu_n4, mu_EntryPath[mu_n4], mu_ExitPath[mu_n4] );
mu_ProcessFwdResponse ( (int)mu_n5, mu_EntryPath[mu_n5], mu_ExitPath[mu_n5] );
  };

};
/******************** RuleBase42 ********************/
class RuleBase42
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_357 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_356 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_355 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_354 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_353 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Send request + Process request + Process request + Process response, n5:%s, n4:%s, n3:%s, n2:%s, n1:%s", mu_n5.Name(), mu_n4.Name(), mu_n3.Name(), mu_n2.Name(), mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_357 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_356 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_355 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_354 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_353 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr1062;
bool mu__boolexpr1063;
bool mu__boolexpr1064;
bool mu__boolexpr1065;
bool mu__boolexpr1066;
bool mu__boolexpr1067;
bool mu__boolexpr1068;
bool mu__boolexpr1069;
bool mu__boolexpr1070;
bool mu__boolexpr1071;
bool mu__boolexpr1072;
bool mu__boolexpr1073;
bool mu__boolexpr1074;
bool mu__boolexpr1075;
bool mu__boolexpr1076;
  if (!((mu_n1) != (mu_n2))) mu__boolexpr1076 = FALSE ;
  else {
  mu__boolexpr1076 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1076)) mu__boolexpr1075 = FALSE ;
  else {
  mu__boolexpr1075 = ((mu_Routers[mu_n1]) == (0)) ; 
}
  if (!(mu__boolexpr1075)) mu__boolexpr1074 = FALSE ;
  else {
  mu__boolexpr1074 = ((mu_Routers[mu_n2]) == (0)) ; 
}
  if (!(mu__boolexpr1074)) mu__boolexpr1073 = FALSE ;
  else {
  mu__boolexpr1073 = ((mu_Tokens[mu_n1]) > (0)) ; 
}
  if (!(mu__boolexpr1073)) mu__boolexpr1072 = FALSE ;
  else {
  mu__boolexpr1072 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr1072)) mu__boolexpr1071 = FALSE ;
  else {
  mu__boolexpr1071 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1071)) mu__boolexpr1070 = FALSE ;
  else {
  mu__boolexpr1070 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr1070)) mu__boolexpr1069 = FALSE ;
  else {
  mu__boolexpr1069 = ((mu_TailPointers[mu_ExitPath[mu_n4]][mu_n4]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1069)) mu__boolexpr1068 = FALSE ;
  else {
  mu__boolexpr1068 = ((mu_IncomingQueue[mu_n5][mu_EntryPath[mu_n5]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr1068)) mu__boolexpr1067 = FALSE ;
  else {
  mu__boolexpr1067 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr1067)) mu__boolexpr1066 = FALSE ;
  else {
  mu__boolexpr1066 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr1066)) mu__boolexpr1065 = FALSE ;
  else {
  mu__boolexpr1065 = ((mu_n1) != (mu_n5)) ; 
}
  if (!(mu__boolexpr1065)) mu__boolexpr1064 = FALSE ;
  else {
  mu__boolexpr1064 = ((mu_n3) != (mu_n4)) ; 
}
  if (!(mu__boolexpr1064)) mu__boolexpr1063 = FALSE ;
  else {
  mu__boolexpr1063 = ((mu_n3) != (mu_n5)) ; 
}
  if (!(mu__boolexpr1063)) mu__boolexpr1062 = FALSE ;
  else {
  mu__boolexpr1062 = ((mu_n4) != (mu_n5)) ; 
}
    return mu__boolexpr1062;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 16128;
    static mu__subrange_357 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_356 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_355 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_354 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_353 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 17152 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr1077;
bool mu__boolexpr1078;
bool mu__boolexpr1079;
bool mu__boolexpr1080;
bool mu__boolexpr1081;
bool mu__boolexpr1082;
bool mu__boolexpr1083;
bool mu__boolexpr1084;
bool mu__boolexpr1085;
bool mu__boolexpr1086;
bool mu__boolexpr1087;
bool mu__boolexpr1088;
bool mu__boolexpr1089;
bool mu__boolexpr1090;
bool mu__boolexpr1091;
  if (!((mu_n1) != (mu_n2))) mu__boolexpr1091 = FALSE ;
  else {
  mu__boolexpr1091 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1091)) mu__boolexpr1090 = FALSE ;
  else {
  mu__boolexpr1090 = ((mu_Routers[mu_n1]) == (0)) ; 
}
  if (!(mu__boolexpr1090)) mu__boolexpr1089 = FALSE ;
  else {
  mu__boolexpr1089 = ((mu_Routers[mu_n2]) == (0)) ; 
}
  if (!(mu__boolexpr1089)) mu__boolexpr1088 = FALSE ;
  else {
  mu__boolexpr1088 = ((mu_Tokens[mu_n1]) > (0)) ; 
}
  if (!(mu__boolexpr1088)) mu__boolexpr1087 = FALSE ;
  else {
  mu__boolexpr1087 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr1087)) mu__boolexpr1086 = FALSE ;
  else {
  mu__boolexpr1086 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1086)) mu__boolexpr1085 = FALSE ;
  else {
  mu__boolexpr1085 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr1085)) mu__boolexpr1084 = FALSE ;
  else {
  mu__boolexpr1084 = ((mu_TailPointers[mu_ExitPath[mu_n4]][mu_n4]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1084)) mu__boolexpr1083 = FALSE ;
  else {
  mu__boolexpr1083 = ((mu_IncomingQueue[mu_n5][mu_EntryPath[mu_n5]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr1083)) mu__boolexpr1082 = FALSE ;
  else {
  mu__boolexpr1082 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr1082)) mu__boolexpr1081 = FALSE ;
  else {
  mu__boolexpr1081 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr1081)) mu__boolexpr1080 = FALSE ;
  else {
  mu__boolexpr1080 = ((mu_n1) != (mu_n5)) ; 
}
  if (!(mu__boolexpr1080)) mu__boolexpr1079 = FALSE ;
  else {
  mu__boolexpr1079 = ((mu_n3) != (mu_n4)) ; 
}
  if (!(mu__boolexpr1079)) mu__boolexpr1078 = FALSE ;
  else {
  mu__boolexpr1078 = ((mu_n3) != (mu_n5)) ; 
}
  if (!(mu__boolexpr1078)) mu__boolexpr1077 = FALSE ;
  else {
  mu__boolexpr1077 = ((mu_n4) != (mu_n5)) ; 
}
	      if (mu__boolexpr1077) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 16128;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_357 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_356 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_355 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_354 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_353 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_SendRequest ( (int)mu_n1, mu_ExitPath[mu_n1], (int)mu_n2 );
mu_Tokens[mu_n1] = (mu_Tokens[mu_n1]) - (1);
mu_ProcessRequest ( (int)mu_n3, mu_EntryPath[mu_n3], mu_ExitPath[mu_n3] );
mu_ProcessRequest ( (int)mu_n4, mu_EntryPath[mu_n4], mu_ExitPath[mu_n4] );
mu_ProcessResponse ( (int)mu_n5, mu_EntryPath[mu_n5] );
mu_Tokens[mu_n5] = (mu_Tokens[mu_n5]) + (1);
  };

};
/******************** RuleBase43 ********************/
class RuleBase43
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_352 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_351 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_350 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_349 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_348 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Send request + Process request + Process request + Process fwd_response, n5:%s, n4:%s, n3:%s, n2:%s, n1:%s", mu_n5.Name(), mu_n4.Name(), mu_n3.Name(), mu_n2.Name(), mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_352 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_351 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_350 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_349 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_348 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr1092;
bool mu__boolexpr1093;
bool mu__boolexpr1094;
bool mu__boolexpr1095;
bool mu__boolexpr1096;
bool mu__boolexpr1097;
bool mu__boolexpr1098;
bool mu__boolexpr1099;
bool mu__boolexpr1100;
bool mu__boolexpr1101;
bool mu__boolexpr1102;
bool mu__boolexpr1103;
bool mu__boolexpr1104;
bool mu__boolexpr1105;
bool mu__boolexpr1106;
bool mu__boolexpr1107;
  if (!((mu_n1) != (mu_n2))) mu__boolexpr1107 = FALSE ;
  else {
  mu__boolexpr1107 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1107)) mu__boolexpr1106 = FALSE ;
  else {
  mu__boolexpr1106 = ((mu_Routers[mu_n1]) == (0)) ; 
}
  if (!(mu__boolexpr1106)) mu__boolexpr1105 = FALSE ;
  else {
  mu__boolexpr1105 = ((mu_Routers[mu_n2]) == (0)) ; 
}
  if (!(mu__boolexpr1105)) mu__boolexpr1104 = FALSE ;
  else {
  mu__boolexpr1104 = ((mu_Tokens[mu_n1]) > (0)) ; 
}
  if (!(mu__boolexpr1104)) mu__boolexpr1103 = FALSE ;
  else {
  mu__boolexpr1103 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr1103)) mu__boolexpr1102 = FALSE ;
  else {
  mu__boolexpr1102 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1102)) mu__boolexpr1101 = FALSE ;
  else {
  mu__boolexpr1101 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr1101)) mu__boolexpr1100 = FALSE ;
  else {
  mu__boolexpr1100 = ((mu_TailPointers[mu_ExitPath[mu_n4]][mu_n4]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1100)) mu__boolexpr1099 = FALSE ;
  else {
  mu__boolexpr1099 = ((mu_IncomingQueue[mu_n5][mu_EntryPath[mu_n5]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr1099)) mu__boolexpr1098 = FALSE ;
  else {
  mu__boolexpr1098 = ((mu_TailPointers[mu_ExitPath[mu_n5]][mu_n5]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1098)) mu__boolexpr1097 = FALSE ;
  else {
  mu__boolexpr1097 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr1097)) mu__boolexpr1096 = FALSE ;
  else {
  mu__boolexpr1096 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr1096)) mu__boolexpr1095 = FALSE ;
  else {
  mu__boolexpr1095 = ((mu_n1) != (mu_n5)) ; 
}
  if (!(mu__boolexpr1095)) mu__boolexpr1094 = FALSE ;
  else {
  mu__boolexpr1094 = ((mu_n3) != (mu_n4)) ; 
}
  if (!(mu__boolexpr1094)) mu__boolexpr1093 = FALSE ;
  else {
  mu__boolexpr1093 = ((mu_n3) != (mu_n5)) ; 
}
  if (!(mu__boolexpr1093)) mu__boolexpr1092 = FALSE ;
  else {
  mu__boolexpr1092 = ((mu_n4) != (mu_n5)) ; 
}
    return mu__boolexpr1092;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 17152;
    static mu__subrange_352 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_351 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_350 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_349 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_348 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 18176 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr1108;
bool mu__boolexpr1109;
bool mu__boolexpr1110;
bool mu__boolexpr1111;
bool mu__boolexpr1112;
bool mu__boolexpr1113;
bool mu__boolexpr1114;
bool mu__boolexpr1115;
bool mu__boolexpr1116;
bool mu__boolexpr1117;
bool mu__boolexpr1118;
bool mu__boolexpr1119;
bool mu__boolexpr1120;
bool mu__boolexpr1121;
bool mu__boolexpr1122;
bool mu__boolexpr1123;
  if (!((mu_n1) != (mu_n2))) mu__boolexpr1123 = FALSE ;
  else {
  mu__boolexpr1123 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1123)) mu__boolexpr1122 = FALSE ;
  else {
  mu__boolexpr1122 = ((mu_Routers[mu_n1]) == (0)) ; 
}
  if (!(mu__boolexpr1122)) mu__boolexpr1121 = FALSE ;
  else {
  mu__boolexpr1121 = ((mu_Routers[mu_n2]) == (0)) ; 
}
  if (!(mu__boolexpr1121)) mu__boolexpr1120 = FALSE ;
  else {
  mu__boolexpr1120 = ((mu_Tokens[mu_n1]) > (0)) ; 
}
  if (!(mu__boolexpr1120)) mu__boolexpr1119 = FALSE ;
  else {
  mu__boolexpr1119 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr1119)) mu__boolexpr1118 = FALSE ;
  else {
  mu__boolexpr1118 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1118)) mu__boolexpr1117 = FALSE ;
  else {
  mu__boolexpr1117 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr1117)) mu__boolexpr1116 = FALSE ;
  else {
  mu__boolexpr1116 = ((mu_TailPointers[mu_ExitPath[mu_n4]][mu_n4]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1116)) mu__boolexpr1115 = FALSE ;
  else {
  mu__boolexpr1115 = ((mu_IncomingQueue[mu_n5][mu_EntryPath[mu_n5]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr1115)) mu__boolexpr1114 = FALSE ;
  else {
  mu__boolexpr1114 = ((mu_TailPointers[mu_ExitPath[mu_n5]][mu_n5]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1114)) mu__boolexpr1113 = FALSE ;
  else {
  mu__boolexpr1113 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr1113)) mu__boolexpr1112 = FALSE ;
  else {
  mu__boolexpr1112 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr1112)) mu__boolexpr1111 = FALSE ;
  else {
  mu__boolexpr1111 = ((mu_n1) != (mu_n5)) ; 
}
  if (!(mu__boolexpr1111)) mu__boolexpr1110 = FALSE ;
  else {
  mu__boolexpr1110 = ((mu_n3) != (mu_n4)) ; 
}
  if (!(mu__boolexpr1110)) mu__boolexpr1109 = FALSE ;
  else {
  mu__boolexpr1109 = ((mu_n3) != (mu_n5)) ; 
}
  if (!(mu__boolexpr1109)) mu__boolexpr1108 = FALSE ;
  else {
  mu__boolexpr1108 = ((mu_n4) != (mu_n5)) ; 
}
	      if (mu__boolexpr1108) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 17152;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_352 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_351 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_350 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_349 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_348 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_SendRequest ( (int)mu_n1, mu_ExitPath[mu_n1], (int)mu_n2 );
mu_Tokens[mu_n1] = (mu_Tokens[mu_n1]) - (1);
mu_ProcessRequest ( (int)mu_n3, mu_EntryPath[mu_n3], mu_ExitPath[mu_n3] );
mu_ProcessRequest ( (int)mu_n4, mu_EntryPath[mu_n4], mu_ExitPath[mu_n4] );
mu_ProcessFwdResponse ( (int)mu_n5, mu_EntryPath[mu_n5], mu_ExitPath[mu_n5] );
  };

};
/******************** RuleBase44 ********************/
class RuleBase44
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_347 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_346 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_345 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_344 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_343 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Send request + Process request + Process request + Process request, n5:%s, n4:%s, n3:%s, n2:%s, n1:%s", mu_n5.Name(), mu_n4.Name(), mu_n3.Name(), mu_n2.Name(), mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_347 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_346 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_345 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_344 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_343 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr1124;
bool mu__boolexpr1125;
bool mu__boolexpr1126;
bool mu__boolexpr1127;
bool mu__boolexpr1128;
bool mu__boolexpr1129;
bool mu__boolexpr1130;
bool mu__boolexpr1131;
bool mu__boolexpr1132;
bool mu__boolexpr1133;
bool mu__boolexpr1134;
bool mu__boolexpr1135;
bool mu__boolexpr1136;
bool mu__boolexpr1137;
bool mu__boolexpr1138;
bool mu__boolexpr1139;
  if (!((mu_n1) != (mu_n2))) mu__boolexpr1139 = FALSE ;
  else {
  mu__boolexpr1139 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1139)) mu__boolexpr1138 = FALSE ;
  else {
  mu__boolexpr1138 = ((mu_Routers[mu_n1]) == (0)) ; 
}
  if (!(mu__boolexpr1138)) mu__boolexpr1137 = FALSE ;
  else {
  mu__boolexpr1137 = ((mu_Routers[mu_n2]) == (0)) ; 
}
  if (!(mu__boolexpr1137)) mu__boolexpr1136 = FALSE ;
  else {
  mu__boolexpr1136 = ((mu_Tokens[mu_n1]) > (0)) ; 
}
  if (!(mu__boolexpr1136)) mu__boolexpr1135 = FALSE ;
  else {
  mu__boolexpr1135 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr1135)) mu__boolexpr1134 = FALSE ;
  else {
  mu__boolexpr1134 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1134)) mu__boolexpr1133 = FALSE ;
  else {
  mu__boolexpr1133 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr1133)) mu__boolexpr1132 = FALSE ;
  else {
  mu__boolexpr1132 = ((mu_TailPointers[mu_ExitPath[mu_n4]][mu_n4]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1132)) mu__boolexpr1131 = FALSE ;
  else {
  mu__boolexpr1131 = ((mu_IncomingQueue[mu_n5][mu_EntryPath[mu_n5]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr1131)) mu__boolexpr1130 = FALSE ;
  else {
  mu__boolexpr1130 = ((mu_TailPointers[mu_ExitPath[mu_n5]][mu_n5]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1130)) mu__boolexpr1129 = FALSE ;
  else {
  mu__boolexpr1129 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr1129)) mu__boolexpr1128 = FALSE ;
  else {
  mu__boolexpr1128 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr1128)) mu__boolexpr1127 = FALSE ;
  else {
  mu__boolexpr1127 = ((mu_n1) != (mu_n5)) ; 
}
  if (!(mu__boolexpr1127)) mu__boolexpr1126 = FALSE ;
  else {
  mu__boolexpr1126 = ((mu_n3) != (mu_n4)) ; 
}
  if (!(mu__boolexpr1126)) mu__boolexpr1125 = FALSE ;
  else {
  mu__boolexpr1125 = ((mu_n3) != (mu_n5)) ; 
}
  if (!(mu__boolexpr1125)) mu__boolexpr1124 = FALSE ;
  else {
  mu__boolexpr1124 = ((mu_n4) != (mu_n5)) ; 
}
    return mu__boolexpr1124;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 18176;
    static mu__subrange_347 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_346 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_345 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_344 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_343 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 19200 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr1140;
bool mu__boolexpr1141;
bool mu__boolexpr1142;
bool mu__boolexpr1143;
bool mu__boolexpr1144;
bool mu__boolexpr1145;
bool mu__boolexpr1146;
bool mu__boolexpr1147;
bool mu__boolexpr1148;
bool mu__boolexpr1149;
bool mu__boolexpr1150;
bool mu__boolexpr1151;
bool mu__boolexpr1152;
bool mu__boolexpr1153;
bool mu__boolexpr1154;
bool mu__boolexpr1155;
  if (!((mu_n1) != (mu_n2))) mu__boolexpr1155 = FALSE ;
  else {
  mu__boolexpr1155 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1155)) mu__boolexpr1154 = FALSE ;
  else {
  mu__boolexpr1154 = ((mu_Routers[mu_n1]) == (0)) ; 
}
  if (!(mu__boolexpr1154)) mu__boolexpr1153 = FALSE ;
  else {
  mu__boolexpr1153 = ((mu_Routers[mu_n2]) == (0)) ; 
}
  if (!(mu__boolexpr1153)) mu__boolexpr1152 = FALSE ;
  else {
  mu__boolexpr1152 = ((mu_Tokens[mu_n1]) > (0)) ; 
}
  if (!(mu__boolexpr1152)) mu__boolexpr1151 = FALSE ;
  else {
  mu__boolexpr1151 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr1151)) mu__boolexpr1150 = FALSE ;
  else {
  mu__boolexpr1150 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1150)) mu__boolexpr1149 = FALSE ;
  else {
  mu__boolexpr1149 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr1149)) mu__boolexpr1148 = FALSE ;
  else {
  mu__boolexpr1148 = ((mu_TailPointers[mu_ExitPath[mu_n4]][mu_n4]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1148)) mu__boolexpr1147 = FALSE ;
  else {
  mu__boolexpr1147 = ((mu_IncomingQueue[mu_n5][mu_EntryPath[mu_n5]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr1147)) mu__boolexpr1146 = FALSE ;
  else {
  mu__boolexpr1146 = ((mu_TailPointers[mu_ExitPath[mu_n5]][mu_n5]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1146)) mu__boolexpr1145 = FALSE ;
  else {
  mu__boolexpr1145 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr1145)) mu__boolexpr1144 = FALSE ;
  else {
  mu__boolexpr1144 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr1144)) mu__boolexpr1143 = FALSE ;
  else {
  mu__boolexpr1143 = ((mu_n1) != (mu_n5)) ; 
}
  if (!(mu__boolexpr1143)) mu__boolexpr1142 = FALSE ;
  else {
  mu__boolexpr1142 = ((mu_n3) != (mu_n4)) ; 
}
  if (!(mu__boolexpr1142)) mu__boolexpr1141 = FALSE ;
  else {
  mu__boolexpr1141 = ((mu_n3) != (mu_n5)) ; 
}
  if (!(mu__boolexpr1141)) mu__boolexpr1140 = FALSE ;
  else {
  mu__boolexpr1140 = ((mu_n4) != (mu_n5)) ; 
}
	      if (mu__boolexpr1140) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 18176;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_347 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_346 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_345 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_344 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_343 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_SendRequest ( (int)mu_n1, mu_ExitPath[mu_n1], (int)mu_n2 );
mu_Tokens[mu_n1] = (mu_Tokens[mu_n1]) - (1);
mu_ProcessRequest ( (int)mu_n3, mu_EntryPath[mu_n3], mu_ExitPath[mu_n3] );
mu_ProcessRequest ( (int)mu_n4, mu_EntryPath[mu_n4], mu_ExitPath[mu_n4] );
mu_ProcessRequest ( (int)mu_n5, mu_EntryPath[mu_n5], mu_ExitPath[mu_n5] );
  };

};
/******************** RuleBase45 ********************/
class RuleBase45
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_342 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_341 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_340 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_339 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_338 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Send request + Process fwd_request + Process response + Process response, n5:%s, n4:%s, n3:%s, n2:%s, n1:%s", mu_n5.Name(), mu_n4.Name(), mu_n3.Name(), mu_n2.Name(), mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_342 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_341 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_340 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_339 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_338 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr1156;
bool mu__boolexpr1157;
bool mu__boolexpr1158;
bool mu__boolexpr1159;
bool mu__boolexpr1160;
bool mu__boolexpr1161;
bool mu__boolexpr1162;
bool mu__boolexpr1163;
bool mu__boolexpr1164;
bool mu__boolexpr1165;
bool mu__boolexpr1166;
bool mu__boolexpr1167;
bool mu__boolexpr1168;
bool mu__boolexpr1169;
  if (!((mu_n1) != (mu_n2))) mu__boolexpr1169 = FALSE ;
  else {
  mu__boolexpr1169 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1169)) mu__boolexpr1168 = FALSE ;
  else {
  mu__boolexpr1168 = ((mu_Routers[mu_n1]) == (0)) ; 
}
  if (!(mu__boolexpr1168)) mu__boolexpr1167 = FALSE ;
  else {
  mu__boolexpr1167 = ((mu_Routers[mu_n2]) == (0)) ; 
}
  if (!(mu__boolexpr1167)) mu__boolexpr1166 = FALSE ;
  else {
  mu__boolexpr1166 = ((mu_Tokens[mu_n1]) > (0)) ; 
}
  if (!(mu__boolexpr1166)) mu__boolexpr1165 = FALSE ;
  else {
  mu__boolexpr1165 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_fwd_request)) ; 
}
  if (!(mu__boolexpr1165)) mu__boolexpr1164 = FALSE ;
  else {
  mu__boolexpr1164 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1164)) mu__boolexpr1163 = FALSE ;
  else {
  mu__boolexpr1163 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr1163)) mu__boolexpr1162 = FALSE ;
  else {
  mu__boolexpr1162 = ((mu_IncomingQueue[mu_n5][mu_EntryPath[mu_n5]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr1162)) mu__boolexpr1161 = FALSE ;
  else {
  mu__boolexpr1161 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr1161)) mu__boolexpr1160 = FALSE ;
  else {
  mu__boolexpr1160 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr1160)) mu__boolexpr1159 = FALSE ;
  else {
  mu__boolexpr1159 = ((mu_n1) != (mu_n5)) ; 
}
  if (!(mu__boolexpr1159)) mu__boolexpr1158 = FALSE ;
  else {
  mu__boolexpr1158 = ((mu_n3) != (mu_n4)) ; 
}
  if (!(mu__boolexpr1158)) mu__boolexpr1157 = FALSE ;
  else {
  mu__boolexpr1157 = ((mu_n3) != (mu_n5)) ; 
}
  if (!(mu__boolexpr1157)) mu__boolexpr1156 = FALSE ;
  else {
  mu__boolexpr1156 = ((mu_n4) != (mu_n5)) ; 
}
    return mu__boolexpr1156;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 19200;
    static mu__subrange_342 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_341 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_340 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_339 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_338 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 20224 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr1170;
bool mu__boolexpr1171;
bool mu__boolexpr1172;
bool mu__boolexpr1173;
bool mu__boolexpr1174;
bool mu__boolexpr1175;
bool mu__boolexpr1176;
bool mu__boolexpr1177;
bool mu__boolexpr1178;
bool mu__boolexpr1179;
bool mu__boolexpr1180;
bool mu__boolexpr1181;
bool mu__boolexpr1182;
bool mu__boolexpr1183;
  if (!((mu_n1) != (mu_n2))) mu__boolexpr1183 = FALSE ;
  else {
  mu__boolexpr1183 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1183)) mu__boolexpr1182 = FALSE ;
  else {
  mu__boolexpr1182 = ((mu_Routers[mu_n1]) == (0)) ; 
}
  if (!(mu__boolexpr1182)) mu__boolexpr1181 = FALSE ;
  else {
  mu__boolexpr1181 = ((mu_Routers[mu_n2]) == (0)) ; 
}
  if (!(mu__boolexpr1181)) mu__boolexpr1180 = FALSE ;
  else {
  mu__boolexpr1180 = ((mu_Tokens[mu_n1]) > (0)) ; 
}
  if (!(mu__boolexpr1180)) mu__boolexpr1179 = FALSE ;
  else {
  mu__boolexpr1179 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_fwd_request)) ; 
}
  if (!(mu__boolexpr1179)) mu__boolexpr1178 = FALSE ;
  else {
  mu__boolexpr1178 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1178)) mu__boolexpr1177 = FALSE ;
  else {
  mu__boolexpr1177 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr1177)) mu__boolexpr1176 = FALSE ;
  else {
  mu__boolexpr1176 = ((mu_IncomingQueue[mu_n5][mu_EntryPath[mu_n5]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr1176)) mu__boolexpr1175 = FALSE ;
  else {
  mu__boolexpr1175 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr1175)) mu__boolexpr1174 = FALSE ;
  else {
  mu__boolexpr1174 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr1174)) mu__boolexpr1173 = FALSE ;
  else {
  mu__boolexpr1173 = ((mu_n1) != (mu_n5)) ; 
}
  if (!(mu__boolexpr1173)) mu__boolexpr1172 = FALSE ;
  else {
  mu__boolexpr1172 = ((mu_n3) != (mu_n4)) ; 
}
  if (!(mu__boolexpr1172)) mu__boolexpr1171 = FALSE ;
  else {
  mu__boolexpr1171 = ((mu_n3) != (mu_n5)) ; 
}
  if (!(mu__boolexpr1171)) mu__boolexpr1170 = FALSE ;
  else {
  mu__boolexpr1170 = ((mu_n4) != (mu_n5)) ; 
}
	      if (mu__boolexpr1170) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 19200;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_342 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_341 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_340 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_339 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_338 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_SendRequest ( (int)mu_n1, mu_ExitPath[mu_n1], (int)mu_n2 );
mu_Tokens[mu_n1] = (mu_Tokens[mu_n1]) - (1);
mu_ProcessFwdRequest ( (int)mu_n3, mu_EntryPath[mu_n3], mu_ExitPath[mu_n3] );
mu_ProcessResponse ( (int)mu_n4, mu_EntryPath[mu_n4] );
mu_Tokens[mu_n4] = (mu_Tokens[mu_n4]) + (1);
mu_ProcessResponse ( (int)mu_n5, mu_EntryPath[mu_n5] );
mu_Tokens[mu_n5] = (mu_Tokens[mu_n5]) + (1);
  };

};
/******************** RuleBase46 ********************/
class RuleBase46
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_337 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_336 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_335 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_334 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_333 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Send request + Process fwd_request + Process fwd_response + Process response, n5:%s, n4:%s, n3:%s, n2:%s, n1:%s", mu_n5.Name(), mu_n4.Name(), mu_n3.Name(), mu_n2.Name(), mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_337 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_336 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_335 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_334 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_333 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr1184;
bool mu__boolexpr1185;
bool mu__boolexpr1186;
bool mu__boolexpr1187;
bool mu__boolexpr1188;
bool mu__boolexpr1189;
bool mu__boolexpr1190;
bool mu__boolexpr1191;
bool mu__boolexpr1192;
bool mu__boolexpr1193;
bool mu__boolexpr1194;
bool mu__boolexpr1195;
bool mu__boolexpr1196;
bool mu__boolexpr1197;
bool mu__boolexpr1198;
  if (!((mu_n1) != (mu_n2))) mu__boolexpr1198 = FALSE ;
  else {
  mu__boolexpr1198 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1198)) mu__boolexpr1197 = FALSE ;
  else {
  mu__boolexpr1197 = ((mu_Routers[mu_n1]) == (0)) ; 
}
  if (!(mu__boolexpr1197)) mu__boolexpr1196 = FALSE ;
  else {
  mu__boolexpr1196 = ((mu_Routers[mu_n2]) == (0)) ; 
}
  if (!(mu__boolexpr1196)) mu__boolexpr1195 = FALSE ;
  else {
  mu__boolexpr1195 = ((mu_Tokens[mu_n1]) > (0)) ; 
}
  if (!(mu__boolexpr1195)) mu__boolexpr1194 = FALSE ;
  else {
  mu__boolexpr1194 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_fwd_request)) ; 
}
  if (!(mu__boolexpr1194)) mu__boolexpr1193 = FALSE ;
  else {
  mu__boolexpr1193 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1193)) mu__boolexpr1192 = FALSE ;
  else {
  mu__boolexpr1192 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr1192)) mu__boolexpr1191 = FALSE ;
  else {
  mu__boolexpr1191 = ((mu_TailPointers[mu_ExitPath[mu_n4]][mu_n4]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1191)) mu__boolexpr1190 = FALSE ;
  else {
  mu__boolexpr1190 = ((mu_IncomingQueue[mu_n5][mu_EntryPath[mu_n5]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr1190)) mu__boolexpr1189 = FALSE ;
  else {
  mu__boolexpr1189 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr1189)) mu__boolexpr1188 = FALSE ;
  else {
  mu__boolexpr1188 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr1188)) mu__boolexpr1187 = FALSE ;
  else {
  mu__boolexpr1187 = ((mu_n1) != (mu_n5)) ; 
}
  if (!(mu__boolexpr1187)) mu__boolexpr1186 = FALSE ;
  else {
  mu__boolexpr1186 = ((mu_n3) != (mu_n4)) ; 
}
  if (!(mu__boolexpr1186)) mu__boolexpr1185 = FALSE ;
  else {
  mu__boolexpr1185 = ((mu_n3) != (mu_n5)) ; 
}
  if (!(mu__boolexpr1185)) mu__boolexpr1184 = FALSE ;
  else {
  mu__boolexpr1184 = ((mu_n4) != (mu_n5)) ; 
}
    return mu__boolexpr1184;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 20224;
    static mu__subrange_337 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_336 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_335 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_334 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_333 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 21248 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr1199;
bool mu__boolexpr1200;
bool mu__boolexpr1201;
bool mu__boolexpr1202;
bool mu__boolexpr1203;
bool mu__boolexpr1204;
bool mu__boolexpr1205;
bool mu__boolexpr1206;
bool mu__boolexpr1207;
bool mu__boolexpr1208;
bool mu__boolexpr1209;
bool mu__boolexpr1210;
bool mu__boolexpr1211;
bool mu__boolexpr1212;
bool mu__boolexpr1213;
  if (!((mu_n1) != (mu_n2))) mu__boolexpr1213 = FALSE ;
  else {
  mu__boolexpr1213 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1213)) mu__boolexpr1212 = FALSE ;
  else {
  mu__boolexpr1212 = ((mu_Routers[mu_n1]) == (0)) ; 
}
  if (!(mu__boolexpr1212)) mu__boolexpr1211 = FALSE ;
  else {
  mu__boolexpr1211 = ((mu_Routers[mu_n2]) == (0)) ; 
}
  if (!(mu__boolexpr1211)) mu__boolexpr1210 = FALSE ;
  else {
  mu__boolexpr1210 = ((mu_Tokens[mu_n1]) > (0)) ; 
}
  if (!(mu__boolexpr1210)) mu__boolexpr1209 = FALSE ;
  else {
  mu__boolexpr1209 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_fwd_request)) ; 
}
  if (!(mu__boolexpr1209)) mu__boolexpr1208 = FALSE ;
  else {
  mu__boolexpr1208 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1208)) mu__boolexpr1207 = FALSE ;
  else {
  mu__boolexpr1207 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr1207)) mu__boolexpr1206 = FALSE ;
  else {
  mu__boolexpr1206 = ((mu_TailPointers[mu_ExitPath[mu_n4]][mu_n4]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1206)) mu__boolexpr1205 = FALSE ;
  else {
  mu__boolexpr1205 = ((mu_IncomingQueue[mu_n5][mu_EntryPath[mu_n5]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr1205)) mu__boolexpr1204 = FALSE ;
  else {
  mu__boolexpr1204 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr1204)) mu__boolexpr1203 = FALSE ;
  else {
  mu__boolexpr1203 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr1203)) mu__boolexpr1202 = FALSE ;
  else {
  mu__boolexpr1202 = ((mu_n1) != (mu_n5)) ; 
}
  if (!(mu__boolexpr1202)) mu__boolexpr1201 = FALSE ;
  else {
  mu__boolexpr1201 = ((mu_n3) != (mu_n4)) ; 
}
  if (!(mu__boolexpr1201)) mu__boolexpr1200 = FALSE ;
  else {
  mu__boolexpr1200 = ((mu_n3) != (mu_n5)) ; 
}
  if (!(mu__boolexpr1200)) mu__boolexpr1199 = FALSE ;
  else {
  mu__boolexpr1199 = ((mu_n4) != (mu_n5)) ; 
}
	      if (mu__boolexpr1199) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 20224;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_337 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_336 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_335 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_334 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_333 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_SendRequest ( (int)mu_n1, mu_ExitPath[mu_n1], (int)mu_n2 );
mu_Tokens[mu_n1] = (mu_Tokens[mu_n1]) - (1);
mu_ProcessFwdRequest ( (int)mu_n3, mu_EntryPath[mu_n3], mu_ExitPath[mu_n3] );
mu_ProcessFwdResponse ( (int)mu_n4, mu_EntryPath[mu_n4], mu_ExitPath[mu_n4] );
mu_ProcessResponse ( (int)mu_n5, mu_EntryPath[mu_n5] );
mu_Tokens[mu_n5] = (mu_Tokens[mu_n5]) + (1);
  };

};
/******************** RuleBase47 ********************/
class RuleBase47
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_332 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_331 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_330 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_329 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_328 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Send request + Process fwd_request + Process fwd_response + Process fwd_response, n5:%s, n4:%s, n3:%s, n2:%s, n1:%s", mu_n5.Name(), mu_n4.Name(), mu_n3.Name(), mu_n2.Name(), mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_332 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_331 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_330 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_329 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_328 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr1214;
bool mu__boolexpr1215;
bool mu__boolexpr1216;
bool mu__boolexpr1217;
bool mu__boolexpr1218;
bool mu__boolexpr1219;
bool mu__boolexpr1220;
bool mu__boolexpr1221;
bool mu__boolexpr1222;
bool mu__boolexpr1223;
bool mu__boolexpr1224;
bool mu__boolexpr1225;
bool mu__boolexpr1226;
bool mu__boolexpr1227;
bool mu__boolexpr1228;
bool mu__boolexpr1229;
  if (!((mu_n1) != (mu_n2))) mu__boolexpr1229 = FALSE ;
  else {
  mu__boolexpr1229 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1229)) mu__boolexpr1228 = FALSE ;
  else {
  mu__boolexpr1228 = ((mu_Routers[mu_n1]) == (0)) ; 
}
  if (!(mu__boolexpr1228)) mu__boolexpr1227 = FALSE ;
  else {
  mu__boolexpr1227 = ((mu_Routers[mu_n2]) == (0)) ; 
}
  if (!(mu__boolexpr1227)) mu__boolexpr1226 = FALSE ;
  else {
  mu__boolexpr1226 = ((mu_Tokens[mu_n1]) > (0)) ; 
}
  if (!(mu__boolexpr1226)) mu__boolexpr1225 = FALSE ;
  else {
  mu__boolexpr1225 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_fwd_request)) ; 
}
  if (!(mu__boolexpr1225)) mu__boolexpr1224 = FALSE ;
  else {
  mu__boolexpr1224 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1224)) mu__boolexpr1223 = FALSE ;
  else {
  mu__boolexpr1223 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr1223)) mu__boolexpr1222 = FALSE ;
  else {
  mu__boolexpr1222 = ((mu_TailPointers[mu_ExitPath[mu_n4]][mu_n4]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1222)) mu__boolexpr1221 = FALSE ;
  else {
  mu__boolexpr1221 = ((mu_IncomingQueue[mu_n5][mu_EntryPath[mu_n5]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr1221)) mu__boolexpr1220 = FALSE ;
  else {
  mu__boolexpr1220 = ((mu_TailPointers[mu_ExitPath[mu_n5]][mu_n5]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1220)) mu__boolexpr1219 = FALSE ;
  else {
  mu__boolexpr1219 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr1219)) mu__boolexpr1218 = FALSE ;
  else {
  mu__boolexpr1218 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr1218)) mu__boolexpr1217 = FALSE ;
  else {
  mu__boolexpr1217 = ((mu_n1) != (mu_n5)) ; 
}
  if (!(mu__boolexpr1217)) mu__boolexpr1216 = FALSE ;
  else {
  mu__boolexpr1216 = ((mu_n3) != (mu_n4)) ; 
}
  if (!(mu__boolexpr1216)) mu__boolexpr1215 = FALSE ;
  else {
  mu__boolexpr1215 = ((mu_n3) != (mu_n5)) ; 
}
  if (!(mu__boolexpr1215)) mu__boolexpr1214 = FALSE ;
  else {
  mu__boolexpr1214 = ((mu_n4) != (mu_n5)) ; 
}
    return mu__boolexpr1214;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 21248;
    static mu__subrange_332 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_331 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_330 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_329 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_328 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 22272 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr1230;
bool mu__boolexpr1231;
bool mu__boolexpr1232;
bool mu__boolexpr1233;
bool mu__boolexpr1234;
bool mu__boolexpr1235;
bool mu__boolexpr1236;
bool mu__boolexpr1237;
bool mu__boolexpr1238;
bool mu__boolexpr1239;
bool mu__boolexpr1240;
bool mu__boolexpr1241;
bool mu__boolexpr1242;
bool mu__boolexpr1243;
bool mu__boolexpr1244;
bool mu__boolexpr1245;
  if (!((mu_n1) != (mu_n2))) mu__boolexpr1245 = FALSE ;
  else {
  mu__boolexpr1245 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1245)) mu__boolexpr1244 = FALSE ;
  else {
  mu__boolexpr1244 = ((mu_Routers[mu_n1]) == (0)) ; 
}
  if (!(mu__boolexpr1244)) mu__boolexpr1243 = FALSE ;
  else {
  mu__boolexpr1243 = ((mu_Routers[mu_n2]) == (0)) ; 
}
  if (!(mu__boolexpr1243)) mu__boolexpr1242 = FALSE ;
  else {
  mu__boolexpr1242 = ((mu_Tokens[mu_n1]) > (0)) ; 
}
  if (!(mu__boolexpr1242)) mu__boolexpr1241 = FALSE ;
  else {
  mu__boolexpr1241 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_fwd_request)) ; 
}
  if (!(mu__boolexpr1241)) mu__boolexpr1240 = FALSE ;
  else {
  mu__boolexpr1240 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1240)) mu__boolexpr1239 = FALSE ;
  else {
  mu__boolexpr1239 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr1239)) mu__boolexpr1238 = FALSE ;
  else {
  mu__boolexpr1238 = ((mu_TailPointers[mu_ExitPath[mu_n4]][mu_n4]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1238)) mu__boolexpr1237 = FALSE ;
  else {
  mu__boolexpr1237 = ((mu_IncomingQueue[mu_n5][mu_EntryPath[mu_n5]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr1237)) mu__boolexpr1236 = FALSE ;
  else {
  mu__boolexpr1236 = ((mu_TailPointers[mu_ExitPath[mu_n5]][mu_n5]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1236)) mu__boolexpr1235 = FALSE ;
  else {
  mu__boolexpr1235 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr1235)) mu__boolexpr1234 = FALSE ;
  else {
  mu__boolexpr1234 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr1234)) mu__boolexpr1233 = FALSE ;
  else {
  mu__boolexpr1233 = ((mu_n1) != (mu_n5)) ; 
}
  if (!(mu__boolexpr1233)) mu__boolexpr1232 = FALSE ;
  else {
  mu__boolexpr1232 = ((mu_n3) != (mu_n4)) ; 
}
  if (!(mu__boolexpr1232)) mu__boolexpr1231 = FALSE ;
  else {
  mu__boolexpr1231 = ((mu_n3) != (mu_n5)) ; 
}
  if (!(mu__boolexpr1231)) mu__boolexpr1230 = FALSE ;
  else {
  mu__boolexpr1230 = ((mu_n4) != (mu_n5)) ; 
}
	      if (mu__boolexpr1230) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 21248;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_332 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_331 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_330 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_329 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_328 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_SendRequest ( (int)mu_n1, mu_ExitPath[mu_n1], (int)mu_n2 );
mu_Tokens[mu_n1] = (mu_Tokens[mu_n1]) - (1);
mu_ProcessFwdRequest ( (int)mu_n3, mu_EntryPath[mu_n3], mu_ExitPath[mu_n3] );
mu_ProcessFwdResponse ( (int)mu_n4, mu_EntryPath[mu_n4], mu_ExitPath[mu_n4] );
mu_ProcessFwdResponse ( (int)mu_n5, mu_EntryPath[mu_n5], mu_ExitPath[mu_n5] );
  };

};
/******************** RuleBase48 ********************/
class RuleBase48
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_327 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_326 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_325 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_324 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_323 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Send request + Process fwd_request + Process request + Process response, n5:%s, n4:%s, n3:%s, n2:%s, n1:%s", mu_n5.Name(), mu_n4.Name(), mu_n3.Name(), mu_n2.Name(), mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_327 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_326 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_325 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_324 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_323 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr1246;
bool mu__boolexpr1247;
bool mu__boolexpr1248;
bool mu__boolexpr1249;
bool mu__boolexpr1250;
bool mu__boolexpr1251;
bool mu__boolexpr1252;
bool mu__boolexpr1253;
bool mu__boolexpr1254;
bool mu__boolexpr1255;
bool mu__boolexpr1256;
bool mu__boolexpr1257;
bool mu__boolexpr1258;
bool mu__boolexpr1259;
bool mu__boolexpr1260;
  if (!((mu_n1) != (mu_n2))) mu__boolexpr1260 = FALSE ;
  else {
  mu__boolexpr1260 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1260)) mu__boolexpr1259 = FALSE ;
  else {
  mu__boolexpr1259 = ((mu_Routers[mu_n1]) == (0)) ; 
}
  if (!(mu__boolexpr1259)) mu__boolexpr1258 = FALSE ;
  else {
  mu__boolexpr1258 = ((mu_Routers[mu_n2]) == (0)) ; 
}
  if (!(mu__boolexpr1258)) mu__boolexpr1257 = FALSE ;
  else {
  mu__boolexpr1257 = ((mu_Tokens[mu_n1]) > (0)) ; 
}
  if (!(mu__boolexpr1257)) mu__boolexpr1256 = FALSE ;
  else {
  mu__boolexpr1256 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_fwd_request)) ; 
}
  if (!(mu__boolexpr1256)) mu__boolexpr1255 = FALSE ;
  else {
  mu__boolexpr1255 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1255)) mu__boolexpr1254 = FALSE ;
  else {
  mu__boolexpr1254 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr1254)) mu__boolexpr1253 = FALSE ;
  else {
  mu__boolexpr1253 = ((mu_TailPointers[mu_ExitPath[mu_n4]][mu_n4]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1253)) mu__boolexpr1252 = FALSE ;
  else {
  mu__boolexpr1252 = ((mu_IncomingQueue[mu_n5][mu_EntryPath[mu_n5]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr1252)) mu__boolexpr1251 = FALSE ;
  else {
  mu__boolexpr1251 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr1251)) mu__boolexpr1250 = FALSE ;
  else {
  mu__boolexpr1250 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr1250)) mu__boolexpr1249 = FALSE ;
  else {
  mu__boolexpr1249 = ((mu_n1) != (mu_n5)) ; 
}
  if (!(mu__boolexpr1249)) mu__boolexpr1248 = FALSE ;
  else {
  mu__boolexpr1248 = ((mu_n3) != (mu_n4)) ; 
}
  if (!(mu__boolexpr1248)) mu__boolexpr1247 = FALSE ;
  else {
  mu__boolexpr1247 = ((mu_n3) != (mu_n5)) ; 
}
  if (!(mu__boolexpr1247)) mu__boolexpr1246 = FALSE ;
  else {
  mu__boolexpr1246 = ((mu_n4) != (mu_n5)) ; 
}
    return mu__boolexpr1246;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 22272;
    static mu__subrange_327 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_326 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_325 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_324 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_323 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 23296 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr1261;
bool mu__boolexpr1262;
bool mu__boolexpr1263;
bool mu__boolexpr1264;
bool mu__boolexpr1265;
bool mu__boolexpr1266;
bool mu__boolexpr1267;
bool mu__boolexpr1268;
bool mu__boolexpr1269;
bool mu__boolexpr1270;
bool mu__boolexpr1271;
bool mu__boolexpr1272;
bool mu__boolexpr1273;
bool mu__boolexpr1274;
bool mu__boolexpr1275;
  if (!((mu_n1) != (mu_n2))) mu__boolexpr1275 = FALSE ;
  else {
  mu__boolexpr1275 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1275)) mu__boolexpr1274 = FALSE ;
  else {
  mu__boolexpr1274 = ((mu_Routers[mu_n1]) == (0)) ; 
}
  if (!(mu__boolexpr1274)) mu__boolexpr1273 = FALSE ;
  else {
  mu__boolexpr1273 = ((mu_Routers[mu_n2]) == (0)) ; 
}
  if (!(mu__boolexpr1273)) mu__boolexpr1272 = FALSE ;
  else {
  mu__boolexpr1272 = ((mu_Tokens[mu_n1]) > (0)) ; 
}
  if (!(mu__boolexpr1272)) mu__boolexpr1271 = FALSE ;
  else {
  mu__boolexpr1271 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_fwd_request)) ; 
}
  if (!(mu__boolexpr1271)) mu__boolexpr1270 = FALSE ;
  else {
  mu__boolexpr1270 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1270)) mu__boolexpr1269 = FALSE ;
  else {
  mu__boolexpr1269 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr1269)) mu__boolexpr1268 = FALSE ;
  else {
  mu__boolexpr1268 = ((mu_TailPointers[mu_ExitPath[mu_n4]][mu_n4]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1268)) mu__boolexpr1267 = FALSE ;
  else {
  mu__boolexpr1267 = ((mu_IncomingQueue[mu_n5][mu_EntryPath[mu_n5]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr1267)) mu__boolexpr1266 = FALSE ;
  else {
  mu__boolexpr1266 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr1266)) mu__boolexpr1265 = FALSE ;
  else {
  mu__boolexpr1265 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr1265)) mu__boolexpr1264 = FALSE ;
  else {
  mu__boolexpr1264 = ((mu_n1) != (mu_n5)) ; 
}
  if (!(mu__boolexpr1264)) mu__boolexpr1263 = FALSE ;
  else {
  mu__boolexpr1263 = ((mu_n3) != (mu_n4)) ; 
}
  if (!(mu__boolexpr1263)) mu__boolexpr1262 = FALSE ;
  else {
  mu__boolexpr1262 = ((mu_n3) != (mu_n5)) ; 
}
  if (!(mu__boolexpr1262)) mu__boolexpr1261 = FALSE ;
  else {
  mu__boolexpr1261 = ((mu_n4) != (mu_n5)) ; 
}
	      if (mu__boolexpr1261) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 22272;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_327 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_326 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_325 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_324 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_323 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_SendRequest ( (int)mu_n1, mu_ExitPath[mu_n1], (int)mu_n2 );
mu_Tokens[mu_n1] = (mu_Tokens[mu_n1]) - (1);
mu_ProcessFwdRequest ( (int)mu_n3, mu_EntryPath[mu_n3], mu_ExitPath[mu_n3] );
mu_ProcessRequest ( (int)mu_n4, mu_EntryPath[mu_n4], mu_ExitPath[mu_n4] );
mu_ProcessResponse ( (int)mu_n5, mu_EntryPath[mu_n5] );
mu_Tokens[mu_n5] = (mu_Tokens[mu_n5]) + (1);
  };

};
/******************** RuleBase49 ********************/
class RuleBase49
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_322 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_321 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_320 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_319 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_318 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Send request + Process fwd_request + Process request + Process fwd_response, n5:%s, n4:%s, n3:%s, n2:%s, n1:%s", mu_n5.Name(), mu_n4.Name(), mu_n3.Name(), mu_n2.Name(), mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_322 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_321 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_320 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_319 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_318 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr1276;
bool mu__boolexpr1277;
bool mu__boolexpr1278;
bool mu__boolexpr1279;
bool mu__boolexpr1280;
bool mu__boolexpr1281;
bool mu__boolexpr1282;
bool mu__boolexpr1283;
bool mu__boolexpr1284;
bool mu__boolexpr1285;
bool mu__boolexpr1286;
bool mu__boolexpr1287;
bool mu__boolexpr1288;
bool mu__boolexpr1289;
bool mu__boolexpr1290;
bool mu__boolexpr1291;
  if (!((mu_n1) != (mu_n2))) mu__boolexpr1291 = FALSE ;
  else {
  mu__boolexpr1291 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1291)) mu__boolexpr1290 = FALSE ;
  else {
  mu__boolexpr1290 = ((mu_Routers[mu_n1]) == (0)) ; 
}
  if (!(mu__boolexpr1290)) mu__boolexpr1289 = FALSE ;
  else {
  mu__boolexpr1289 = ((mu_Routers[mu_n2]) == (0)) ; 
}
  if (!(mu__boolexpr1289)) mu__boolexpr1288 = FALSE ;
  else {
  mu__boolexpr1288 = ((mu_Tokens[mu_n1]) > (0)) ; 
}
  if (!(mu__boolexpr1288)) mu__boolexpr1287 = FALSE ;
  else {
  mu__boolexpr1287 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_fwd_request)) ; 
}
  if (!(mu__boolexpr1287)) mu__boolexpr1286 = FALSE ;
  else {
  mu__boolexpr1286 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1286)) mu__boolexpr1285 = FALSE ;
  else {
  mu__boolexpr1285 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr1285)) mu__boolexpr1284 = FALSE ;
  else {
  mu__boolexpr1284 = ((mu_TailPointers[mu_ExitPath[mu_n4]][mu_n4]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1284)) mu__boolexpr1283 = FALSE ;
  else {
  mu__boolexpr1283 = ((mu_IncomingQueue[mu_n5][mu_EntryPath[mu_n5]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr1283)) mu__boolexpr1282 = FALSE ;
  else {
  mu__boolexpr1282 = ((mu_TailPointers[mu_ExitPath[mu_n5]][mu_n5]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1282)) mu__boolexpr1281 = FALSE ;
  else {
  mu__boolexpr1281 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr1281)) mu__boolexpr1280 = FALSE ;
  else {
  mu__boolexpr1280 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr1280)) mu__boolexpr1279 = FALSE ;
  else {
  mu__boolexpr1279 = ((mu_n1) != (mu_n5)) ; 
}
  if (!(mu__boolexpr1279)) mu__boolexpr1278 = FALSE ;
  else {
  mu__boolexpr1278 = ((mu_n3) != (mu_n4)) ; 
}
  if (!(mu__boolexpr1278)) mu__boolexpr1277 = FALSE ;
  else {
  mu__boolexpr1277 = ((mu_n3) != (mu_n5)) ; 
}
  if (!(mu__boolexpr1277)) mu__boolexpr1276 = FALSE ;
  else {
  mu__boolexpr1276 = ((mu_n4) != (mu_n5)) ; 
}
    return mu__boolexpr1276;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 23296;
    static mu__subrange_322 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_321 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_320 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_319 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_318 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 24320 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr1292;
bool mu__boolexpr1293;
bool mu__boolexpr1294;
bool mu__boolexpr1295;
bool mu__boolexpr1296;
bool mu__boolexpr1297;
bool mu__boolexpr1298;
bool mu__boolexpr1299;
bool mu__boolexpr1300;
bool mu__boolexpr1301;
bool mu__boolexpr1302;
bool mu__boolexpr1303;
bool mu__boolexpr1304;
bool mu__boolexpr1305;
bool mu__boolexpr1306;
bool mu__boolexpr1307;
  if (!((mu_n1) != (mu_n2))) mu__boolexpr1307 = FALSE ;
  else {
  mu__boolexpr1307 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1307)) mu__boolexpr1306 = FALSE ;
  else {
  mu__boolexpr1306 = ((mu_Routers[mu_n1]) == (0)) ; 
}
  if (!(mu__boolexpr1306)) mu__boolexpr1305 = FALSE ;
  else {
  mu__boolexpr1305 = ((mu_Routers[mu_n2]) == (0)) ; 
}
  if (!(mu__boolexpr1305)) mu__boolexpr1304 = FALSE ;
  else {
  mu__boolexpr1304 = ((mu_Tokens[mu_n1]) > (0)) ; 
}
  if (!(mu__boolexpr1304)) mu__boolexpr1303 = FALSE ;
  else {
  mu__boolexpr1303 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_fwd_request)) ; 
}
  if (!(mu__boolexpr1303)) mu__boolexpr1302 = FALSE ;
  else {
  mu__boolexpr1302 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1302)) mu__boolexpr1301 = FALSE ;
  else {
  mu__boolexpr1301 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr1301)) mu__boolexpr1300 = FALSE ;
  else {
  mu__boolexpr1300 = ((mu_TailPointers[mu_ExitPath[mu_n4]][mu_n4]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1300)) mu__boolexpr1299 = FALSE ;
  else {
  mu__boolexpr1299 = ((mu_IncomingQueue[mu_n5][mu_EntryPath[mu_n5]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr1299)) mu__boolexpr1298 = FALSE ;
  else {
  mu__boolexpr1298 = ((mu_TailPointers[mu_ExitPath[mu_n5]][mu_n5]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1298)) mu__boolexpr1297 = FALSE ;
  else {
  mu__boolexpr1297 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr1297)) mu__boolexpr1296 = FALSE ;
  else {
  mu__boolexpr1296 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr1296)) mu__boolexpr1295 = FALSE ;
  else {
  mu__boolexpr1295 = ((mu_n1) != (mu_n5)) ; 
}
  if (!(mu__boolexpr1295)) mu__boolexpr1294 = FALSE ;
  else {
  mu__boolexpr1294 = ((mu_n3) != (mu_n4)) ; 
}
  if (!(mu__boolexpr1294)) mu__boolexpr1293 = FALSE ;
  else {
  mu__boolexpr1293 = ((mu_n3) != (mu_n5)) ; 
}
  if (!(mu__boolexpr1293)) mu__boolexpr1292 = FALSE ;
  else {
  mu__boolexpr1292 = ((mu_n4) != (mu_n5)) ; 
}
	      if (mu__boolexpr1292) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 23296;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_322 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_321 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_320 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_319 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_318 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_SendRequest ( (int)mu_n1, mu_ExitPath[mu_n1], (int)mu_n2 );
mu_Tokens[mu_n1] = (mu_Tokens[mu_n1]) - (1);
mu_ProcessFwdRequest ( (int)mu_n3, mu_EntryPath[mu_n3], mu_ExitPath[mu_n3] );
mu_ProcessRequest ( (int)mu_n4, mu_EntryPath[mu_n4], mu_ExitPath[mu_n4] );
mu_ProcessFwdResponse ( (int)mu_n5, mu_EntryPath[mu_n5], mu_ExitPath[mu_n5] );
  };

};
/******************** RuleBase50 ********************/
class RuleBase50
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_317 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_316 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_315 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_314 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_313 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Send request + Process fwd_request + Process request + Process request, n5:%s, n4:%s, n3:%s, n2:%s, n1:%s", mu_n5.Name(), mu_n4.Name(), mu_n3.Name(), mu_n2.Name(), mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_317 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_316 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_315 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_314 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_313 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr1308;
bool mu__boolexpr1309;
bool mu__boolexpr1310;
bool mu__boolexpr1311;
bool mu__boolexpr1312;
bool mu__boolexpr1313;
bool mu__boolexpr1314;
bool mu__boolexpr1315;
bool mu__boolexpr1316;
bool mu__boolexpr1317;
bool mu__boolexpr1318;
bool mu__boolexpr1319;
bool mu__boolexpr1320;
bool mu__boolexpr1321;
bool mu__boolexpr1322;
bool mu__boolexpr1323;
  if (!((mu_n1) != (mu_n2))) mu__boolexpr1323 = FALSE ;
  else {
  mu__boolexpr1323 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1323)) mu__boolexpr1322 = FALSE ;
  else {
  mu__boolexpr1322 = ((mu_Routers[mu_n1]) == (0)) ; 
}
  if (!(mu__boolexpr1322)) mu__boolexpr1321 = FALSE ;
  else {
  mu__boolexpr1321 = ((mu_Routers[mu_n2]) == (0)) ; 
}
  if (!(mu__boolexpr1321)) mu__boolexpr1320 = FALSE ;
  else {
  mu__boolexpr1320 = ((mu_Tokens[mu_n1]) > (0)) ; 
}
  if (!(mu__boolexpr1320)) mu__boolexpr1319 = FALSE ;
  else {
  mu__boolexpr1319 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_fwd_request)) ; 
}
  if (!(mu__boolexpr1319)) mu__boolexpr1318 = FALSE ;
  else {
  mu__boolexpr1318 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1318)) mu__boolexpr1317 = FALSE ;
  else {
  mu__boolexpr1317 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr1317)) mu__boolexpr1316 = FALSE ;
  else {
  mu__boolexpr1316 = ((mu_TailPointers[mu_ExitPath[mu_n4]][mu_n4]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1316)) mu__boolexpr1315 = FALSE ;
  else {
  mu__boolexpr1315 = ((mu_IncomingQueue[mu_n5][mu_EntryPath[mu_n5]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr1315)) mu__boolexpr1314 = FALSE ;
  else {
  mu__boolexpr1314 = ((mu_TailPointers[mu_ExitPath[mu_n5]][mu_n5]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1314)) mu__boolexpr1313 = FALSE ;
  else {
  mu__boolexpr1313 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr1313)) mu__boolexpr1312 = FALSE ;
  else {
  mu__boolexpr1312 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr1312)) mu__boolexpr1311 = FALSE ;
  else {
  mu__boolexpr1311 = ((mu_n1) != (mu_n5)) ; 
}
  if (!(mu__boolexpr1311)) mu__boolexpr1310 = FALSE ;
  else {
  mu__boolexpr1310 = ((mu_n3) != (mu_n4)) ; 
}
  if (!(mu__boolexpr1310)) mu__boolexpr1309 = FALSE ;
  else {
  mu__boolexpr1309 = ((mu_n3) != (mu_n5)) ; 
}
  if (!(mu__boolexpr1309)) mu__boolexpr1308 = FALSE ;
  else {
  mu__boolexpr1308 = ((mu_n4) != (mu_n5)) ; 
}
    return mu__boolexpr1308;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 24320;
    static mu__subrange_317 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_316 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_315 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_314 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_313 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 25344 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr1324;
bool mu__boolexpr1325;
bool mu__boolexpr1326;
bool mu__boolexpr1327;
bool mu__boolexpr1328;
bool mu__boolexpr1329;
bool mu__boolexpr1330;
bool mu__boolexpr1331;
bool mu__boolexpr1332;
bool mu__boolexpr1333;
bool mu__boolexpr1334;
bool mu__boolexpr1335;
bool mu__boolexpr1336;
bool mu__boolexpr1337;
bool mu__boolexpr1338;
bool mu__boolexpr1339;
  if (!((mu_n1) != (mu_n2))) mu__boolexpr1339 = FALSE ;
  else {
  mu__boolexpr1339 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1339)) mu__boolexpr1338 = FALSE ;
  else {
  mu__boolexpr1338 = ((mu_Routers[mu_n1]) == (0)) ; 
}
  if (!(mu__boolexpr1338)) mu__boolexpr1337 = FALSE ;
  else {
  mu__boolexpr1337 = ((mu_Routers[mu_n2]) == (0)) ; 
}
  if (!(mu__boolexpr1337)) mu__boolexpr1336 = FALSE ;
  else {
  mu__boolexpr1336 = ((mu_Tokens[mu_n1]) > (0)) ; 
}
  if (!(mu__boolexpr1336)) mu__boolexpr1335 = FALSE ;
  else {
  mu__boolexpr1335 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_fwd_request)) ; 
}
  if (!(mu__boolexpr1335)) mu__boolexpr1334 = FALSE ;
  else {
  mu__boolexpr1334 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1334)) mu__boolexpr1333 = FALSE ;
  else {
  mu__boolexpr1333 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr1333)) mu__boolexpr1332 = FALSE ;
  else {
  mu__boolexpr1332 = ((mu_TailPointers[mu_ExitPath[mu_n4]][mu_n4]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1332)) mu__boolexpr1331 = FALSE ;
  else {
  mu__boolexpr1331 = ((mu_IncomingQueue[mu_n5][mu_EntryPath[mu_n5]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr1331)) mu__boolexpr1330 = FALSE ;
  else {
  mu__boolexpr1330 = ((mu_TailPointers[mu_ExitPath[mu_n5]][mu_n5]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1330)) mu__boolexpr1329 = FALSE ;
  else {
  mu__boolexpr1329 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr1329)) mu__boolexpr1328 = FALSE ;
  else {
  mu__boolexpr1328 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr1328)) mu__boolexpr1327 = FALSE ;
  else {
  mu__boolexpr1327 = ((mu_n1) != (mu_n5)) ; 
}
  if (!(mu__boolexpr1327)) mu__boolexpr1326 = FALSE ;
  else {
  mu__boolexpr1326 = ((mu_n3) != (mu_n4)) ; 
}
  if (!(mu__boolexpr1326)) mu__boolexpr1325 = FALSE ;
  else {
  mu__boolexpr1325 = ((mu_n3) != (mu_n5)) ; 
}
  if (!(mu__boolexpr1325)) mu__boolexpr1324 = FALSE ;
  else {
  mu__boolexpr1324 = ((mu_n4) != (mu_n5)) ; 
}
	      if (mu__boolexpr1324) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 24320;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_317 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_316 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_315 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_314 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_313 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_SendRequest ( (int)mu_n1, mu_ExitPath[mu_n1], (int)mu_n2 );
mu_Tokens[mu_n1] = (mu_Tokens[mu_n1]) - (1);
mu_ProcessFwdRequest ( (int)mu_n3, mu_EntryPath[mu_n3], mu_ExitPath[mu_n3] );
mu_ProcessRequest ( (int)mu_n4, mu_EntryPath[mu_n4], mu_ExitPath[mu_n4] );
mu_ProcessRequest ( (int)mu_n5, mu_EntryPath[mu_n5], mu_ExitPath[mu_n5] );
  };

};
/******************** RuleBase51 ********************/
class RuleBase51
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_312 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_311 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_310 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_309 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_308 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Send request + Process fwd_request + Process fwd_request + Process response, n5:%s, n4:%s, n3:%s, n2:%s, n1:%s", mu_n5.Name(), mu_n4.Name(), mu_n3.Name(), mu_n2.Name(), mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_312 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_311 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_310 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_309 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_308 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr1340;
bool mu__boolexpr1341;
bool mu__boolexpr1342;
bool mu__boolexpr1343;
bool mu__boolexpr1344;
bool mu__boolexpr1345;
bool mu__boolexpr1346;
bool mu__boolexpr1347;
bool mu__boolexpr1348;
bool mu__boolexpr1349;
bool mu__boolexpr1350;
bool mu__boolexpr1351;
bool mu__boolexpr1352;
bool mu__boolexpr1353;
bool mu__boolexpr1354;
  if (!((mu_n1) != (mu_n2))) mu__boolexpr1354 = FALSE ;
  else {
  mu__boolexpr1354 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1354)) mu__boolexpr1353 = FALSE ;
  else {
  mu__boolexpr1353 = ((mu_Routers[mu_n1]) == (0)) ; 
}
  if (!(mu__boolexpr1353)) mu__boolexpr1352 = FALSE ;
  else {
  mu__boolexpr1352 = ((mu_Routers[mu_n2]) == (0)) ; 
}
  if (!(mu__boolexpr1352)) mu__boolexpr1351 = FALSE ;
  else {
  mu__boolexpr1351 = ((mu_Tokens[mu_n1]) > (0)) ; 
}
  if (!(mu__boolexpr1351)) mu__boolexpr1350 = FALSE ;
  else {
  mu__boolexpr1350 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_fwd_request)) ; 
}
  if (!(mu__boolexpr1350)) mu__boolexpr1349 = FALSE ;
  else {
  mu__boolexpr1349 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1349)) mu__boolexpr1348 = FALSE ;
  else {
  mu__boolexpr1348 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_fwd_request)) ; 
}
  if (!(mu__boolexpr1348)) mu__boolexpr1347 = FALSE ;
  else {
  mu__boolexpr1347 = ((mu_TailPointers[mu_ExitPath[mu_n4]][mu_n4]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1347)) mu__boolexpr1346 = FALSE ;
  else {
  mu__boolexpr1346 = ((mu_IncomingQueue[mu_n5][mu_EntryPath[mu_n5]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr1346)) mu__boolexpr1345 = FALSE ;
  else {
  mu__boolexpr1345 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr1345)) mu__boolexpr1344 = FALSE ;
  else {
  mu__boolexpr1344 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr1344)) mu__boolexpr1343 = FALSE ;
  else {
  mu__boolexpr1343 = ((mu_n1) != (mu_n5)) ; 
}
  if (!(mu__boolexpr1343)) mu__boolexpr1342 = FALSE ;
  else {
  mu__boolexpr1342 = ((mu_n3) != (mu_n4)) ; 
}
  if (!(mu__boolexpr1342)) mu__boolexpr1341 = FALSE ;
  else {
  mu__boolexpr1341 = ((mu_n3) != (mu_n5)) ; 
}
  if (!(mu__boolexpr1341)) mu__boolexpr1340 = FALSE ;
  else {
  mu__boolexpr1340 = ((mu_n4) != (mu_n5)) ; 
}
    return mu__boolexpr1340;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 25344;
    static mu__subrange_312 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_311 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_310 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_309 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_308 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 26368 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr1355;
bool mu__boolexpr1356;
bool mu__boolexpr1357;
bool mu__boolexpr1358;
bool mu__boolexpr1359;
bool mu__boolexpr1360;
bool mu__boolexpr1361;
bool mu__boolexpr1362;
bool mu__boolexpr1363;
bool mu__boolexpr1364;
bool mu__boolexpr1365;
bool mu__boolexpr1366;
bool mu__boolexpr1367;
bool mu__boolexpr1368;
bool mu__boolexpr1369;
  if (!((mu_n1) != (mu_n2))) mu__boolexpr1369 = FALSE ;
  else {
  mu__boolexpr1369 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1369)) mu__boolexpr1368 = FALSE ;
  else {
  mu__boolexpr1368 = ((mu_Routers[mu_n1]) == (0)) ; 
}
  if (!(mu__boolexpr1368)) mu__boolexpr1367 = FALSE ;
  else {
  mu__boolexpr1367 = ((mu_Routers[mu_n2]) == (0)) ; 
}
  if (!(mu__boolexpr1367)) mu__boolexpr1366 = FALSE ;
  else {
  mu__boolexpr1366 = ((mu_Tokens[mu_n1]) > (0)) ; 
}
  if (!(mu__boolexpr1366)) mu__boolexpr1365 = FALSE ;
  else {
  mu__boolexpr1365 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_fwd_request)) ; 
}
  if (!(mu__boolexpr1365)) mu__boolexpr1364 = FALSE ;
  else {
  mu__boolexpr1364 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1364)) mu__boolexpr1363 = FALSE ;
  else {
  mu__boolexpr1363 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_fwd_request)) ; 
}
  if (!(mu__boolexpr1363)) mu__boolexpr1362 = FALSE ;
  else {
  mu__boolexpr1362 = ((mu_TailPointers[mu_ExitPath[mu_n4]][mu_n4]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1362)) mu__boolexpr1361 = FALSE ;
  else {
  mu__boolexpr1361 = ((mu_IncomingQueue[mu_n5][mu_EntryPath[mu_n5]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr1361)) mu__boolexpr1360 = FALSE ;
  else {
  mu__boolexpr1360 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr1360)) mu__boolexpr1359 = FALSE ;
  else {
  mu__boolexpr1359 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr1359)) mu__boolexpr1358 = FALSE ;
  else {
  mu__boolexpr1358 = ((mu_n1) != (mu_n5)) ; 
}
  if (!(mu__boolexpr1358)) mu__boolexpr1357 = FALSE ;
  else {
  mu__boolexpr1357 = ((mu_n3) != (mu_n4)) ; 
}
  if (!(mu__boolexpr1357)) mu__boolexpr1356 = FALSE ;
  else {
  mu__boolexpr1356 = ((mu_n3) != (mu_n5)) ; 
}
  if (!(mu__boolexpr1356)) mu__boolexpr1355 = FALSE ;
  else {
  mu__boolexpr1355 = ((mu_n4) != (mu_n5)) ; 
}
	      if (mu__boolexpr1355) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 25344;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_312 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_311 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_310 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_309 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_308 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_SendRequest ( (int)mu_n1, mu_ExitPath[mu_n1], (int)mu_n2 );
mu_Tokens[mu_n1] = (mu_Tokens[mu_n1]) - (1);
mu_ProcessFwdRequest ( (int)mu_n3, mu_EntryPath[mu_n3], mu_ExitPath[mu_n3] );
mu_ProcessFwdRequest ( (int)mu_n4, mu_EntryPath[mu_n4], mu_ExitPath[mu_n4] );
mu_ProcessResponse ( (int)mu_n5, mu_EntryPath[mu_n5] );
mu_Tokens[mu_n5] = (mu_Tokens[mu_n5]) + (1);
  };

};
/******************** RuleBase52 ********************/
class RuleBase52
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_307 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_306 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_305 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_304 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_303 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Send request + Process fwd_request + Process fwd_request + Process fwd_response, n5:%s, n4:%s, n3:%s, n2:%s, n1:%s", mu_n5.Name(), mu_n4.Name(), mu_n3.Name(), mu_n2.Name(), mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_307 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_306 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_305 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_304 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_303 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr1370;
bool mu__boolexpr1371;
bool mu__boolexpr1372;
bool mu__boolexpr1373;
bool mu__boolexpr1374;
bool mu__boolexpr1375;
bool mu__boolexpr1376;
bool mu__boolexpr1377;
bool mu__boolexpr1378;
bool mu__boolexpr1379;
bool mu__boolexpr1380;
bool mu__boolexpr1381;
bool mu__boolexpr1382;
bool mu__boolexpr1383;
bool mu__boolexpr1384;
bool mu__boolexpr1385;
  if (!((mu_n1) != (mu_n2))) mu__boolexpr1385 = FALSE ;
  else {
  mu__boolexpr1385 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1385)) mu__boolexpr1384 = FALSE ;
  else {
  mu__boolexpr1384 = ((mu_Routers[mu_n1]) == (0)) ; 
}
  if (!(mu__boolexpr1384)) mu__boolexpr1383 = FALSE ;
  else {
  mu__boolexpr1383 = ((mu_Routers[mu_n2]) == (0)) ; 
}
  if (!(mu__boolexpr1383)) mu__boolexpr1382 = FALSE ;
  else {
  mu__boolexpr1382 = ((mu_Tokens[mu_n1]) > (0)) ; 
}
  if (!(mu__boolexpr1382)) mu__boolexpr1381 = FALSE ;
  else {
  mu__boolexpr1381 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_fwd_request)) ; 
}
  if (!(mu__boolexpr1381)) mu__boolexpr1380 = FALSE ;
  else {
  mu__boolexpr1380 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1380)) mu__boolexpr1379 = FALSE ;
  else {
  mu__boolexpr1379 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_fwd_request)) ; 
}
  if (!(mu__boolexpr1379)) mu__boolexpr1378 = FALSE ;
  else {
  mu__boolexpr1378 = ((mu_TailPointers[mu_ExitPath[mu_n4]][mu_n4]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1378)) mu__boolexpr1377 = FALSE ;
  else {
  mu__boolexpr1377 = ((mu_IncomingQueue[mu_n5][mu_EntryPath[mu_n5]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr1377)) mu__boolexpr1376 = FALSE ;
  else {
  mu__boolexpr1376 = ((mu_TailPointers[mu_ExitPath[mu_n5]][mu_n5]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1376)) mu__boolexpr1375 = FALSE ;
  else {
  mu__boolexpr1375 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr1375)) mu__boolexpr1374 = FALSE ;
  else {
  mu__boolexpr1374 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr1374)) mu__boolexpr1373 = FALSE ;
  else {
  mu__boolexpr1373 = ((mu_n1) != (mu_n5)) ; 
}
  if (!(mu__boolexpr1373)) mu__boolexpr1372 = FALSE ;
  else {
  mu__boolexpr1372 = ((mu_n3) != (mu_n4)) ; 
}
  if (!(mu__boolexpr1372)) mu__boolexpr1371 = FALSE ;
  else {
  mu__boolexpr1371 = ((mu_n3) != (mu_n5)) ; 
}
  if (!(mu__boolexpr1371)) mu__boolexpr1370 = FALSE ;
  else {
  mu__boolexpr1370 = ((mu_n4) != (mu_n5)) ; 
}
    return mu__boolexpr1370;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 26368;
    static mu__subrange_307 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_306 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_305 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_304 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_303 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 27392 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr1386;
bool mu__boolexpr1387;
bool mu__boolexpr1388;
bool mu__boolexpr1389;
bool mu__boolexpr1390;
bool mu__boolexpr1391;
bool mu__boolexpr1392;
bool mu__boolexpr1393;
bool mu__boolexpr1394;
bool mu__boolexpr1395;
bool mu__boolexpr1396;
bool mu__boolexpr1397;
bool mu__boolexpr1398;
bool mu__boolexpr1399;
bool mu__boolexpr1400;
bool mu__boolexpr1401;
  if (!((mu_n1) != (mu_n2))) mu__boolexpr1401 = FALSE ;
  else {
  mu__boolexpr1401 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1401)) mu__boolexpr1400 = FALSE ;
  else {
  mu__boolexpr1400 = ((mu_Routers[mu_n1]) == (0)) ; 
}
  if (!(mu__boolexpr1400)) mu__boolexpr1399 = FALSE ;
  else {
  mu__boolexpr1399 = ((mu_Routers[mu_n2]) == (0)) ; 
}
  if (!(mu__boolexpr1399)) mu__boolexpr1398 = FALSE ;
  else {
  mu__boolexpr1398 = ((mu_Tokens[mu_n1]) > (0)) ; 
}
  if (!(mu__boolexpr1398)) mu__boolexpr1397 = FALSE ;
  else {
  mu__boolexpr1397 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_fwd_request)) ; 
}
  if (!(mu__boolexpr1397)) mu__boolexpr1396 = FALSE ;
  else {
  mu__boolexpr1396 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1396)) mu__boolexpr1395 = FALSE ;
  else {
  mu__boolexpr1395 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_fwd_request)) ; 
}
  if (!(mu__boolexpr1395)) mu__boolexpr1394 = FALSE ;
  else {
  mu__boolexpr1394 = ((mu_TailPointers[mu_ExitPath[mu_n4]][mu_n4]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1394)) mu__boolexpr1393 = FALSE ;
  else {
  mu__boolexpr1393 = ((mu_IncomingQueue[mu_n5][mu_EntryPath[mu_n5]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr1393)) mu__boolexpr1392 = FALSE ;
  else {
  mu__boolexpr1392 = ((mu_TailPointers[mu_ExitPath[mu_n5]][mu_n5]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1392)) mu__boolexpr1391 = FALSE ;
  else {
  mu__boolexpr1391 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr1391)) mu__boolexpr1390 = FALSE ;
  else {
  mu__boolexpr1390 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr1390)) mu__boolexpr1389 = FALSE ;
  else {
  mu__boolexpr1389 = ((mu_n1) != (mu_n5)) ; 
}
  if (!(mu__boolexpr1389)) mu__boolexpr1388 = FALSE ;
  else {
  mu__boolexpr1388 = ((mu_n3) != (mu_n4)) ; 
}
  if (!(mu__boolexpr1388)) mu__boolexpr1387 = FALSE ;
  else {
  mu__boolexpr1387 = ((mu_n3) != (mu_n5)) ; 
}
  if (!(mu__boolexpr1387)) mu__boolexpr1386 = FALSE ;
  else {
  mu__boolexpr1386 = ((mu_n4) != (mu_n5)) ; 
}
	      if (mu__boolexpr1386) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 26368;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_307 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_306 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_305 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_304 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_303 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_SendRequest ( (int)mu_n1, mu_ExitPath[mu_n1], (int)mu_n2 );
mu_Tokens[mu_n1] = (mu_Tokens[mu_n1]) - (1);
mu_ProcessFwdRequest ( (int)mu_n3, mu_EntryPath[mu_n3], mu_ExitPath[mu_n3] );
mu_ProcessFwdRequest ( (int)mu_n4, mu_EntryPath[mu_n4], mu_ExitPath[mu_n4] );
mu_ProcessFwdResponse ( (int)mu_n5, mu_EntryPath[mu_n5], mu_ExitPath[mu_n5] );
  };

};
/******************** RuleBase53 ********************/
class RuleBase53
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_302 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_301 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_300 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_299 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_298 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Send request + Process fwd_request + Process fwd_request + Process request, n5:%s, n4:%s, n3:%s, n2:%s, n1:%s", mu_n5.Name(), mu_n4.Name(), mu_n3.Name(), mu_n2.Name(), mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_302 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_301 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_300 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_299 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_298 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr1402;
bool mu__boolexpr1403;
bool mu__boolexpr1404;
bool mu__boolexpr1405;
bool mu__boolexpr1406;
bool mu__boolexpr1407;
bool mu__boolexpr1408;
bool mu__boolexpr1409;
bool mu__boolexpr1410;
bool mu__boolexpr1411;
bool mu__boolexpr1412;
bool mu__boolexpr1413;
bool mu__boolexpr1414;
bool mu__boolexpr1415;
bool mu__boolexpr1416;
bool mu__boolexpr1417;
  if (!((mu_n1) != (mu_n2))) mu__boolexpr1417 = FALSE ;
  else {
  mu__boolexpr1417 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1417)) mu__boolexpr1416 = FALSE ;
  else {
  mu__boolexpr1416 = ((mu_Routers[mu_n1]) == (0)) ; 
}
  if (!(mu__boolexpr1416)) mu__boolexpr1415 = FALSE ;
  else {
  mu__boolexpr1415 = ((mu_Routers[mu_n2]) == (0)) ; 
}
  if (!(mu__boolexpr1415)) mu__boolexpr1414 = FALSE ;
  else {
  mu__boolexpr1414 = ((mu_Tokens[mu_n1]) > (0)) ; 
}
  if (!(mu__boolexpr1414)) mu__boolexpr1413 = FALSE ;
  else {
  mu__boolexpr1413 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_fwd_request)) ; 
}
  if (!(mu__boolexpr1413)) mu__boolexpr1412 = FALSE ;
  else {
  mu__boolexpr1412 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1412)) mu__boolexpr1411 = FALSE ;
  else {
  mu__boolexpr1411 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_fwd_request)) ; 
}
  if (!(mu__boolexpr1411)) mu__boolexpr1410 = FALSE ;
  else {
  mu__boolexpr1410 = ((mu_TailPointers[mu_ExitPath[mu_n4]][mu_n4]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1410)) mu__boolexpr1409 = FALSE ;
  else {
  mu__boolexpr1409 = ((mu_IncomingQueue[mu_n5][mu_EntryPath[mu_n5]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr1409)) mu__boolexpr1408 = FALSE ;
  else {
  mu__boolexpr1408 = ((mu_TailPointers[mu_ExitPath[mu_n5]][mu_n5]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1408)) mu__boolexpr1407 = FALSE ;
  else {
  mu__boolexpr1407 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr1407)) mu__boolexpr1406 = FALSE ;
  else {
  mu__boolexpr1406 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr1406)) mu__boolexpr1405 = FALSE ;
  else {
  mu__boolexpr1405 = ((mu_n1) != (mu_n5)) ; 
}
  if (!(mu__boolexpr1405)) mu__boolexpr1404 = FALSE ;
  else {
  mu__boolexpr1404 = ((mu_n3) != (mu_n4)) ; 
}
  if (!(mu__boolexpr1404)) mu__boolexpr1403 = FALSE ;
  else {
  mu__boolexpr1403 = ((mu_n3) != (mu_n5)) ; 
}
  if (!(mu__boolexpr1403)) mu__boolexpr1402 = FALSE ;
  else {
  mu__boolexpr1402 = ((mu_n4) != (mu_n5)) ; 
}
    return mu__boolexpr1402;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 27392;
    static mu__subrange_302 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_301 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_300 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_299 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_298 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 28416 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr1418;
bool mu__boolexpr1419;
bool mu__boolexpr1420;
bool mu__boolexpr1421;
bool mu__boolexpr1422;
bool mu__boolexpr1423;
bool mu__boolexpr1424;
bool mu__boolexpr1425;
bool mu__boolexpr1426;
bool mu__boolexpr1427;
bool mu__boolexpr1428;
bool mu__boolexpr1429;
bool mu__boolexpr1430;
bool mu__boolexpr1431;
bool mu__boolexpr1432;
bool mu__boolexpr1433;
  if (!((mu_n1) != (mu_n2))) mu__boolexpr1433 = FALSE ;
  else {
  mu__boolexpr1433 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1433)) mu__boolexpr1432 = FALSE ;
  else {
  mu__boolexpr1432 = ((mu_Routers[mu_n1]) == (0)) ; 
}
  if (!(mu__boolexpr1432)) mu__boolexpr1431 = FALSE ;
  else {
  mu__boolexpr1431 = ((mu_Routers[mu_n2]) == (0)) ; 
}
  if (!(mu__boolexpr1431)) mu__boolexpr1430 = FALSE ;
  else {
  mu__boolexpr1430 = ((mu_Tokens[mu_n1]) > (0)) ; 
}
  if (!(mu__boolexpr1430)) mu__boolexpr1429 = FALSE ;
  else {
  mu__boolexpr1429 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_fwd_request)) ; 
}
  if (!(mu__boolexpr1429)) mu__boolexpr1428 = FALSE ;
  else {
  mu__boolexpr1428 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1428)) mu__boolexpr1427 = FALSE ;
  else {
  mu__boolexpr1427 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_fwd_request)) ; 
}
  if (!(mu__boolexpr1427)) mu__boolexpr1426 = FALSE ;
  else {
  mu__boolexpr1426 = ((mu_TailPointers[mu_ExitPath[mu_n4]][mu_n4]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1426)) mu__boolexpr1425 = FALSE ;
  else {
  mu__boolexpr1425 = ((mu_IncomingQueue[mu_n5][mu_EntryPath[mu_n5]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr1425)) mu__boolexpr1424 = FALSE ;
  else {
  mu__boolexpr1424 = ((mu_TailPointers[mu_ExitPath[mu_n5]][mu_n5]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1424)) mu__boolexpr1423 = FALSE ;
  else {
  mu__boolexpr1423 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr1423)) mu__boolexpr1422 = FALSE ;
  else {
  mu__boolexpr1422 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr1422)) mu__boolexpr1421 = FALSE ;
  else {
  mu__boolexpr1421 = ((mu_n1) != (mu_n5)) ; 
}
  if (!(mu__boolexpr1421)) mu__boolexpr1420 = FALSE ;
  else {
  mu__boolexpr1420 = ((mu_n3) != (mu_n4)) ; 
}
  if (!(mu__boolexpr1420)) mu__boolexpr1419 = FALSE ;
  else {
  mu__boolexpr1419 = ((mu_n3) != (mu_n5)) ; 
}
  if (!(mu__boolexpr1419)) mu__boolexpr1418 = FALSE ;
  else {
  mu__boolexpr1418 = ((mu_n4) != (mu_n5)) ; 
}
	      if (mu__boolexpr1418) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 27392;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_302 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_301 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_300 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_299 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_298 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_SendRequest ( (int)mu_n1, mu_ExitPath[mu_n1], (int)mu_n2 );
mu_Tokens[mu_n1] = (mu_Tokens[mu_n1]) - (1);
mu_ProcessFwdRequest ( (int)mu_n3, mu_EntryPath[mu_n3], mu_ExitPath[mu_n3] );
mu_ProcessFwdRequest ( (int)mu_n4, mu_EntryPath[mu_n4], mu_ExitPath[mu_n4] );
mu_ProcessRequest ( (int)mu_n5, mu_EntryPath[mu_n5], mu_ExitPath[mu_n5] );
  };

};
/******************** RuleBase54 ********************/
class RuleBase54
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_297 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_296 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_295 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_294 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_293 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Send request + Process fwd_request + Process fwd_request + Process fwd_request, n5:%s, n4:%s, n3:%s, n2:%s, n1:%s", mu_n5.Name(), mu_n4.Name(), mu_n3.Name(), mu_n2.Name(), mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_297 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_296 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_295 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_294 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_293 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr1434;
bool mu__boolexpr1435;
bool mu__boolexpr1436;
bool mu__boolexpr1437;
bool mu__boolexpr1438;
bool mu__boolexpr1439;
bool mu__boolexpr1440;
bool mu__boolexpr1441;
bool mu__boolexpr1442;
bool mu__boolexpr1443;
bool mu__boolexpr1444;
bool mu__boolexpr1445;
bool mu__boolexpr1446;
bool mu__boolexpr1447;
bool mu__boolexpr1448;
bool mu__boolexpr1449;
  if (!((mu_n1) != (mu_n2))) mu__boolexpr1449 = FALSE ;
  else {
  mu__boolexpr1449 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1449)) mu__boolexpr1448 = FALSE ;
  else {
  mu__boolexpr1448 = ((mu_Routers[mu_n1]) == (0)) ; 
}
  if (!(mu__boolexpr1448)) mu__boolexpr1447 = FALSE ;
  else {
  mu__boolexpr1447 = ((mu_Routers[mu_n2]) == (0)) ; 
}
  if (!(mu__boolexpr1447)) mu__boolexpr1446 = FALSE ;
  else {
  mu__boolexpr1446 = ((mu_Tokens[mu_n1]) > (0)) ; 
}
  if (!(mu__boolexpr1446)) mu__boolexpr1445 = FALSE ;
  else {
  mu__boolexpr1445 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_fwd_request)) ; 
}
  if (!(mu__boolexpr1445)) mu__boolexpr1444 = FALSE ;
  else {
  mu__boolexpr1444 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1444)) mu__boolexpr1443 = FALSE ;
  else {
  mu__boolexpr1443 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_fwd_request)) ; 
}
  if (!(mu__boolexpr1443)) mu__boolexpr1442 = FALSE ;
  else {
  mu__boolexpr1442 = ((mu_TailPointers[mu_ExitPath[mu_n4]][mu_n4]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1442)) mu__boolexpr1441 = FALSE ;
  else {
  mu__boolexpr1441 = ((mu_IncomingQueue[mu_n5][mu_EntryPath[mu_n5]][0].mu_msg_type) == (mu_fwd_request)) ; 
}
  if (!(mu__boolexpr1441)) mu__boolexpr1440 = FALSE ;
  else {
  mu__boolexpr1440 = ((mu_TailPointers[mu_ExitPath[mu_n5]][mu_n5]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1440)) mu__boolexpr1439 = FALSE ;
  else {
  mu__boolexpr1439 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr1439)) mu__boolexpr1438 = FALSE ;
  else {
  mu__boolexpr1438 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr1438)) mu__boolexpr1437 = FALSE ;
  else {
  mu__boolexpr1437 = ((mu_n1) != (mu_n5)) ; 
}
  if (!(mu__boolexpr1437)) mu__boolexpr1436 = FALSE ;
  else {
  mu__boolexpr1436 = ((mu_n3) != (mu_n4)) ; 
}
  if (!(mu__boolexpr1436)) mu__boolexpr1435 = FALSE ;
  else {
  mu__boolexpr1435 = ((mu_n3) != (mu_n5)) ; 
}
  if (!(mu__boolexpr1435)) mu__boolexpr1434 = FALSE ;
  else {
  mu__boolexpr1434 = ((mu_n4) != (mu_n5)) ; 
}
    return mu__boolexpr1434;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 28416;
    static mu__subrange_297 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_296 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_295 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_294 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_293 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 29440 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr1450;
bool mu__boolexpr1451;
bool mu__boolexpr1452;
bool mu__boolexpr1453;
bool mu__boolexpr1454;
bool mu__boolexpr1455;
bool mu__boolexpr1456;
bool mu__boolexpr1457;
bool mu__boolexpr1458;
bool mu__boolexpr1459;
bool mu__boolexpr1460;
bool mu__boolexpr1461;
bool mu__boolexpr1462;
bool mu__boolexpr1463;
bool mu__boolexpr1464;
bool mu__boolexpr1465;
  if (!((mu_n1) != (mu_n2))) mu__boolexpr1465 = FALSE ;
  else {
  mu__boolexpr1465 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1465)) mu__boolexpr1464 = FALSE ;
  else {
  mu__boolexpr1464 = ((mu_Routers[mu_n1]) == (0)) ; 
}
  if (!(mu__boolexpr1464)) mu__boolexpr1463 = FALSE ;
  else {
  mu__boolexpr1463 = ((mu_Routers[mu_n2]) == (0)) ; 
}
  if (!(mu__boolexpr1463)) mu__boolexpr1462 = FALSE ;
  else {
  mu__boolexpr1462 = ((mu_Tokens[mu_n1]) > (0)) ; 
}
  if (!(mu__boolexpr1462)) mu__boolexpr1461 = FALSE ;
  else {
  mu__boolexpr1461 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_fwd_request)) ; 
}
  if (!(mu__boolexpr1461)) mu__boolexpr1460 = FALSE ;
  else {
  mu__boolexpr1460 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1460)) mu__boolexpr1459 = FALSE ;
  else {
  mu__boolexpr1459 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_fwd_request)) ; 
}
  if (!(mu__boolexpr1459)) mu__boolexpr1458 = FALSE ;
  else {
  mu__boolexpr1458 = ((mu_TailPointers[mu_ExitPath[mu_n4]][mu_n4]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1458)) mu__boolexpr1457 = FALSE ;
  else {
  mu__boolexpr1457 = ((mu_IncomingQueue[mu_n5][mu_EntryPath[mu_n5]][0].mu_msg_type) == (mu_fwd_request)) ; 
}
  if (!(mu__boolexpr1457)) mu__boolexpr1456 = FALSE ;
  else {
  mu__boolexpr1456 = ((mu_TailPointers[mu_ExitPath[mu_n5]][mu_n5]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1456)) mu__boolexpr1455 = FALSE ;
  else {
  mu__boolexpr1455 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr1455)) mu__boolexpr1454 = FALSE ;
  else {
  mu__boolexpr1454 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr1454)) mu__boolexpr1453 = FALSE ;
  else {
  mu__boolexpr1453 = ((mu_n1) != (mu_n5)) ; 
}
  if (!(mu__boolexpr1453)) mu__boolexpr1452 = FALSE ;
  else {
  mu__boolexpr1452 = ((mu_n3) != (mu_n4)) ; 
}
  if (!(mu__boolexpr1452)) mu__boolexpr1451 = FALSE ;
  else {
  mu__boolexpr1451 = ((mu_n3) != (mu_n5)) ; 
}
  if (!(mu__boolexpr1451)) mu__boolexpr1450 = FALSE ;
  else {
  mu__boolexpr1450 = ((mu_n4) != (mu_n5)) ; 
}
	      if (mu__boolexpr1450) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 28416;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_297 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_296 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_295 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_294 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_293 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_SendRequest ( (int)mu_n1, mu_ExitPath[mu_n1], (int)mu_n2 );
mu_Tokens[mu_n1] = (mu_Tokens[mu_n1]) - (1);
mu_ProcessFwdRequest ( (int)mu_n3, mu_EntryPath[mu_n3], mu_ExitPath[mu_n3] );
mu_ProcessFwdRequest ( (int)mu_n4, mu_EntryPath[mu_n4], mu_ExitPath[mu_n4] );
mu_ProcessFwdRequest ( (int)mu_n5, mu_EntryPath[mu_n5], mu_ExitPath[mu_n5] );
  };

};
/******************** RuleBase55 ********************/
class RuleBase55
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_292 mu_n6;
    mu_n6.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_291 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_290 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_289 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_288 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_287 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Send request + Send request + Process response + Process response, n6:%s, n5:%s, n4:%s, n3:%s, n2:%s, n1:%s", mu_n6.Name(), mu_n5.Name(), mu_n4.Name(), mu_n3.Name(), mu_n2.Name(), mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_292 mu_n6;
    mu_n6.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_291 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_290 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_289 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_288 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_287 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr1466;
bool mu__boolexpr1467;
bool mu__boolexpr1468;
bool mu__boolexpr1469;
bool mu__boolexpr1470;
bool mu__boolexpr1471;
bool mu__boolexpr1472;
bool mu__boolexpr1473;
bool mu__boolexpr1474;
bool mu__boolexpr1475;
bool mu__boolexpr1476;
bool mu__boolexpr1477;
bool mu__boolexpr1478;
bool mu__boolexpr1479;
bool mu__boolexpr1480;
bool mu__boolexpr1481;
bool mu__boolexpr1482;
  if (!((mu_n1) != (mu_n2))) mu__boolexpr1482 = FALSE ;
  else {
  mu__boolexpr1482 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1482)) mu__boolexpr1481 = FALSE ;
  else {
  mu__boolexpr1481 = ((mu_Routers[mu_n1]) == (0)) ; 
}
  if (!(mu__boolexpr1481)) mu__boolexpr1480 = FALSE ;
  else {
  mu__boolexpr1480 = ((mu_Routers[mu_n2]) == (0)) ; 
}
  if (!(mu__boolexpr1480)) mu__boolexpr1479 = FALSE ;
  else {
  mu__boolexpr1479 = ((mu_Tokens[mu_n1]) > (0)) ; 
}
  if (!(mu__boolexpr1479)) mu__boolexpr1478 = FALSE ;
  else {
  mu__boolexpr1478 = ((mu_n3) != (mu_n4)) ; 
}
  if (!(mu__boolexpr1478)) mu__boolexpr1477 = FALSE ;
  else {
  mu__boolexpr1477 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1477)) mu__boolexpr1476 = FALSE ;
  else {
  mu__boolexpr1476 = ((mu_Routers[mu_n3]) == (0)) ; 
}
  if (!(mu__boolexpr1476)) mu__boolexpr1475 = FALSE ;
  else {
  mu__boolexpr1475 = ((mu_Routers[mu_n4]) == (0)) ; 
}
  if (!(mu__boolexpr1475)) mu__boolexpr1474 = FALSE ;
  else {
  mu__boolexpr1474 = ((mu_Tokens[mu_n3]) > (0)) ; 
}
  if (!(mu__boolexpr1474)) mu__boolexpr1473 = FALSE ;
  else {
  mu__boolexpr1473 = ((mu_IncomingQueue[mu_n5][mu_EntryPath[mu_n5]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr1473)) mu__boolexpr1472 = FALSE ;
  else {
  mu__boolexpr1472 = ((mu_IncomingQueue[mu_n6][mu_EntryPath[mu_n6]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr1472)) mu__boolexpr1471 = FALSE ;
  else {
  mu__boolexpr1471 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr1471)) mu__boolexpr1470 = FALSE ;
  else {
  mu__boolexpr1470 = ((mu_n1) != (mu_n5)) ; 
}
  if (!(mu__boolexpr1470)) mu__boolexpr1469 = FALSE ;
  else {
  mu__boolexpr1469 = ((mu_n1) != (mu_n6)) ; 
}
  if (!(mu__boolexpr1469)) mu__boolexpr1468 = FALSE ;
  else {
  mu__boolexpr1468 = ((mu_n3) != (mu_n5)) ; 
}
  if (!(mu__boolexpr1468)) mu__boolexpr1467 = FALSE ;
  else {
  mu__boolexpr1467 = ((mu_n3) != (mu_n6)) ; 
}
  if (!(mu__boolexpr1467)) mu__boolexpr1466 = FALSE ;
  else {
  mu__boolexpr1466 = ((mu_n5) != (mu_n6)) ; 
}
    return mu__boolexpr1466;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 29440;
    static mu__subrange_292 mu_n6;
    mu_n6.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_291 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_290 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_289 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_288 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_287 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 33536 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr1483;
bool mu__boolexpr1484;
bool mu__boolexpr1485;
bool mu__boolexpr1486;
bool mu__boolexpr1487;
bool mu__boolexpr1488;
bool mu__boolexpr1489;
bool mu__boolexpr1490;
bool mu__boolexpr1491;
bool mu__boolexpr1492;
bool mu__boolexpr1493;
bool mu__boolexpr1494;
bool mu__boolexpr1495;
bool mu__boolexpr1496;
bool mu__boolexpr1497;
bool mu__boolexpr1498;
bool mu__boolexpr1499;
  if (!((mu_n1) != (mu_n2))) mu__boolexpr1499 = FALSE ;
  else {
  mu__boolexpr1499 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1499)) mu__boolexpr1498 = FALSE ;
  else {
  mu__boolexpr1498 = ((mu_Routers[mu_n1]) == (0)) ; 
}
  if (!(mu__boolexpr1498)) mu__boolexpr1497 = FALSE ;
  else {
  mu__boolexpr1497 = ((mu_Routers[mu_n2]) == (0)) ; 
}
  if (!(mu__boolexpr1497)) mu__boolexpr1496 = FALSE ;
  else {
  mu__boolexpr1496 = ((mu_Tokens[mu_n1]) > (0)) ; 
}
  if (!(mu__boolexpr1496)) mu__boolexpr1495 = FALSE ;
  else {
  mu__boolexpr1495 = ((mu_n3) != (mu_n4)) ; 
}
  if (!(mu__boolexpr1495)) mu__boolexpr1494 = FALSE ;
  else {
  mu__boolexpr1494 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1494)) mu__boolexpr1493 = FALSE ;
  else {
  mu__boolexpr1493 = ((mu_Routers[mu_n3]) == (0)) ; 
}
  if (!(mu__boolexpr1493)) mu__boolexpr1492 = FALSE ;
  else {
  mu__boolexpr1492 = ((mu_Routers[mu_n4]) == (0)) ; 
}
  if (!(mu__boolexpr1492)) mu__boolexpr1491 = FALSE ;
  else {
  mu__boolexpr1491 = ((mu_Tokens[mu_n3]) > (0)) ; 
}
  if (!(mu__boolexpr1491)) mu__boolexpr1490 = FALSE ;
  else {
  mu__boolexpr1490 = ((mu_IncomingQueue[mu_n5][mu_EntryPath[mu_n5]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr1490)) mu__boolexpr1489 = FALSE ;
  else {
  mu__boolexpr1489 = ((mu_IncomingQueue[mu_n6][mu_EntryPath[mu_n6]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr1489)) mu__boolexpr1488 = FALSE ;
  else {
  mu__boolexpr1488 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr1488)) mu__boolexpr1487 = FALSE ;
  else {
  mu__boolexpr1487 = ((mu_n1) != (mu_n5)) ; 
}
  if (!(mu__boolexpr1487)) mu__boolexpr1486 = FALSE ;
  else {
  mu__boolexpr1486 = ((mu_n1) != (mu_n6)) ; 
}
  if (!(mu__boolexpr1486)) mu__boolexpr1485 = FALSE ;
  else {
  mu__boolexpr1485 = ((mu_n3) != (mu_n5)) ; 
}
  if (!(mu__boolexpr1485)) mu__boolexpr1484 = FALSE ;
  else {
  mu__boolexpr1484 = ((mu_n3) != (mu_n6)) ; 
}
  if (!(mu__boolexpr1484)) mu__boolexpr1483 = FALSE ;
  else {
  mu__boolexpr1483 = ((mu_n5) != (mu_n6)) ; 
}
	      if (mu__boolexpr1483) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 29440;
    mu_n6.value((r % 4) + 0);
    r = r / 4;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_292 mu_n6;
    mu_n6.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_291 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_290 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_289 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_288 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_287 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_SendRequest ( (int)mu_n1, mu_ExitPath[mu_n1], (int)mu_n2 );
mu_Tokens[mu_n1] = (mu_Tokens[mu_n1]) - (1);
mu_SendRequest ( (int)mu_n3, mu_ExitPath[mu_n3], (int)mu_n4 );
mu_Tokens[mu_n3] = (mu_Tokens[mu_n3]) - (1);
mu_ProcessResponse ( (int)mu_n5, mu_EntryPath[mu_n5] );
mu_Tokens[mu_n5] = (mu_Tokens[mu_n5]) + (1);
mu_ProcessResponse ( (int)mu_n6, mu_EntryPath[mu_n6] );
mu_Tokens[mu_n6] = (mu_Tokens[mu_n6]) + (1);
  };

};
/******************** RuleBase56 ********************/
class RuleBase56
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_286 mu_n6;
    mu_n6.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_285 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_284 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_283 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_282 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_281 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Send request + Send request + Process fwd_response + Process response, n6:%s, n5:%s, n4:%s, n3:%s, n2:%s, n1:%s", mu_n6.Name(), mu_n5.Name(), mu_n4.Name(), mu_n3.Name(), mu_n2.Name(), mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_286 mu_n6;
    mu_n6.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_285 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_284 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_283 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_282 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_281 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr1500;
bool mu__boolexpr1501;
bool mu__boolexpr1502;
bool mu__boolexpr1503;
bool mu__boolexpr1504;
bool mu__boolexpr1505;
bool mu__boolexpr1506;
bool mu__boolexpr1507;
bool mu__boolexpr1508;
bool mu__boolexpr1509;
bool mu__boolexpr1510;
bool mu__boolexpr1511;
bool mu__boolexpr1512;
bool mu__boolexpr1513;
bool mu__boolexpr1514;
bool mu__boolexpr1515;
bool mu__boolexpr1516;
bool mu__boolexpr1517;
  if (!((mu_n1) != (mu_n2))) mu__boolexpr1517 = FALSE ;
  else {
  mu__boolexpr1517 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1517)) mu__boolexpr1516 = FALSE ;
  else {
  mu__boolexpr1516 = ((mu_Routers[mu_n1]) == (0)) ; 
}
  if (!(mu__boolexpr1516)) mu__boolexpr1515 = FALSE ;
  else {
  mu__boolexpr1515 = ((mu_Routers[mu_n2]) == (0)) ; 
}
  if (!(mu__boolexpr1515)) mu__boolexpr1514 = FALSE ;
  else {
  mu__boolexpr1514 = ((mu_Tokens[mu_n1]) > (0)) ; 
}
  if (!(mu__boolexpr1514)) mu__boolexpr1513 = FALSE ;
  else {
  mu__boolexpr1513 = ((mu_n3) != (mu_n4)) ; 
}
  if (!(mu__boolexpr1513)) mu__boolexpr1512 = FALSE ;
  else {
  mu__boolexpr1512 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1512)) mu__boolexpr1511 = FALSE ;
  else {
  mu__boolexpr1511 = ((mu_Routers[mu_n3]) == (0)) ; 
}
  if (!(mu__boolexpr1511)) mu__boolexpr1510 = FALSE ;
  else {
  mu__boolexpr1510 = ((mu_Routers[mu_n4]) == (0)) ; 
}
  if (!(mu__boolexpr1510)) mu__boolexpr1509 = FALSE ;
  else {
  mu__boolexpr1509 = ((mu_Tokens[mu_n3]) > (0)) ; 
}
  if (!(mu__boolexpr1509)) mu__boolexpr1508 = FALSE ;
  else {
  mu__boolexpr1508 = ((mu_IncomingQueue[mu_n5][mu_EntryPath[mu_n5]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr1508)) mu__boolexpr1507 = FALSE ;
  else {
  mu__boolexpr1507 = ((mu_TailPointers[mu_ExitPath[mu_n5]][mu_n5]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1507)) mu__boolexpr1506 = FALSE ;
  else {
  mu__boolexpr1506 = ((mu_IncomingQueue[mu_n6][mu_EntryPath[mu_n6]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr1506)) mu__boolexpr1505 = FALSE ;
  else {
  mu__boolexpr1505 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr1505)) mu__boolexpr1504 = FALSE ;
  else {
  mu__boolexpr1504 = ((mu_n1) != (mu_n5)) ; 
}
  if (!(mu__boolexpr1504)) mu__boolexpr1503 = FALSE ;
  else {
  mu__boolexpr1503 = ((mu_n1) != (mu_n6)) ; 
}
  if (!(mu__boolexpr1503)) mu__boolexpr1502 = FALSE ;
  else {
  mu__boolexpr1502 = ((mu_n3) != (mu_n5)) ; 
}
  if (!(mu__boolexpr1502)) mu__boolexpr1501 = FALSE ;
  else {
  mu__boolexpr1501 = ((mu_n3) != (mu_n6)) ; 
}
  if (!(mu__boolexpr1501)) mu__boolexpr1500 = FALSE ;
  else {
  mu__boolexpr1500 = ((mu_n5) != (mu_n6)) ; 
}
    return mu__boolexpr1500;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 33536;
    static mu__subrange_286 mu_n6;
    mu_n6.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_285 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_284 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_283 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_282 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_281 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 37632 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr1518;
bool mu__boolexpr1519;
bool mu__boolexpr1520;
bool mu__boolexpr1521;
bool mu__boolexpr1522;
bool mu__boolexpr1523;
bool mu__boolexpr1524;
bool mu__boolexpr1525;
bool mu__boolexpr1526;
bool mu__boolexpr1527;
bool mu__boolexpr1528;
bool mu__boolexpr1529;
bool mu__boolexpr1530;
bool mu__boolexpr1531;
bool mu__boolexpr1532;
bool mu__boolexpr1533;
bool mu__boolexpr1534;
bool mu__boolexpr1535;
  if (!((mu_n1) != (mu_n2))) mu__boolexpr1535 = FALSE ;
  else {
  mu__boolexpr1535 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1535)) mu__boolexpr1534 = FALSE ;
  else {
  mu__boolexpr1534 = ((mu_Routers[mu_n1]) == (0)) ; 
}
  if (!(mu__boolexpr1534)) mu__boolexpr1533 = FALSE ;
  else {
  mu__boolexpr1533 = ((mu_Routers[mu_n2]) == (0)) ; 
}
  if (!(mu__boolexpr1533)) mu__boolexpr1532 = FALSE ;
  else {
  mu__boolexpr1532 = ((mu_Tokens[mu_n1]) > (0)) ; 
}
  if (!(mu__boolexpr1532)) mu__boolexpr1531 = FALSE ;
  else {
  mu__boolexpr1531 = ((mu_n3) != (mu_n4)) ; 
}
  if (!(mu__boolexpr1531)) mu__boolexpr1530 = FALSE ;
  else {
  mu__boolexpr1530 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1530)) mu__boolexpr1529 = FALSE ;
  else {
  mu__boolexpr1529 = ((mu_Routers[mu_n3]) == (0)) ; 
}
  if (!(mu__boolexpr1529)) mu__boolexpr1528 = FALSE ;
  else {
  mu__boolexpr1528 = ((mu_Routers[mu_n4]) == (0)) ; 
}
  if (!(mu__boolexpr1528)) mu__boolexpr1527 = FALSE ;
  else {
  mu__boolexpr1527 = ((mu_Tokens[mu_n3]) > (0)) ; 
}
  if (!(mu__boolexpr1527)) mu__boolexpr1526 = FALSE ;
  else {
  mu__boolexpr1526 = ((mu_IncomingQueue[mu_n5][mu_EntryPath[mu_n5]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr1526)) mu__boolexpr1525 = FALSE ;
  else {
  mu__boolexpr1525 = ((mu_TailPointers[mu_ExitPath[mu_n5]][mu_n5]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1525)) mu__boolexpr1524 = FALSE ;
  else {
  mu__boolexpr1524 = ((mu_IncomingQueue[mu_n6][mu_EntryPath[mu_n6]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr1524)) mu__boolexpr1523 = FALSE ;
  else {
  mu__boolexpr1523 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr1523)) mu__boolexpr1522 = FALSE ;
  else {
  mu__boolexpr1522 = ((mu_n1) != (mu_n5)) ; 
}
  if (!(mu__boolexpr1522)) mu__boolexpr1521 = FALSE ;
  else {
  mu__boolexpr1521 = ((mu_n1) != (mu_n6)) ; 
}
  if (!(mu__boolexpr1521)) mu__boolexpr1520 = FALSE ;
  else {
  mu__boolexpr1520 = ((mu_n3) != (mu_n5)) ; 
}
  if (!(mu__boolexpr1520)) mu__boolexpr1519 = FALSE ;
  else {
  mu__boolexpr1519 = ((mu_n3) != (mu_n6)) ; 
}
  if (!(mu__boolexpr1519)) mu__boolexpr1518 = FALSE ;
  else {
  mu__boolexpr1518 = ((mu_n5) != (mu_n6)) ; 
}
	      if (mu__boolexpr1518) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 33536;
    mu_n6.value((r % 4) + 0);
    r = r / 4;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_286 mu_n6;
    mu_n6.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_285 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_284 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_283 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_282 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_281 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_SendRequest ( (int)mu_n1, mu_ExitPath[mu_n1], (int)mu_n2 );
mu_Tokens[mu_n1] = (mu_Tokens[mu_n1]) - (1);
mu_SendRequest ( (int)mu_n3, mu_ExitPath[mu_n3], (int)mu_n4 );
mu_Tokens[mu_n3] = (mu_Tokens[mu_n3]) - (1);
mu_ProcessFwdResponse ( (int)mu_n5, mu_EntryPath[mu_n5], mu_ExitPath[mu_n5] );
mu_ProcessResponse ( (int)mu_n6, mu_EntryPath[mu_n6] );
mu_Tokens[mu_n6] = (mu_Tokens[mu_n6]) + (1);
  };

};
/******************** RuleBase57 ********************/
class RuleBase57
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_280 mu_n6;
    mu_n6.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_279 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_278 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_277 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_276 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_275 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Send request + Send request + Process fwd_response + Process fwd_response, n6:%s, n5:%s, n4:%s, n3:%s, n2:%s, n1:%s", mu_n6.Name(), mu_n5.Name(), mu_n4.Name(), mu_n3.Name(), mu_n2.Name(), mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_280 mu_n6;
    mu_n6.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_279 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_278 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_277 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_276 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_275 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr1536;
bool mu__boolexpr1537;
bool mu__boolexpr1538;
bool mu__boolexpr1539;
bool mu__boolexpr1540;
bool mu__boolexpr1541;
bool mu__boolexpr1542;
bool mu__boolexpr1543;
bool mu__boolexpr1544;
bool mu__boolexpr1545;
bool mu__boolexpr1546;
bool mu__boolexpr1547;
bool mu__boolexpr1548;
bool mu__boolexpr1549;
bool mu__boolexpr1550;
bool mu__boolexpr1551;
bool mu__boolexpr1552;
bool mu__boolexpr1553;
bool mu__boolexpr1554;
  if (!((mu_n1) != (mu_n2))) mu__boolexpr1554 = FALSE ;
  else {
  mu__boolexpr1554 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1554)) mu__boolexpr1553 = FALSE ;
  else {
  mu__boolexpr1553 = ((mu_Routers[mu_n1]) == (0)) ; 
}
  if (!(mu__boolexpr1553)) mu__boolexpr1552 = FALSE ;
  else {
  mu__boolexpr1552 = ((mu_Routers[mu_n2]) == (0)) ; 
}
  if (!(mu__boolexpr1552)) mu__boolexpr1551 = FALSE ;
  else {
  mu__boolexpr1551 = ((mu_Tokens[mu_n1]) > (0)) ; 
}
  if (!(mu__boolexpr1551)) mu__boolexpr1550 = FALSE ;
  else {
  mu__boolexpr1550 = ((mu_n3) != (mu_n4)) ; 
}
  if (!(mu__boolexpr1550)) mu__boolexpr1549 = FALSE ;
  else {
  mu__boolexpr1549 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1549)) mu__boolexpr1548 = FALSE ;
  else {
  mu__boolexpr1548 = ((mu_Routers[mu_n3]) == (0)) ; 
}
  if (!(mu__boolexpr1548)) mu__boolexpr1547 = FALSE ;
  else {
  mu__boolexpr1547 = ((mu_Routers[mu_n4]) == (0)) ; 
}
  if (!(mu__boolexpr1547)) mu__boolexpr1546 = FALSE ;
  else {
  mu__boolexpr1546 = ((mu_Tokens[mu_n3]) > (0)) ; 
}
  if (!(mu__boolexpr1546)) mu__boolexpr1545 = FALSE ;
  else {
  mu__boolexpr1545 = ((mu_IncomingQueue[mu_n5][mu_EntryPath[mu_n5]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr1545)) mu__boolexpr1544 = FALSE ;
  else {
  mu__boolexpr1544 = ((mu_TailPointers[mu_ExitPath[mu_n5]][mu_n5]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1544)) mu__boolexpr1543 = FALSE ;
  else {
  mu__boolexpr1543 = ((mu_IncomingQueue[mu_n6][mu_EntryPath[mu_n6]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr1543)) mu__boolexpr1542 = FALSE ;
  else {
  mu__boolexpr1542 = ((mu_TailPointers[mu_ExitPath[mu_n6]][mu_n6]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1542)) mu__boolexpr1541 = FALSE ;
  else {
  mu__boolexpr1541 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr1541)) mu__boolexpr1540 = FALSE ;
  else {
  mu__boolexpr1540 = ((mu_n1) != (mu_n5)) ; 
}
  if (!(mu__boolexpr1540)) mu__boolexpr1539 = FALSE ;
  else {
  mu__boolexpr1539 = ((mu_n1) != (mu_n6)) ; 
}
  if (!(mu__boolexpr1539)) mu__boolexpr1538 = FALSE ;
  else {
  mu__boolexpr1538 = ((mu_n3) != (mu_n5)) ; 
}
  if (!(mu__boolexpr1538)) mu__boolexpr1537 = FALSE ;
  else {
  mu__boolexpr1537 = ((mu_n3) != (mu_n6)) ; 
}
  if (!(mu__boolexpr1537)) mu__boolexpr1536 = FALSE ;
  else {
  mu__boolexpr1536 = ((mu_n5) != (mu_n6)) ; 
}
    return mu__boolexpr1536;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 37632;
    static mu__subrange_280 mu_n6;
    mu_n6.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_279 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_278 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_277 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_276 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_275 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 41728 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr1555;
bool mu__boolexpr1556;
bool mu__boolexpr1557;
bool mu__boolexpr1558;
bool mu__boolexpr1559;
bool mu__boolexpr1560;
bool mu__boolexpr1561;
bool mu__boolexpr1562;
bool mu__boolexpr1563;
bool mu__boolexpr1564;
bool mu__boolexpr1565;
bool mu__boolexpr1566;
bool mu__boolexpr1567;
bool mu__boolexpr1568;
bool mu__boolexpr1569;
bool mu__boolexpr1570;
bool mu__boolexpr1571;
bool mu__boolexpr1572;
bool mu__boolexpr1573;
  if (!((mu_n1) != (mu_n2))) mu__boolexpr1573 = FALSE ;
  else {
  mu__boolexpr1573 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1573)) mu__boolexpr1572 = FALSE ;
  else {
  mu__boolexpr1572 = ((mu_Routers[mu_n1]) == (0)) ; 
}
  if (!(mu__boolexpr1572)) mu__boolexpr1571 = FALSE ;
  else {
  mu__boolexpr1571 = ((mu_Routers[mu_n2]) == (0)) ; 
}
  if (!(mu__boolexpr1571)) mu__boolexpr1570 = FALSE ;
  else {
  mu__boolexpr1570 = ((mu_Tokens[mu_n1]) > (0)) ; 
}
  if (!(mu__boolexpr1570)) mu__boolexpr1569 = FALSE ;
  else {
  mu__boolexpr1569 = ((mu_n3) != (mu_n4)) ; 
}
  if (!(mu__boolexpr1569)) mu__boolexpr1568 = FALSE ;
  else {
  mu__boolexpr1568 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1568)) mu__boolexpr1567 = FALSE ;
  else {
  mu__boolexpr1567 = ((mu_Routers[mu_n3]) == (0)) ; 
}
  if (!(mu__boolexpr1567)) mu__boolexpr1566 = FALSE ;
  else {
  mu__boolexpr1566 = ((mu_Routers[mu_n4]) == (0)) ; 
}
  if (!(mu__boolexpr1566)) mu__boolexpr1565 = FALSE ;
  else {
  mu__boolexpr1565 = ((mu_Tokens[mu_n3]) > (0)) ; 
}
  if (!(mu__boolexpr1565)) mu__boolexpr1564 = FALSE ;
  else {
  mu__boolexpr1564 = ((mu_IncomingQueue[mu_n5][mu_EntryPath[mu_n5]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr1564)) mu__boolexpr1563 = FALSE ;
  else {
  mu__boolexpr1563 = ((mu_TailPointers[mu_ExitPath[mu_n5]][mu_n5]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1563)) mu__boolexpr1562 = FALSE ;
  else {
  mu__boolexpr1562 = ((mu_IncomingQueue[mu_n6][mu_EntryPath[mu_n6]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr1562)) mu__boolexpr1561 = FALSE ;
  else {
  mu__boolexpr1561 = ((mu_TailPointers[mu_ExitPath[mu_n6]][mu_n6]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1561)) mu__boolexpr1560 = FALSE ;
  else {
  mu__boolexpr1560 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr1560)) mu__boolexpr1559 = FALSE ;
  else {
  mu__boolexpr1559 = ((mu_n1) != (mu_n5)) ; 
}
  if (!(mu__boolexpr1559)) mu__boolexpr1558 = FALSE ;
  else {
  mu__boolexpr1558 = ((mu_n1) != (mu_n6)) ; 
}
  if (!(mu__boolexpr1558)) mu__boolexpr1557 = FALSE ;
  else {
  mu__boolexpr1557 = ((mu_n3) != (mu_n5)) ; 
}
  if (!(mu__boolexpr1557)) mu__boolexpr1556 = FALSE ;
  else {
  mu__boolexpr1556 = ((mu_n3) != (mu_n6)) ; 
}
  if (!(mu__boolexpr1556)) mu__boolexpr1555 = FALSE ;
  else {
  mu__boolexpr1555 = ((mu_n5) != (mu_n6)) ; 
}
	      if (mu__boolexpr1555) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 37632;
    mu_n6.value((r % 4) + 0);
    r = r / 4;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_280 mu_n6;
    mu_n6.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_279 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_278 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_277 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_276 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_275 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_SendRequest ( (int)mu_n1, mu_ExitPath[mu_n1], (int)mu_n2 );
mu_Tokens[mu_n1] = (mu_Tokens[mu_n1]) - (1);
mu_SendRequest ( (int)mu_n3, mu_ExitPath[mu_n3], (int)mu_n4 );
mu_Tokens[mu_n3] = (mu_Tokens[mu_n3]) - (1);
mu_ProcessFwdResponse ( (int)mu_n5, mu_EntryPath[mu_n5], mu_ExitPath[mu_n5] );
mu_ProcessFwdResponse ( (int)mu_n6, mu_EntryPath[mu_n6], mu_ExitPath[mu_n6] );
  };

};
/******************** RuleBase58 ********************/
class RuleBase58
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_274 mu_n6;
    mu_n6.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_273 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_272 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_271 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_270 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_269 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Send request + Send request + Process request + Process response, n6:%s, n5:%s, n4:%s, n3:%s, n2:%s, n1:%s", mu_n6.Name(), mu_n5.Name(), mu_n4.Name(), mu_n3.Name(), mu_n2.Name(), mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_274 mu_n6;
    mu_n6.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_273 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_272 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_271 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_270 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_269 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr1574;
bool mu__boolexpr1575;
bool mu__boolexpr1576;
bool mu__boolexpr1577;
bool mu__boolexpr1578;
bool mu__boolexpr1579;
bool mu__boolexpr1580;
bool mu__boolexpr1581;
bool mu__boolexpr1582;
bool mu__boolexpr1583;
bool mu__boolexpr1584;
bool mu__boolexpr1585;
bool mu__boolexpr1586;
bool mu__boolexpr1587;
bool mu__boolexpr1588;
bool mu__boolexpr1589;
bool mu__boolexpr1590;
bool mu__boolexpr1591;
  if (!((mu_n1) != (mu_n2))) mu__boolexpr1591 = FALSE ;
  else {
  mu__boolexpr1591 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1591)) mu__boolexpr1590 = FALSE ;
  else {
  mu__boolexpr1590 = ((mu_Routers[mu_n1]) == (0)) ; 
}
  if (!(mu__boolexpr1590)) mu__boolexpr1589 = FALSE ;
  else {
  mu__boolexpr1589 = ((mu_Routers[mu_n2]) == (0)) ; 
}
  if (!(mu__boolexpr1589)) mu__boolexpr1588 = FALSE ;
  else {
  mu__boolexpr1588 = ((mu_Tokens[mu_n1]) > (0)) ; 
}
  if (!(mu__boolexpr1588)) mu__boolexpr1587 = FALSE ;
  else {
  mu__boolexpr1587 = ((mu_n3) != (mu_n4)) ; 
}
  if (!(mu__boolexpr1587)) mu__boolexpr1586 = FALSE ;
  else {
  mu__boolexpr1586 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1586)) mu__boolexpr1585 = FALSE ;
  else {
  mu__boolexpr1585 = ((mu_Routers[mu_n3]) == (0)) ; 
}
  if (!(mu__boolexpr1585)) mu__boolexpr1584 = FALSE ;
  else {
  mu__boolexpr1584 = ((mu_Routers[mu_n4]) == (0)) ; 
}
  if (!(mu__boolexpr1584)) mu__boolexpr1583 = FALSE ;
  else {
  mu__boolexpr1583 = ((mu_Tokens[mu_n3]) > (0)) ; 
}
  if (!(mu__boolexpr1583)) mu__boolexpr1582 = FALSE ;
  else {
  mu__boolexpr1582 = ((mu_IncomingQueue[mu_n5][mu_EntryPath[mu_n5]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr1582)) mu__boolexpr1581 = FALSE ;
  else {
  mu__boolexpr1581 = ((mu_TailPointers[mu_ExitPath[mu_n5]][mu_n5]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1581)) mu__boolexpr1580 = FALSE ;
  else {
  mu__boolexpr1580 = ((mu_IncomingQueue[mu_n6][mu_EntryPath[mu_n6]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr1580)) mu__boolexpr1579 = FALSE ;
  else {
  mu__boolexpr1579 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr1579)) mu__boolexpr1578 = FALSE ;
  else {
  mu__boolexpr1578 = ((mu_n1) != (mu_n5)) ; 
}
  if (!(mu__boolexpr1578)) mu__boolexpr1577 = FALSE ;
  else {
  mu__boolexpr1577 = ((mu_n1) != (mu_n6)) ; 
}
  if (!(mu__boolexpr1577)) mu__boolexpr1576 = FALSE ;
  else {
  mu__boolexpr1576 = ((mu_n3) != (mu_n5)) ; 
}
  if (!(mu__boolexpr1576)) mu__boolexpr1575 = FALSE ;
  else {
  mu__boolexpr1575 = ((mu_n3) != (mu_n6)) ; 
}
  if (!(mu__boolexpr1575)) mu__boolexpr1574 = FALSE ;
  else {
  mu__boolexpr1574 = ((mu_n5) != (mu_n6)) ; 
}
    return mu__boolexpr1574;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 41728;
    static mu__subrange_274 mu_n6;
    mu_n6.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_273 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_272 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_271 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_270 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_269 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 45824 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr1592;
bool mu__boolexpr1593;
bool mu__boolexpr1594;
bool mu__boolexpr1595;
bool mu__boolexpr1596;
bool mu__boolexpr1597;
bool mu__boolexpr1598;
bool mu__boolexpr1599;
bool mu__boolexpr1600;
bool mu__boolexpr1601;
bool mu__boolexpr1602;
bool mu__boolexpr1603;
bool mu__boolexpr1604;
bool mu__boolexpr1605;
bool mu__boolexpr1606;
bool mu__boolexpr1607;
bool mu__boolexpr1608;
bool mu__boolexpr1609;
  if (!((mu_n1) != (mu_n2))) mu__boolexpr1609 = FALSE ;
  else {
  mu__boolexpr1609 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1609)) mu__boolexpr1608 = FALSE ;
  else {
  mu__boolexpr1608 = ((mu_Routers[mu_n1]) == (0)) ; 
}
  if (!(mu__boolexpr1608)) mu__boolexpr1607 = FALSE ;
  else {
  mu__boolexpr1607 = ((mu_Routers[mu_n2]) == (0)) ; 
}
  if (!(mu__boolexpr1607)) mu__boolexpr1606 = FALSE ;
  else {
  mu__boolexpr1606 = ((mu_Tokens[mu_n1]) > (0)) ; 
}
  if (!(mu__boolexpr1606)) mu__boolexpr1605 = FALSE ;
  else {
  mu__boolexpr1605 = ((mu_n3) != (mu_n4)) ; 
}
  if (!(mu__boolexpr1605)) mu__boolexpr1604 = FALSE ;
  else {
  mu__boolexpr1604 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1604)) mu__boolexpr1603 = FALSE ;
  else {
  mu__boolexpr1603 = ((mu_Routers[mu_n3]) == (0)) ; 
}
  if (!(mu__boolexpr1603)) mu__boolexpr1602 = FALSE ;
  else {
  mu__boolexpr1602 = ((mu_Routers[mu_n4]) == (0)) ; 
}
  if (!(mu__boolexpr1602)) mu__boolexpr1601 = FALSE ;
  else {
  mu__boolexpr1601 = ((mu_Tokens[mu_n3]) > (0)) ; 
}
  if (!(mu__boolexpr1601)) mu__boolexpr1600 = FALSE ;
  else {
  mu__boolexpr1600 = ((mu_IncomingQueue[mu_n5][mu_EntryPath[mu_n5]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr1600)) mu__boolexpr1599 = FALSE ;
  else {
  mu__boolexpr1599 = ((mu_TailPointers[mu_ExitPath[mu_n5]][mu_n5]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1599)) mu__boolexpr1598 = FALSE ;
  else {
  mu__boolexpr1598 = ((mu_IncomingQueue[mu_n6][mu_EntryPath[mu_n6]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr1598)) mu__boolexpr1597 = FALSE ;
  else {
  mu__boolexpr1597 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr1597)) mu__boolexpr1596 = FALSE ;
  else {
  mu__boolexpr1596 = ((mu_n1) != (mu_n5)) ; 
}
  if (!(mu__boolexpr1596)) mu__boolexpr1595 = FALSE ;
  else {
  mu__boolexpr1595 = ((mu_n1) != (mu_n6)) ; 
}
  if (!(mu__boolexpr1595)) mu__boolexpr1594 = FALSE ;
  else {
  mu__boolexpr1594 = ((mu_n3) != (mu_n5)) ; 
}
  if (!(mu__boolexpr1594)) mu__boolexpr1593 = FALSE ;
  else {
  mu__boolexpr1593 = ((mu_n3) != (mu_n6)) ; 
}
  if (!(mu__boolexpr1593)) mu__boolexpr1592 = FALSE ;
  else {
  mu__boolexpr1592 = ((mu_n5) != (mu_n6)) ; 
}
	      if (mu__boolexpr1592) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 41728;
    mu_n6.value((r % 4) + 0);
    r = r / 4;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_274 mu_n6;
    mu_n6.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_273 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_272 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_271 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_270 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_269 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_SendRequest ( (int)mu_n1, mu_ExitPath[mu_n1], (int)mu_n2 );
mu_Tokens[mu_n1] = (mu_Tokens[mu_n1]) - (1);
mu_SendRequest ( (int)mu_n3, mu_ExitPath[mu_n3], (int)mu_n4 );
mu_Tokens[mu_n3] = (mu_Tokens[mu_n3]) - (1);
mu_ProcessRequest ( (int)mu_n5, mu_EntryPath[mu_n5], mu_ExitPath[mu_n5] );
mu_ProcessResponse ( (int)mu_n6, mu_EntryPath[mu_n6] );
mu_Tokens[mu_n6] = (mu_Tokens[mu_n6]) + (1);
  };

};
/******************** RuleBase59 ********************/
class RuleBase59
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_268 mu_n6;
    mu_n6.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_267 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_266 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_265 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_264 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_263 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Send request + Send request + Process request + Process fwd_response, n6:%s, n5:%s, n4:%s, n3:%s, n2:%s, n1:%s", mu_n6.Name(), mu_n5.Name(), mu_n4.Name(), mu_n3.Name(), mu_n2.Name(), mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_268 mu_n6;
    mu_n6.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_267 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_266 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_265 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_264 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_263 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr1610;
bool mu__boolexpr1611;
bool mu__boolexpr1612;
bool mu__boolexpr1613;
bool mu__boolexpr1614;
bool mu__boolexpr1615;
bool mu__boolexpr1616;
bool mu__boolexpr1617;
bool mu__boolexpr1618;
bool mu__boolexpr1619;
bool mu__boolexpr1620;
bool mu__boolexpr1621;
bool mu__boolexpr1622;
bool mu__boolexpr1623;
bool mu__boolexpr1624;
bool mu__boolexpr1625;
bool mu__boolexpr1626;
bool mu__boolexpr1627;
bool mu__boolexpr1628;
  if (!((mu_n1) != (mu_n2))) mu__boolexpr1628 = FALSE ;
  else {
  mu__boolexpr1628 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1628)) mu__boolexpr1627 = FALSE ;
  else {
  mu__boolexpr1627 = ((mu_Routers[mu_n1]) == (0)) ; 
}
  if (!(mu__boolexpr1627)) mu__boolexpr1626 = FALSE ;
  else {
  mu__boolexpr1626 = ((mu_Routers[mu_n2]) == (0)) ; 
}
  if (!(mu__boolexpr1626)) mu__boolexpr1625 = FALSE ;
  else {
  mu__boolexpr1625 = ((mu_Tokens[mu_n1]) > (0)) ; 
}
  if (!(mu__boolexpr1625)) mu__boolexpr1624 = FALSE ;
  else {
  mu__boolexpr1624 = ((mu_n3) != (mu_n4)) ; 
}
  if (!(mu__boolexpr1624)) mu__boolexpr1623 = FALSE ;
  else {
  mu__boolexpr1623 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1623)) mu__boolexpr1622 = FALSE ;
  else {
  mu__boolexpr1622 = ((mu_Routers[mu_n3]) == (0)) ; 
}
  if (!(mu__boolexpr1622)) mu__boolexpr1621 = FALSE ;
  else {
  mu__boolexpr1621 = ((mu_Routers[mu_n4]) == (0)) ; 
}
  if (!(mu__boolexpr1621)) mu__boolexpr1620 = FALSE ;
  else {
  mu__boolexpr1620 = ((mu_Tokens[mu_n3]) > (0)) ; 
}
  if (!(mu__boolexpr1620)) mu__boolexpr1619 = FALSE ;
  else {
  mu__boolexpr1619 = ((mu_IncomingQueue[mu_n5][mu_EntryPath[mu_n5]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr1619)) mu__boolexpr1618 = FALSE ;
  else {
  mu__boolexpr1618 = ((mu_TailPointers[mu_ExitPath[mu_n5]][mu_n5]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1618)) mu__boolexpr1617 = FALSE ;
  else {
  mu__boolexpr1617 = ((mu_IncomingQueue[mu_n6][mu_EntryPath[mu_n6]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr1617)) mu__boolexpr1616 = FALSE ;
  else {
  mu__boolexpr1616 = ((mu_TailPointers[mu_ExitPath[mu_n6]][mu_n6]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1616)) mu__boolexpr1615 = FALSE ;
  else {
  mu__boolexpr1615 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr1615)) mu__boolexpr1614 = FALSE ;
  else {
  mu__boolexpr1614 = ((mu_n1) != (mu_n5)) ; 
}
  if (!(mu__boolexpr1614)) mu__boolexpr1613 = FALSE ;
  else {
  mu__boolexpr1613 = ((mu_n1) != (mu_n6)) ; 
}
  if (!(mu__boolexpr1613)) mu__boolexpr1612 = FALSE ;
  else {
  mu__boolexpr1612 = ((mu_n3) != (mu_n5)) ; 
}
  if (!(mu__boolexpr1612)) mu__boolexpr1611 = FALSE ;
  else {
  mu__boolexpr1611 = ((mu_n3) != (mu_n6)) ; 
}
  if (!(mu__boolexpr1611)) mu__boolexpr1610 = FALSE ;
  else {
  mu__boolexpr1610 = ((mu_n5) != (mu_n6)) ; 
}
    return mu__boolexpr1610;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 45824;
    static mu__subrange_268 mu_n6;
    mu_n6.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_267 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_266 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_265 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_264 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_263 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 49920 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr1629;
bool mu__boolexpr1630;
bool mu__boolexpr1631;
bool mu__boolexpr1632;
bool mu__boolexpr1633;
bool mu__boolexpr1634;
bool mu__boolexpr1635;
bool mu__boolexpr1636;
bool mu__boolexpr1637;
bool mu__boolexpr1638;
bool mu__boolexpr1639;
bool mu__boolexpr1640;
bool mu__boolexpr1641;
bool mu__boolexpr1642;
bool mu__boolexpr1643;
bool mu__boolexpr1644;
bool mu__boolexpr1645;
bool mu__boolexpr1646;
bool mu__boolexpr1647;
  if (!((mu_n1) != (mu_n2))) mu__boolexpr1647 = FALSE ;
  else {
  mu__boolexpr1647 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1647)) mu__boolexpr1646 = FALSE ;
  else {
  mu__boolexpr1646 = ((mu_Routers[mu_n1]) == (0)) ; 
}
  if (!(mu__boolexpr1646)) mu__boolexpr1645 = FALSE ;
  else {
  mu__boolexpr1645 = ((mu_Routers[mu_n2]) == (0)) ; 
}
  if (!(mu__boolexpr1645)) mu__boolexpr1644 = FALSE ;
  else {
  mu__boolexpr1644 = ((mu_Tokens[mu_n1]) > (0)) ; 
}
  if (!(mu__boolexpr1644)) mu__boolexpr1643 = FALSE ;
  else {
  mu__boolexpr1643 = ((mu_n3) != (mu_n4)) ; 
}
  if (!(mu__boolexpr1643)) mu__boolexpr1642 = FALSE ;
  else {
  mu__boolexpr1642 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1642)) mu__boolexpr1641 = FALSE ;
  else {
  mu__boolexpr1641 = ((mu_Routers[mu_n3]) == (0)) ; 
}
  if (!(mu__boolexpr1641)) mu__boolexpr1640 = FALSE ;
  else {
  mu__boolexpr1640 = ((mu_Routers[mu_n4]) == (0)) ; 
}
  if (!(mu__boolexpr1640)) mu__boolexpr1639 = FALSE ;
  else {
  mu__boolexpr1639 = ((mu_Tokens[mu_n3]) > (0)) ; 
}
  if (!(mu__boolexpr1639)) mu__boolexpr1638 = FALSE ;
  else {
  mu__boolexpr1638 = ((mu_IncomingQueue[mu_n5][mu_EntryPath[mu_n5]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr1638)) mu__boolexpr1637 = FALSE ;
  else {
  mu__boolexpr1637 = ((mu_TailPointers[mu_ExitPath[mu_n5]][mu_n5]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1637)) mu__boolexpr1636 = FALSE ;
  else {
  mu__boolexpr1636 = ((mu_IncomingQueue[mu_n6][mu_EntryPath[mu_n6]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr1636)) mu__boolexpr1635 = FALSE ;
  else {
  mu__boolexpr1635 = ((mu_TailPointers[mu_ExitPath[mu_n6]][mu_n6]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1635)) mu__boolexpr1634 = FALSE ;
  else {
  mu__boolexpr1634 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr1634)) mu__boolexpr1633 = FALSE ;
  else {
  mu__boolexpr1633 = ((mu_n1) != (mu_n5)) ; 
}
  if (!(mu__boolexpr1633)) mu__boolexpr1632 = FALSE ;
  else {
  mu__boolexpr1632 = ((mu_n1) != (mu_n6)) ; 
}
  if (!(mu__boolexpr1632)) mu__boolexpr1631 = FALSE ;
  else {
  mu__boolexpr1631 = ((mu_n3) != (mu_n5)) ; 
}
  if (!(mu__boolexpr1631)) mu__boolexpr1630 = FALSE ;
  else {
  mu__boolexpr1630 = ((mu_n3) != (mu_n6)) ; 
}
  if (!(mu__boolexpr1630)) mu__boolexpr1629 = FALSE ;
  else {
  mu__boolexpr1629 = ((mu_n5) != (mu_n6)) ; 
}
	      if (mu__boolexpr1629) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 45824;
    mu_n6.value((r % 4) + 0);
    r = r / 4;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_268 mu_n6;
    mu_n6.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_267 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_266 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_265 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_264 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_263 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_SendRequest ( (int)mu_n1, mu_ExitPath[mu_n1], (int)mu_n2 );
mu_Tokens[mu_n1] = (mu_Tokens[mu_n1]) - (1);
mu_SendRequest ( (int)mu_n3, mu_ExitPath[mu_n3], (int)mu_n4 );
mu_Tokens[mu_n3] = (mu_Tokens[mu_n3]) - (1);
mu_ProcessRequest ( (int)mu_n5, mu_EntryPath[mu_n5], mu_ExitPath[mu_n5] );
mu_ProcessFwdResponse ( (int)mu_n6, mu_EntryPath[mu_n6], mu_ExitPath[mu_n6] );
  };

};
/******************** RuleBase60 ********************/
class RuleBase60
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_262 mu_n6;
    mu_n6.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_261 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_260 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_259 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_258 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_257 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Send request + Send request + Process request + Process request, n6:%s, n5:%s, n4:%s, n3:%s, n2:%s, n1:%s", mu_n6.Name(), mu_n5.Name(), mu_n4.Name(), mu_n3.Name(), mu_n2.Name(), mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_262 mu_n6;
    mu_n6.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_261 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_260 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_259 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_258 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_257 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr1648;
bool mu__boolexpr1649;
bool mu__boolexpr1650;
bool mu__boolexpr1651;
bool mu__boolexpr1652;
bool mu__boolexpr1653;
bool mu__boolexpr1654;
bool mu__boolexpr1655;
bool mu__boolexpr1656;
bool mu__boolexpr1657;
bool mu__boolexpr1658;
bool mu__boolexpr1659;
bool mu__boolexpr1660;
bool mu__boolexpr1661;
bool mu__boolexpr1662;
bool mu__boolexpr1663;
bool mu__boolexpr1664;
bool mu__boolexpr1665;
bool mu__boolexpr1666;
  if (!((mu_n1) != (mu_n2))) mu__boolexpr1666 = FALSE ;
  else {
  mu__boolexpr1666 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1666)) mu__boolexpr1665 = FALSE ;
  else {
  mu__boolexpr1665 = ((mu_Routers[mu_n1]) == (0)) ; 
}
  if (!(mu__boolexpr1665)) mu__boolexpr1664 = FALSE ;
  else {
  mu__boolexpr1664 = ((mu_Routers[mu_n2]) == (0)) ; 
}
  if (!(mu__boolexpr1664)) mu__boolexpr1663 = FALSE ;
  else {
  mu__boolexpr1663 = ((mu_Tokens[mu_n1]) > (0)) ; 
}
  if (!(mu__boolexpr1663)) mu__boolexpr1662 = FALSE ;
  else {
  mu__boolexpr1662 = ((mu_n3) != (mu_n4)) ; 
}
  if (!(mu__boolexpr1662)) mu__boolexpr1661 = FALSE ;
  else {
  mu__boolexpr1661 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1661)) mu__boolexpr1660 = FALSE ;
  else {
  mu__boolexpr1660 = ((mu_Routers[mu_n3]) == (0)) ; 
}
  if (!(mu__boolexpr1660)) mu__boolexpr1659 = FALSE ;
  else {
  mu__boolexpr1659 = ((mu_Routers[mu_n4]) == (0)) ; 
}
  if (!(mu__boolexpr1659)) mu__boolexpr1658 = FALSE ;
  else {
  mu__boolexpr1658 = ((mu_Tokens[mu_n3]) > (0)) ; 
}
  if (!(mu__boolexpr1658)) mu__boolexpr1657 = FALSE ;
  else {
  mu__boolexpr1657 = ((mu_IncomingQueue[mu_n5][mu_EntryPath[mu_n5]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr1657)) mu__boolexpr1656 = FALSE ;
  else {
  mu__boolexpr1656 = ((mu_TailPointers[mu_ExitPath[mu_n5]][mu_n5]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1656)) mu__boolexpr1655 = FALSE ;
  else {
  mu__boolexpr1655 = ((mu_IncomingQueue[mu_n6][mu_EntryPath[mu_n6]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr1655)) mu__boolexpr1654 = FALSE ;
  else {
  mu__boolexpr1654 = ((mu_TailPointers[mu_ExitPath[mu_n6]][mu_n6]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1654)) mu__boolexpr1653 = FALSE ;
  else {
  mu__boolexpr1653 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr1653)) mu__boolexpr1652 = FALSE ;
  else {
  mu__boolexpr1652 = ((mu_n1) != (mu_n5)) ; 
}
  if (!(mu__boolexpr1652)) mu__boolexpr1651 = FALSE ;
  else {
  mu__boolexpr1651 = ((mu_n1) != (mu_n6)) ; 
}
  if (!(mu__boolexpr1651)) mu__boolexpr1650 = FALSE ;
  else {
  mu__boolexpr1650 = ((mu_n3) != (mu_n5)) ; 
}
  if (!(mu__boolexpr1650)) mu__boolexpr1649 = FALSE ;
  else {
  mu__boolexpr1649 = ((mu_n3) != (mu_n6)) ; 
}
  if (!(mu__boolexpr1649)) mu__boolexpr1648 = FALSE ;
  else {
  mu__boolexpr1648 = ((mu_n5) != (mu_n6)) ; 
}
    return mu__boolexpr1648;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 49920;
    static mu__subrange_262 mu_n6;
    mu_n6.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_261 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_260 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_259 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_258 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_257 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 54016 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr1667;
bool mu__boolexpr1668;
bool mu__boolexpr1669;
bool mu__boolexpr1670;
bool mu__boolexpr1671;
bool mu__boolexpr1672;
bool mu__boolexpr1673;
bool mu__boolexpr1674;
bool mu__boolexpr1675;
bool mu__boolexpr1676;
bool mu__boolexpr1677;
bool mu__boolexpr1678;
bool mu__boolexpr1679;
bool mu__boolexpr1680;
bool mu__boolexpr1681;
bool mu__boolexpr1682;
bool mu__boolexpr1683;
bool mu__boolexpr1684;
bool mu__boolexpr1685;
  if (!((mu_n1) != (mu_n2))) mu__boolexpr1685 = FALSE ;
  else {
  mu__boolexpr1685 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1685)) mu__boolexpr1684 = FALSE ;
  else {
  mu__boolexpr1684 = ((mu_Routers[mu_n1]) == (0)) ; 
}
  if (!(mu__boolexpr1684)) mu__boolexpr1683 = FALSE ;
  else {
  mu__boolexpr1683 = ((mu_Routers[mu_n2]) == (0)) ; 
}
  if (!(mu__boolexpr1683)) mu__boolexpr1682 = FALSE ;
  else {
  mu__boolexpr1682 = ((mu_Tokens[mu_n1]) > (0)) ; 
}
  if (!(mu__boolexpr1682)) mu__boolexpr1681 = FALSE ;
  else {
  mu__boolexpr1681 = ((mu_n3) != (mu_n4)) ; 
}
  if (!(mu__boolexpr1681)) mu__boolexpr1680 = FALSE ;
  else {
  mu__boolexpr1680 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1680)) mu__boolexpr1679 = FALSE ;
  else {
  mu__boolexpr1679 = ((mu_Routers[mu_n3]) == (0)) ; 
}
  if (!(mu__boolexpr1679)) mu__boolexpr1678 = FALSE ;
  else {
  mu__boolexpr1678 = ((mu_Routers[mu_n4]) == (0)) ; 
}
  if (!(mu__boolexpr1678)) mu__boolexpr1677 = FALSE ;
  else {
  mu__boolexpr1677 = ((mu_Tokens[mu_n3]) > (0)) ; 
}
  if (!(mu__boolexpr1677)) mu__boolexpr1676 = FALSE ;
  else {
  mu__boolexpr1676 = ((mu_IncomingQueue[mu_n5][mu_EntryPath[mu_n5]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr1676)) mu__boolexpr1675 = FALSE ;
  else {
  mu__boolexpr1675 = ((mu_TailPointers[mu_ExitPath[mu_n5]][mu_n5]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1675)) mu__boolexpr1674 = FALSE ;
  else {
  mu__boolexpr1674 = ((mu_IncomingQueue[mu_n6][mu_EntryPath[mu_n6]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr1674)) mu__boolexpr1673 = FALSE ;
  else {
  mu__boolexpr1673 = ((mu_TailPointers[mu_ExitPath[mu_n6]][mu_n6]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1673)) mu__boolexpr1672 = FALSE ;
  else {
  mu__boolexpr1672 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr1672)) mu__boolexpr1671 = FALSE ;
  else {
  mu__boolexpr1671 = ((mu_n1) != (mu_n5)) ; 
}
  if (!(mu__boolexpr1671)) mu__boolexpr1670 = FALSE ;
  else {
  mu__boolexpr1670 = ((mu_n1) != (mu_n6)) ; 
}
  if (!(mu__boolexpr1670)) mu__boolexpr1669 = FALSE ;
  else {
  mu__boolexpr1669 = ((mu_n3) != (mu_n5)) ; 
}
  if (!(mu__boolexpr1669)) mu__boolexpr1668 = FALSE ;
  else {
  mu__boolexpr1668 = ((mu_n3) != (mu_n6)) ; 
}
  if (!(mu__boolexpr1668)) mu__boolexpr1667 = FALSE ;
  else {
  mu__boolexpr1667 = ((mu_n5) != (mu_n6)) ; 
}
	      if (mu__boolexpr1667) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 49920;
    mu_n6.value((r % 4) + 0);
    r = r / 4;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_262 mu_n6;
    mu_n6.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_261 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_260 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_259 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_258 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_257 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_SendRequest ( (int)mu_n1, mu_ExitPath[mu_n1], (int)mu_n2 );
mu_Tokens[mu_n1] = (mu_Tokens[mu_n1]) - (1);
mu_SendRequest ( (int)mu_n3, mu_ExitPath[mu_n3], (int)mu_n4 );
mu_Tokens[mu_n3] = (mu_Tokens[mu_n3]) - (1);
mu_ProcessRequest ( (int)mu_n5, mu_EntryPath[mu_n5], mu_ExitPath[mu_n5] );
mu_ProcessRequest ( (int)mu_n6, mu_EntryPath[mu_n6], mu_ExitPath[mu_n6] );
  };

};
/******************** RuleBase61 ********************/
class RuleBase61
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_256 mu_n6;
    mu_n6.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_255 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_254 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_253 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_252 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_251 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Send request + Send request + Process fwd_request + Process response, n6:%s, n5:%s, n4:%s, n3:%s, n2:%s, n1:%s", mu_n6.Name(), mu_n5.Name(), mu_n4.Name(), mu_n3.Name(), mu_n2.Name(), mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_256 mu_n6;
    mu_n6.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_255 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_254 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_253 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_252 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_251 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr1686;
bool mu__boolexpr1687;
bool mu__boolexpr1688;
bool mu__boolexpr1689;
bool mu__boolexpr1690;
bool mu__boolexpr1691;
bool mu__boolexpr1692;
bool mu__boolexpr1693;
bool mu__boolexpr1694;
bool mu__boolexpr1695;
bool mu__boolexpr1696;
bool mu__boolexpr1697;
bool mu__boolexpr1698;
bool mu__boolexpr1699;
bool mu__boolexpr1700;
bool mu__boolexpr1701;
bool mu__boolexpr1702;
bool mu__boolexpr1703;
  if (!((mu_n1) != (mu_n2))) mu__boolexpr1703 = FALSE ;
  else {
  mu__boolexpr1703 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1703)) mu__boolexpr1702 = FALSE ;
  else {
  mu__boolexpr1702 = ((mu_Routers[mu_n1]) == (0)) ; 
}
  if (!(mu__boolexpr1702)) mu__boolexpr1701 = FALSE ;
  else {
  mu__boolexpr1701 = ((mu_Routers[mu_n2]) == (0)) ; 
}
  if (!(mu__boolexpr1701)) mu__boolexpr1700 = FALSE ;
  else {
  mu__boolexpr1700 = ((mu_Tokens[mu_n1]) > (0)) ; 
}
  if (!(mu__boolexpr1700)) mu__boolexpr1699 = FALSE ;
  else {
  mu__boolexpr1699 = ((mu_n3) != (mu_n4)) ; 
}
  if (!(mu__boolexpr1699)) mu__boolexpr1698 = FALSE ;
  else {
  mu__boolexpr1698 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1698)) mu__boolexpr1697 = FALSE ;
  else {
  mu__boolexpr1697 = ((mu_Routers[mu_n3]) == (0)) ; 
}
  if (!(mu__boolexpr1697)) mu__boolexpr1696 = FALSE ;
  else {
  mu__boolexpr1696 = ((mu_Routers[mu_n4]) == (0)) ; 
}
  if (!(mu__boolexpr1696)) mu__boolexpr1695 = FALSE ;
  else {
  mu__boolexpr1695 = ((mu_Tokens[mu_n3]) > (0)) ; 
}
  if (!(mu__boolexpr1695)) mu__boolexpr1694 = FALSE ;
  else {
  mu__boolexpr1694 = ((mu_IncomingQueue[mu_n5][mu_EntryPath[mu_n5]][0].mu_msg_type) == (mu_fwd_request)) ; 
}
  if (!(mu__boolexpr1694)) mu__boolexpr1693 = FALSE ;
  else {
  mu__boolexpr1693 = ((mu_TailPointers[mu_ExitPath[mu_n5]][mu_n5]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1693)) mu__boolexpr1692 = FALSE ;
  else {
  mu__boolexpr1692 = ((mu_IncomingQueue[mu_n6][mu_EntryPath[mu_n6]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr1692)) mu__boolexpr1691 = FALSE ;
  else {
  mu__boolexpr1691 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr1691)) mu__boolexpr1690 = FALSE ;
  else {
  mu__boolexpr1690 = ((mu_n1) != (mu_n5)) ; 
}
  if (!(mu__boolexpr1690)) mu__boolexpr1689 = FALSE ;
  else {
  mu__boolexpr1689 = ((mu_n1) != (mu_n6)) ; 
}
  if (!(mu__boolexpr1689)) mu__boolexpr1688 = FALSE ;
  else {
  mu__boolexpr1688 = ((mu_n3) != (mu_n5)) ; 
}
  if (!(mu__boolexpr1688)) mu__boolexpr1687 = FALSE ;
  else {
  mu__boolexpr1687 = ((mu_n3) != (mu_n6)) ; 
}
  if (!(mu__boolexpr1687)) mu__boolexpr1686 = FALSE ;
  else {
  mu__boolexpr1686 = ((mu_n5) != (mu_n6)) ; 
}
    return mu__boolexpr1686;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 54016;
    static mu__subrange_256 mu_n6;
    mu_n6.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_255 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_254 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_253 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_252 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_251 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 58112 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr1704;
bool mu__boolexpr1705;
bool mu__boolexpr1706;
bool mu__boolexpr1707;
bool mu__boolexpr1708;
bool mu__boolexpr1709;
bool mu__boolexpr1710;
bool mu__boolexpr1711;
bool mu__boolexpr1712;
bool mu__boolexpr1713;
bool mu__boolexpr1714;
bool mu__boolexpr1715;
bool mu__boolexpr1716;
bool mu__boolexpr1717;
bool mu__boolexpr1718;
bool mu__boolexpr1719;
bool mu__boolexpr1720;
bool mu__boolexpr1721;
  if (!((mu_n1) != (mu_n2))) mu__boolexpr1721 = FALSE ;
  else {
  mu__boolexpr1721 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1721)) mu__boolexpr1720 = FALSE ;
  else {
  mu__boolexpr1720 = ((mu_Routers[mu_n1]) == (0)) ; 
}
  if (!(mu__boolexpr1720)) mu__boolexpr1719 = FALSE ;
  else {
  mu__boolexpr1719 = ((mu_Routers[mu_n2]) == (0)) ; 
}
  if (!(mu__boolexpr1719)) mu__boolexpr1718 = FALSE ;
  else {
  mu__boolexpr1718 = ((mu_Tokens[mu_n1]) > (0)) ; 
}
  if (!(mu__boolexpr1718)) mu__boolexpr1717 = FALSE ;
  else {
  mu__boolexpr1717 = ((mu_n3) != (mu_n4)) ; 
}
  if (!(mu__boolexpr1717)) mu__boolexpr1716 = FALSE ;
  else {
  mu__boolexpr1716 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1716)) mu__boolexpr1715 = FALSE ;
  else {
  mu__boolexpr1715 = ((mu_Routers[mu_n3]) == (0)) ; 
}
  if (!(mu__boolexpr1715)) mu__boolexpr1714 = FALSE ;
  else {
  mu__boolexpr1714 = ((mu_Routers[mu_n4]) == (0)) ; 
}
  if (!(mu__boolexpr1714)) mu__boolexpr1713 = FALSE ;
  else {
  mu__boolexpr1713 = ((mu_Tokens[mu_n3]) > (0)) ; 
}
  if (!(mu__boolexpr1713)) mu__boolexpr1712 = FALSE ;
  else {
  mu__boolexpr1712 = ((mu_IncomingQueue[mu_n5][mu_EntryPath[mu_n5]][0].mu_msg_type) == (mu_fwd_request)) ; 
}
  if (!(mu__boolexpr1712)) mu__boolexpr1711 = FALSE ;
  else {
  mu__boolexpr1711 = ((mu_TailPointers[mu_ExitPath[mu_n5]][mu_n5]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1711)) mu__boolexpr1710 = FALSE ;
  else {
  mu__boolexpr1710 = ((mu_IncomingQueue[mu_n6][mu_EntryPath[mu_n6]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr1710)) mu__boolexpr1709 = FALSE ;
  else {
  mu__boolexpr1709 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr1709)) mu__boolexpr1708 = FALSE ;
  else {
  mu__boolexpr1708 = ((mu_n1) != (mu_n5)) ; 
}
  if (!(mu__boolexpr1708)) mu__boolexpr1707 = FALSE ;
  else {
  mu__boolexpr1707 = ((mu_n1) != (mu_n6)) ; 
}
  if (!(mu__boolexpr1707)) mu__boolexpr1706 = FALSE ;
  else {
  mu__boolexpr1706 = ((mu_n3) != (mu_n5)) ; 
}
  if (!(mu__boolexpr1706)) mu__boolexpr1705 = FALSE ;
  else {
  mu__boolexpr1705 = ((mu_n3) != (mu_n6)) ; 
}
  if (!(mu__boolexpr1705)) mu__boolexpr1704 = FALSE ;
  else {
  mu__boolexpr1704 = ((mu_n5) != (mu_n6)) ; 
}
	      if (mu__boolexpr1704) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 54016;
    mu_n6.value((r % 4) + 0);
    r = r / 4;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_256 mu_n6;
    mu_n6.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_255 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_254 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_253 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_252 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_251 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_SendRequest ( (int)mu_n1, mu_ExitPath[mu_n1], (int)mu_n2 );
mu_Tokens[mu_n1] = (mu_Tokens[mu_n1]) - (1);
mu_SendRequest ( (int)mu_n3, mu_ExitPath[mu_n3], (int)mu_n4 );
mu_Tokens[mu_n3] = (mu_Tokens[mu_n3]) - (1);
mu_ProcessFwdRequest ( (int)mu_n5, mu_EntryPath[mu_n5], mu_ExitPath[mu_n5] );
mu_ProcessResponse ( (int)mu_n6, mu_EntryPath[mu_n6] );
mu_Tokens[mu_n6] = (mu_Tokens[mu_n6]) + (1);
  };

};
/******************** RuleBase62 ********************/
class RuleBase62
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_250 mu_n6;
    mu_n6.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_249 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_248 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_247 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_246 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_245 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Send request + Send request + Process fwd_request + Process fwd_response, n6:%s, n5:%s, n4:%s, n3:%s, n2:%s, n1:%s", mu_n6.Name(), mu_n5.Name(), mu_n4.Name(), mu_n3.Name(), mu_n2.Name(), mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_250 mu_n6;
    mu_n6.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_249 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_248 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_247 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_246 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_245 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr1722;
bool mu__boolexpr1723;
bool mu__boolexpr1724;
bool mu__boolexpr1725;
bool mu__boolexpr1726;
bool mu__boolexpr1727;
bool mu__boolexpr1728;
bool mu__boolexpr1729;
bool mu__boolexpr1730;
bool mu__boolexpr1731;
bool mu__boolexpr1732;
bool mu__boolexpr1733;
bool mu__boolexpr1734;
bool mu__boolexpr1735;
bool mu__boolexpr1736;
bool mu__boolexpr1737;
bool mu__boolexpr1738;
bool mu__boolexpr1739;
bool mu__boolexpr1740;
  if (!((mu_n1) != (mu_n2))) mu__boolexpr1740 = FALSE ;
  else {
  mu__boolexpr1740 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1740)) mu__boolexpr1739 = FALSE ;
  else {
  mu__boolexpr1739 = ((mu_Routers[mu_n1]) == (0)) ; 
}
  if (!(mu__boolexpr1739)) mu__boolexpr1738 = FALSE ;
  else {
  mu__boolexpr1738 = ((mu_Routers[mu_n2]) == (0)) ; 
}
  if (!(mu__boolexpr1738)) mu__boolexpr1737 = FALSE ;
  else {
  mu__boolexpr1737 = ((mu_Tokens[mu_n1]) > (0)) ; 
}
  if (!(mu__boolexpr1737)) mu__boolexpr1736 = FALSE ;
  else {
  mu__boolexpr1736 = ((mu_n3) != (mu_n4)) ; 
}
  if (!(mu__boolexpr1736)) mu__boolexpr1735 = FALSE ;
  else {
  mu__boolexpr1735 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1735)) mu__boolexpr1734 = FALSE ;
  else {
  mu__boolexpr1734 = ((mu_Routers[mu_n3]) == (0)) ; 
}
  if (!(mu__boolexpr1734)) mu__boolexpr1733 = FALSE ;
  else {
  mu__boolexpr1733 = ((mu_Routers[mu_n4]) == (0)) ; 
}
  if (!(mu__boolexpr1733)) mu__boolexpr1732 = FALSE ;
  else {
  mu__boolexpr1732 = ((mu_Tokens[mu_n3]) > (0)) ; 
}
  if (!(mu__boolexpr1732)) mu__boolexpr1731 = FALSE ;
  else {
  mu__boolexpr1731 = ((mu_IncomingQueue[mu_n5][mu_EntryPath[mu_n5]][0].mu_msg_type) == (mu_fwd_request)) ; 
}
  if (!(mu__boolexpr1731)) mu__boolexpr1730 = FALSE ;
  else {
  mu__boolexpr1730 = ((mu_TailPointers[mu_ExitPath[mu_n5]][mu_n5]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1730)) mu__boolexpr1729 = FALSE ;
  else {
  mu__boolexpr1729 = ((mu_IncomingQueue[mu_n6][mu_EntryPath[mu_n6]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr1729)) mu__boolexpr1728 = FALSE ;
  else {
  mu__boolexpr1728 = ((mu_TailPointers[mu_ExitPath[mu_n6]][mu_n6]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1728)) mu__boolexpr1727 = FALSE ;
  else {
  mu__boolexpr1727 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr1727)) mu__boolexpr1726 = FALSE ;
  else {
  mu__boolexpr1726 = ((mu_n1) != (mu_n5)) ; 
}
  if (!(mu__boolexpr1726)) mu__boolexpr1725 = FALSE ;
  else {
  mu__boolexpr1725 = ((mu_n1) != (mu_n6)) ; 
}
  if (!(mu__boolexpr1725)) mu__boolexpr1724 = FALSE ;
  else {
  mu__boolexpr1724 = ((mu_n3) != (mu_n5)) ; 
}
  if (!(mu__boolexpr1724)) mu__boolexpr1723 = FALSE ;
  else {
  mu__boolexpr1723 = ((mu_n3) != (mu_n6)) ; 
}
  if (!(mu__boolexpr1723)) mu__boolexpr1722 = FALSE ;
  else {
  mu__boolexpr1722 = ((mu_n5) != (mu_n6)) ; 
}
    return mu__boolexpr1722;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 58112;
    static mu__subrange_250 mu_n6;
    mu_n6.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_249 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_248 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_247 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_246 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_245 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 62208 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr1741;
bool mu__boolexpr1742;
bool mu__boolexpr1743;
bool mu__boolexpr1744;
bool mu__boolexpr1745;
bool mu__boolexpr1746;
bool mu__boolexpr1747;
bool mu__boolexpr1748;
bool mu__boolexpr1749;
bool mu__boolexpr1750;
bool mu__boolexpr1751;
bool mu__boolexpr1752;
bool mu__boolexpr1753;
bool mu__boolexpr1754;
bool mu__boolexpr1755;
bool mu__boolexpr1756;
bool mu__boolexpr1757;
bool mu__boolexpr1758;
bool mu__boolexpr1759;
  if (!((mu_n1) != (mu_n2))) mu__boolexpr1759 = FALSE ;
  else {
  mu__boolexpr1759 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1759)) mu__boolexpr1758 = FALSE ;
  else {
  mu__boolexpr1758 = ((mu_Routers[mu_n1]) == (0)) ; 
}
  if (!(mu__boolexpr1758)) mu__boolexpr1757 = FALSE ;
  else {
  mu__boolexpr1757 = ((mu_Routers[mu_n2]) == (0)) ; 
}
  if (!(mu__boolexpr1757)) mu__boolexpr1756 = FALSE ;
  else {
  mu__boolexpr1756 = ((mu_Tokens[mu_n1]) > (0)) ; 
}
  if (!(mu__boolexpr1756)) mu__boolexpr1755 = FALSE ;
  else {
  mu__boolexpr1755 = ((mu_n3) != (mu_n4)) ; 
}
  if (!(mu__boolexpr1755)) mu__boolexpr1754 = FALSE ;
  else {
  mu__boolexpr1754 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1754)) mu__boolexpr1753 = FALSE ;
  else {
  mu__boolexpr1753 = ((mu_Routers[mu_n3]) == (0)) ; 
}
  if (!(mu__boolexpr1753)) mu__boolexpr1752 = FALSE ;
  else {
  mu__boolexpr1752 = ((mu_Routers[mu_n4]) == (0)) ; 
}
  if (!(mu__boolexpr1752)) mu__boolexpr1751 = FALSE ;
  else {
  mu__boolexpr1751 = ((mu_Tokens[mu_n3]) > (0)) ; 
}
  if (!(mu__boolexpr1751)) mu__boolexpr1750 = FALSE ;
  else {
  mu__boolexpr1750 = ((mu_IncomingQueue[mu_n5][mu_EntryPath[mu_n5]][0].mu_msg_type) == (mu_fwd_request)) ; 
}
  if (!(mu__boolexpr1750)) mu__boolexpr1749 = FALSE ;
  else {
  mu__boolexpr1749 = ((mu_TailPointers[mu_ExitPath[mu_n5]][mu_n5]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1749)) mu__boolexpr1748 = FALSE ;
  else {
  mu__boolexpr1748 = ((mu_IncomingQueue[mu_n6][mu_EntryPath[mu_n6]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr1748)) mu__boolexpr1747 = FALSE ;
  else {
  mu__boolexpr1747 = ((mu_TailPointers[mu_ExitPath[mu_n6]][mu_n6]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1747)) mu__boolexpr1746 = FALSE ;
  else {
  mu__boolexpr1746 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr1746)) mu__boolexpr1745 = FALSE ;
  else {
  mu__boolexpr1745 = ((mu_n1) != (mu_n5)) ; 
}
  if (!(mu__boolexpr1745)) mu__boolexpr1744 = FALSE ;
  else {
  mu__boolexpr1744 = ((mu_n1) != (mu_n6)) ; 
}
  if (!(mu__boolexpr1744)) mu__boolexpr1743 = FALSE ;
  else {
  mu__boolexpr1743 = ((mu_n3) != (mu_n5)) ; 
}
  if (!(mu__boolexpr1743)) mu__boolexpr1742 = FALSE ;
  else {
  mu__boolexpr1742 = ((mu_n3) != (mu_n6)) ; 
}
  if (!(mu__boolexpr1742)) mu__boolexpr1741 = FALSE ;
  else {
  mu__boolexpr1741 = ((mu_n5) != (mu_n6)) ; 
}
	      if (mu__boolexpr1741) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 58112;
    mu_n6.value((r % 4) + 0);
    r = r / 4;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_250 mu_n6;
    mu_n6.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_249 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_248 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_247 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_246 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_245 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_SendRequest ( (int)mu_n1, mu_ExitPath[mu_n1], (int)mu_n2 );
mu_Tokens[mu_n1] = (mu_Tokens[mu_n1]) - (1);
mu_SendRequest ( (int)mu_n3, mu_ExitPath[mu_n3], (int)mu_n4 );
mu_Tokens[mu_n3] = (mu_Tokens[mu_n3]) - (1);
mu_ProcessFwdRequest ( (int)mu_n5, mu_EntryPath[mu_n5], mu_ExitPath[mu_n5] );
mu_ProcessFwdResponse ( (int)mu_n6, mu_EntryPath[mu_n6], mu_ExitPath[mu_n6] );
  };

};
/******************** RuleBase63 ********************/
class RuleBase63
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_244 mu_n6;
    mu_n6.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_243 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_242 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_241 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_240 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_239 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Send request + Send request + Process fwd_request + Process request, n6:%s, n5:%s, n4:%s, n3:%s, n2:%s, n1:%s", mu_n6.Name(), mu_n5.Name(), mu_n4.Name(), mu_n3.Name(), mu_n2.Name(), mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_244 mu_n6;
    mu_n6.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_243 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_242 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_241 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_240 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_239 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr1760;
bool mu__boolexpr1761;
bool mu__boolexpr1762;
bool mu__boolexpr1763;
bool mu__boolexpr1764;
bool mu__boolexpr1765;
bool mu__boolexpr1766;
bool mu__boolexpr1767;
bool mu__boolexpr1768;
bool mu__boolexpr1769;
bool mu__boolexpr1770;
bool mu__boolexpr1771;
bool mu__boolexpr1772;
bool mu__boolexpr1773;
bool mu__boolexpr1774;
bool mu__boolexpr1775;
bool mu__boolexpr1776;
bool mu__boolexpr1777;
bool mu__boolexpr1778;
  if (!((mu_n1) != (mu_n2))) mu__boolexpr1778 = FALSE ;
  else {
  mu__boolexpr1778 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1778)) mu__boolexpr1777 = FALSE ;
  else {
  mu__boolexpr1777 = ((mu_Routers[mu_n1]) == (0)) ; 
}
  if (!(mu__boolexpr1777)) mu__boolexpr1776 = FALSE ;
  else {
  mu__boolexpr1776 = ((mu_Routers[mu_n2]) == (0)) ; 
}
  if (!(mu__boolexpr1776)) mu__boolexpr1775 = FALSE ;
  else {
  mu__boolexpr1775 = ((mu_Tokens[mu_n1]) > (0)) ; 
}
  if (!(mu__boolexpr1775)) mu__boolexpr1774 = FALSE ;
  else {
  mu__boolexpr1774 = ((mu_n3) != (mu_n4)) ; 
}
  if (!(mu__boolexpr1774)) mu__boolexpr1773 = FALSE ;
  else {
  mu__boolexpr1773 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1773)) mu__boolexpr1772 = FALSE ;
  else {
  mu__boolexpr1772 = ((mu_Routers[mu_n3]) == (0)) ; 
}
  if (!(mu__boolexpr1772)) mu__boolexpr1771 = FALSE ;
  else {
  mu__boolexpr1771 = ((mu_Routers[mu_n4]) == (0)) ; 
}
  if (!(mu__boolexpr1771)) mu__boolexpr1770 = FALSE ;
  else {
  mu__boolexpr1770 = ((mu_Tokens[mu_n3]) > (0)) ; 
}
  if (!(mu__boolexpr1770)) mu__boolexpr1769 = FALSE ;
  else {
  mu__boolexpr1769 = ((mu_IncomingQueue[mu_n5][mu_EntryPath[mu_n5]][0].mu_msg_type) == (mu_fwd_request)) ; 
}
  if (!(mu__boolexpr1769)) mu__boolexpr1768 = FALSE ;
  else {
  mu__boolexpr1768 = ((mu_TailPointers[mu_ExitPath[mu_n5]][mu_n5]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1768)) mu__boolexpr1767 = FALSE ;
  else {
  mu__boolexpr1767 = ((mu_IncomingQueue[mu_n6][mu_EntryPath[mu_n6]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr1767)) mu__boolexpr1766 = FALSE ;
  else {
  mu__boolexpr1766 = ((mu_TailPointers[mu_ExitPath[mu_n6]][mu_n6]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1766)) mu__boolexpr1765 = FALSE ;
  else {
  mu__boolexpr1765 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr1765)) mu__boolexpr1764 = FALSE ;
  else {
  mu__boolexpr1764 = ((mu_n1) != (mu_n5)) ; 
}
  if (!(mu__boolexpr1764)) mu__boolexpr1763 = FALSE ;
  else {
  mu__boolexpr1763 = ((mu_n1) != (mu_n6)) ; 
}
  if (!(mu__boolexpr1763)) mu__boolexpr1762 = FALSE ;
  else {
  mu__boolexpr1762 = ((mu_n3) != (mu_n5)) ; 
}
  if (!(mu__boolexpr1762)) mu__boolexpr1761 = FALSE ;
  else {
  mu__boolexpr1761 = ((mu_n3) != (mu_n6)) ; 
}
  if (!(mu__boolexpr1761)) mu__boolexpr1760 = FALSE ;
  else {
  mu__boolexpr1760 = ((mu_n5) != (mu_n6)) ; 
}
    return mu__boolexpr1760;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 62208;
    static mu__subrange_244 mu_n6;
    mu_n6.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_243 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_242 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_241 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_240 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_239 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 66304 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr1779;
bool mu__boolexpr1780;
bool mu__boolexpr1781;
bool mu__boolexpr1782;
bool mu__boolexpr1783;
bool mu__boolexpr1784;
bool mu__boolexpr1785;
bool mu__boolexpr1786;
bool mu__boolexpr1787;
bool mu__boolexpr1788;
bool mu__boolexpr1789;
bool mu__boolexpr1790;
bool mu__boolexpr1791;
bool mu__boolexpr1792;
bool mu__boolexpr1793;
bool mu__boolexpr1794;
bool mu__boolexpr1795;
bool mu__boolexpr1796;
bool mu__boolexpr1797;
  if (!((mu_n1) != (mu_n2))) mu__boolexpr1797 = FALSE ;
  else {
  mu__boolexpr1797 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1797)) mu__boolexpr1796 = FALSE ;
  else {
  mu__boolexpr1796 = ((mu_Routers[mu_n1]) == (0)) ; 
}
  if (!(mu__boolexpr1796)) mu__boolexpr1795 = FALSE ;
  else {
  mu__boolexpr1795 = ((mu_Routers[mu_n2]) == (0)) ; 
}
  if (!(mu__boolexpr1795)) mu__boolexpr1794 = FALSE ;
  else {
  mu__boolexpr1794 = ((mu_Tokens[mu_n1]) > (0)) ; 
}
  if (!(mu__boolexpr1794)) mu__boolexpr1793 = FALSE ;
  else {
  mu__boolexpr1793 = ((mu_n3) != (mu_n4)) ; 
}
  if (!(mu__boolexpr1793)) mu__boolexpr1792 = FALSE ;
  else {
  mu__boolexpr1792 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1792)) mu__boolexpr1791 = FALSE ;
  else {
  mu__boolexpr1791 = ((mu_Routers[mu_n3]) == (0)) ; 
}
  if (!(mu__boolexpr1791)) mu__boolexpr1790 = FALSE ;
  else {
  mu__boolexpr1790 = ((mu_Routers[mu_n4]) == (0)) ; 
}
  if (!(mu__boolexpr1790)) mu__boolexpr1789 = FALSE ;
  else {
  mu__boolexpr1789 = ((mu_Tokens[mu_n3]) > (0)) ; 
}
  if (!(mu__boolexpr1789)) mu__boolexpr1788 = FALSE ;
  else {
  mu__boolexpr1788 = ((mu_IncomingQueue[mu_n5][mu_EntryPath[mu_n5]][0].mu_msg_type) == (mu_fwd_request)) ; 
}
  if (!(mu__boolexpr1788)) mu__boolexpr1787 = FALSE ;
  else {
  mu__boolexpr1787 = ((mu_TailPointers[mu_ExitPath[mu_n5]][mu_n5]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1787)) mu__boolexpr1786 = FALSE ;
  else {
  mu__boolexpr1786 = ((mu_IncomingQueue[mu_n6][mu_EntryPath[mu_n6]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr1786)) mu__boolexpr1785 = FALSE ;
  else {
  mu__boolexpr1785 = ((mu_TailPointers[mu_ExitPath[mu_n6]][mu_n6]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1785)) mu__boolexpr1784 = FALSE ;
  else {
  mu__boolexpr1784 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr1784)) mu__boolexpr1783 = FALSE ;
  else {
  mu__boolexpr1783 = ((mu_n1) != (mu_n5)) ; 
}
  if (!(mu__boolexpr1783)) mu__boolexpr1782 = FALSE ;
  else {
  mu__boolexpr1782 = ((mu_n1) != (mu_n6)) ; 
}
  if (!(mu__boolexpr1782)) mu__boolexpr1781 = FALSE ;
  else {
  mu__boolexpr1781 = ((mu_n3) != (mu_n5)) ; 
}
  if (!(mu__boolexpr1781)) mu__boolexpr1780 = FALSE ;
  else {
  mu__boolexpr1780 = ((mu_n3) != (mu_n6)) ; 
}
  if (!(mu__boolexpr1780)) mu__boolexpr1779 = FALSE ;
  else {
  mu__boolexpr1779 = ((mu_n5) != (mu_n6)) ; 
}
	      if (mu__boolexpr1779) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 62208;
    mu_n6.value((r % 4) + 0);
    r = r / 4;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_244 mu_n6;
    mu_n6.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_243 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_242 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_241 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_240 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_239 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_SendRequest ( (int)mu_n1, mu_ExitPath[mu_n1], (int)mu_n2 );
mu_Tokens[mu_n1] = (mu_Tokens[mu_n1]) - (1);
mu_SendRequest ( (int)mu_n3, mu_ExitPath[mu_n3], (int)mu_n4 );
mu_Tokens[mu_n3] = (mu_Tokens[mu_n3]) - (1);
mu_ProcessFwdRequest ( (int)mu_n5, mu_EntryPath[mu_n5], mu_ExitPath[mu_n5] );
mu_ProcessRequest ( (int)mu_n6, mu_EntryPath[mu_n6], mu_ExitPath[mu_n6] );
  };

};
/******************** RuleBase64 ********************/
class RuleBase64
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_238 mu_n6;
    mu_n6.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_237 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_236 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_235 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_234 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_233 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Send request + Send request + Process fwd_request + Process fwd_request, n6:%s, n5:%s, n4:%s, n3:%s, n2:%s, n1:%s", mu_n6.Name(), mu_n5.Name(), mu_n4.Name(), mu_n3.Name(), mu_n2.Name(), mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_238 mu_n6;
    mu_n6.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_237 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_236 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_235 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_234 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_233 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr1798;
bool mu__boolexpr1799;
bool mu__boolexpr1800;
bool mu__boolexpr1801;
bool mu__boolexpr1802;
bool mu__boolexpr1803;
bool mu__boolexpr1804;
bool mu__boolexpr1805;
bool mu__boolexpr1806;
bool mu__boolexpr1807;
bool mu__boolexpr1808;
bool mu__boolexpr1809;
bool mu__boolexpr1810;
bool mu__boolexpr1811;
bool mu__boolexpr1812;
bool mu__boolexpr1813;
bool mu__boolexpr1814;
bool mu__boolexpr1815;
bool mu__boolexpr1816;
  if (!((mu_n1) != (mu_n2))) mu__boolexpr1816 = FALSE ;
  else {
  mu__boolexpr1816 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1816)) mu__boolexpr1815 = FALSE ;
  else {
  mu__boolexpr1815 = ((mu_Routers[mu_n1]) == (0)) ; 
}
  if (!(mu__boolexpr1815)) mu__boolexpr1814 = FALSE ;
  else {
  mu__boolexpr1814 = ((mu_Routers[mu_n2]) == (0)) ; 
}
  if (!(mu__boolexpr1814)) mu__boolexpr1813 = FALSE ;
  else {
  mu__boolexpr1813 = ((mu_Tokens[mu_n1]) > (0)) ; 
}
  if (!(mu__boolexpr1813)) mu__boolexpr1812 = FALSE ;
  else {
  mu__boolexpr1812 = ((mu_n3) != (mu_n4)) ; 
}
  if (!(mu__boolexpr1812)) mu__boolexpr1811 = FALSE ;
  else {
  mu__boolexpr1811 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1811)) mu__boolexpr1810 = FALSE ;
  else {
  mu__boolexpr1810 = ((mu_Routers[mu_n3]) == (0)) ; 
}
  if (!(mu__boolexpr1810)) mu__boolexpr1809 = FALSE ;
  else {
  mu__boolexpr1809 = ((mu_Routers[mu_n4]) == (0)) ; 
}
  if (!(mu__boolexpr1809)) mu__boolexpr1808 = FALSE ;
  else {
  mu__boolexpr1808 = ((mu_Tokens[mu_n3]) > (0)) ; 
}
  if (!(mu__boolexpr1808)) mu__boolexpr1807 = FALSE ;
  else {
  mu__boolexpr1807 = ((mu_IncomingQueue[mu_n5][mu_EntryPath[mu_n5]][0].mu_msg_type) == (mu_fwd_request)) ; 
}
  if (!(mu__boolexpr1807)) mu__boolexpr1806 = FALSE ;
  else {
  mu__boolexpr1806 = ((mu_TailPointers[mu_ExitPath[mu_n5]][mu_n5]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1806)) mu__boolexpr1805 = FALSE ;
  else {
  mu__boolexpr1805 = ((mu_IncomingQueue[mu_n6][mu_EntryPath[mu_n6]][0].mu_msg_type) == (mu_fwd_request)) ; 
}
  if (!(mu__boolexpr1805)) mu__boolexpr1804 = FALSE ;
  else {
  mu__boolexpr1804 = ((mu_TailPointers[mu_ExitPath[mu_n6]][mu_n6]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1804)) mu__boolexpr1803 = FALSE ;
  else {
  mu__boolexpr1803 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr1803)) mu__boolexpr1802 = FALSE ;
  else {
  mu__boolexpr1802 = ((mu_n1) != (mu_n5)) ; 
}
  if (!(mu__boolexpr1802)) mu__boolexpr1801 = FALSE ;
  else {
  mu__boolexpr1801 = ((mu_n1) != (mu_n6)) ; 
}
  if (!(mu__boolexpr1801)) mu__boolexpr1800 = FALSE ;
  else {
  mu__boolexpr1800 = ((mu_n3) != (mu_n5)) ; 
}
  if (!(mu__boolexpr1800)) mu__boolexpr1799 = FALSE ;
  else {
  mu__boolexpr1799 = ((mu_n3) != (mu_n6)) ; 
}
  if (!(mu__boolexpr1799)) mu__boolexpr1798 = FALSE ;
  else {
  mu__boolexpr1798 = ((mu_n5) != (mu_n6)) ; 
}
    return mu__boolexpr1798;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 66304;
    static mu__subrange_238 mu_n6;
    mu_n6.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_237 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_236 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_235 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_234 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_233 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 70400 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr1817;
bool mu__boolexpr1818;
bool mu__boolexpr1819;
bool mu__boolexpr1820;
bool mu__boolexpr1821;
bool mu__boolexpr1822;
bool mu__boolexpr1823;
bool mu__boolexpr1824;
bool mu__boolexpr1825;
bool mu__boolexpr1826;
bool mu__boolexpr1827;
bool mu__boolexpr1828;
bool mu__boolexpr1829;
bool mu__boolexpr1830;
bool mu__boolexpr1831;
bool mu__boolexpr1832;
bool mu__boolexpr1833;
bool mu__boolexpr1834;
bool mu__boolexpr1835;
  if (!((mu_n1) != (mu_n2))) mu__boolexpr1835 = FALSE ;
  else {
  mu__boolexpr1835 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1835)) mu__boolexpr1834 = FALSE ;
  else {
  mu__boolexpr1834 = ((mu_Routers[mu_n1]) == (0)) ; 
}
  if (!(mu__boolexpr1834)) mu__boolexpr1833 = FALSE ;
  else {
  mu__boolexpr1833 = ((mu_Routers[mu_n2]) == (0)) ; 
}
  if (!(mu__boolexpr1833)) mu__boolexpr1832 = FALSE ;
  else {
  mu__boolexpr1832 = ((mu_Tokens[mu_n1]) > (0)) ; 
}
  if (!(mu__boolexpr1832)) mu__boolexpr1831 = FALSE ;
  else {
  mu__boolexpr1831 = ((mu_n3) != (mu_n4)) ; 
}
  if (!(mu__boolexpr1831)) mu__boolexpr1830 = FALSE ;
  else {
  mu__boolexpr1830 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1830)) mu__boolexpr1829 = FALSE ;
  else {
  mu__boolexpr1829 = ((mu_Routers[mu_n3]) == (0)) ; 
}
  if (!(mu__boolexpr1829)) mu__boolexpr1828 = FALSE ;
  else {
  mu__boolexpr1828 = ((mu_Routers[mu_n4]) == (0)) ; 
}
  if (!(mu__boolexpr1828)) mu__boolexpr1827 = FALSE ;
  else {
  mu__boolexpr1827 = ((mu_Tokens[mu_n3]) > (0)) ; 
}
  if (!(mu__boolexpr1827)) mu__boolexpr1826 = FALSE ;
  else {
  mu__boolexpr1826 = ((mu_IncomingQueue[mu_n5][mu_EntryPath[mu_n5]][0].mu_msg_type) == (mu_fwd_request)) ; 
}
  if (!(mu__boolexpr1826)) mu__boolexpr1825 = FALSE ;
  else {
  mu__boolexpr1825 = ((mu_TailPointers[mu_ExitPath[mu_n5]][mu_n5]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1825)) mu__boolexpr1824 = FALSE ;
  else {
  mu__boolexpr1824 = ((mu_IncomingQueue[mu_n6][mu_EntryPath[mu_n6]][0].mu_msg_type) == (mu_fwd_request)) ; 
}
  if (!(mu__boolexpr1824)) mu__boolexpr1823 = FALSE ;
  else {
  mu__boolexpr1823 = ((mu_TailPointers[mu_ExitPath[mu_n6]][mu_n6]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1823)) mu__boolexpr1822 = FALSE ;
  else {
  mu__boolexpr1822 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr1822)) mu__boolexpr1821 = FALSE ;
  else {
  mu__boolexpr1821 = ((mu_n1) != (mu_n5)) ; 
}
  if (!(mu__boolexpr1821)) mu__boolexpr1820 = FALSE ;
  else {
  mu__boolexpr1820 = ((mu_n1) != (mu_n6)) ; 
}
  if (!(mu__boolexpr1820)) mu__boolexpr1819 = FALSE ;
  else {
  mu__boolexpr1819 = ((mu_n3) != (mu_n5)) ; 
}
  if (!(mu__boolexpr1819)) mu__boolexpr1818 = FALSE ;
  else {
  mu__boolexpr1818 = ((mu_n3) != (mu_n6)) ; 
}
  if (!(mu__boolexpr1818)) mu__boolexpr1817 = FALSE ;
  else {
  mu__boolexpr1817 = ((mu_n5) != (mu_n6)) ; 
}
	      if (mu__boolexpr1817) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 66304;
    mu_n6.value((r % 4) + 0);
    r = r / 4;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_238 mu_n6;
    mu_n6.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_237 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_236 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_235 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_234 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_233 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_SendRequest ( (int)mu_n1, mu_ExitPath[mu_n1], (int)mu_n2 );
mu_Tokens[mu_n1] = (mu_Tokens[mu_n1]) - (1);
mu_SendRequest ( (int)mu_n3, mu_ExitPath[mu_n3], (int)mu_n4 );
mu_Tokens[mu_n3] = (mu_Tokens[mu_n3]) - (1);
mu_ProcessFwdRequest ( (int)mu_n5, mu_EntryPath[mu_n5], mu_ExitPath[mu_n5] );
mu_ProcessFwdRequest ( (int)mu_n6, mu_EntryPath[mu_n6], mu_ExitPath[mu_n6] );
  };

};
/******************** RuleBase65 ********************/
class RuleBase65
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_232 mu_n7;
    mu_n7.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_231 mu_n6;
    mu_n6.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_230 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_229 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_228 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_227 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_226 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Send request + Send request + Send request + Process response, n7:%s, n6:%s, n5:%s, n4:%s, n3:%s, n2:%s, n1:%s", mu_n7.Name(), mu_n6.Name(), mu_n5.Name(), mu_n4.Name(), mu_n3.Name(), mu_n2.Name(), mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_232 mu_n7;
    mu_n7.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_231 mu_n6;
    mu_n6.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_230 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_229 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_228 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_227 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_226 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr1836;
bool mu__boolexpr1837;
bool mu__boolexpr1838;
bool mu__boolexpr1839;
bool mu__boolexpr1840;
bool mu__boolexpr1841;
bool mu__boolexpr1842;
bool mu__boolexpr1843;
bool mu__boolexpr1844;
bool mu__boolexpr1845;
bool mu__boolexpr1846;
bool mu__boolexpr1847;
bool mu__boolexpr1848;
bool mu__boolexpr1849;
bool mu__boolexpr1850;
bool mu__boolexpr1851;
bool mu__boolexpr1852;
bool mu__boolexpr1853;
bool mu__boolexpr1854;
bool mu__boolexpr1855;
bool mu__boolexpr1856;
  if (!((mu_n1) != (mu_n2))) mu__boolexpr1856 = FALSE ;
  else {
  mu__boolexpr1856 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1856)) mu__boolexpr1855 = FALSE ;
  else {
  mu__boolexpr1855 = ((mu_Routers[mu_n1]) == (0)) ; 
}
  if (!(mu__boolexpr1855)) mu__boolexpr1854 = FALSE ;
  else {
  mu__boolexpr1854 = ((mu_Routers[mu_n2]) == (0)) ; 
}
  if (!(mu__boolexpr1854)) mu__boolexpr1853 = FALSE ;
  else {
  mu__boolexpr1853 = ((mu_Tokens[mu_n1]) > (0)) ; 
}
  if (!(mu__boolexpr1853)) mu__boolexpr1852 = FALSE ;
  else {
  mu__boolexpr1852 = ((mu_n3) != (mu_n4)) ; 
}
  if (!(mu__boolexpr1852)) mu__boolexpr1851 = FALSE ;
  else {
  mu__boolexpr1851 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1851)) mu__boolexpr1850 = FALSE ;
  else {
  mu__boolexpr1850 = ((mu_Routers[mu_n3]) == (0)) ; 
}
  if (!(mu__boolexpr1850)) mu__boolexpr1849 = FALSE ;
  else {
  mu__boolexpr1849 = ((mu_Routers[mu_n4]) == (0)) ; 
}
  if (!(mu__boolexpr1849)) mu__boolexpr1848 = FALSE ;
  else {
  mu__boolexpr1848 = ((mu_Tokens[mu_n3]) > (0)) ; 
}
  if (!(mu__boolexpr1848)) mu__boolexpr1847 = FALSE ;
  else {
  mu__boolexpr1847 = ((mu_n5) != (mu_n6)) ; 
}
  if (!(mu__boolexpr1847)) mu__boolexpr1846 = FALSE ;
  else {
  mu__boolexpr1846 = ((mu_TailPointers[mu_ExitPath[mu_n5]][mu_n5]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1846)) mu__boolexpr1845 = FALSE ;
  else {
  mu__boolexpr1845 = ((mu_Routers[mu_n5]) == (0)) ; 
}
  if (!(mu__boolexpr1845)) mu__boolexpr1844 = FALSE ;
  else {
  mu__boolexpr1844 = ((mu_Routers[mu_n6]) == (0)) ; 
}
  if (!(mu__boolexpr1844)) mu__boolexpr1843 = FALSE ;
  else {
  mu__boolexpr1843 = ((mu_Tokens[mu_n5]) > (0)) ; 
}
  if (!(mu__boolexpr1843)) mu__boolexpr1842 = FALSE ;
  else {
  mu__boolexpr1842 = ((mu_IncomingQueue[mu_n7][mu_EntryPath[mu_n7]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr1842)) mu__boolexpr1841 = FALSE ;
  else {
  mu__boolexpr1841 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr1841)) mu__boolexpr1840 = FALSE ;
  else {
  mu__boolexpr1840 = ((mu_n1) != (mu_n5)) ; 
}
  if (!(mu__boolexpr1840)) mu__boolexpr1839 = FALSE ;
  else {
  mu__boolexpr1839 = ((mu_n1) != (mu_n7)) ; 
}
  if (!(mu__boolexpr1839)) mu__boolexpr1838 = FALSE ;
  else {
  mu__boolexpr1838 = ((mu_n3) != (mu_n5)) ; 
}
  if (!(mu__boolexpr1838)) mu__boolexpr1837 = FALSE ;
  else {
  mu__boolexpr1837 = ((mu_n3) != (mu_n7)) ; 
}
  if (!(mu__boolexpr1837)) mu__boolexpr1836 = FALSE ;
  else {
  mu__boolexpr1836 = ((mu_n5) != (mu_n7)) ; 
}
    return mu__boolexpr1836;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 70400;
    static mu__subrange_232 mu_n7;
    mu_n7.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_231 mu_n6;
    mu_n6.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_230 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_229 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_228 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_227 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_226 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 86784 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr1857;
bool mu__boolexpr1858;
bool mu__boolexpr1859;
bool mu__boolexpr1860;
bool mu__boolexpr1861;
bool mu__boolexpr1862;
bool mu__boolexpr1863;
bool mu__boolexpr1864;
bool mu__boolexpr1865;
bool mu__boolexpr1866;
bool mu__boolexpr1867;
bool mu__boolexpr1868;
bool mu__boolexpr1869;
bool mu__boolexpr1870;
bool mu__boolexpr1871;
bool mu__boolexpr1872;
bool mu__boolexpr1873;
bool mu__boolexpr1874;
bool mu__boolexpr1875;
bool mu__boolexpr1876;
bool mu__boolexpr1877;
  if (!((mu_n1) != (mu_n2))) mu__boolexpr1877 = FALSE ;
  else {
  mu__boolexpr1877 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1877)) mu__boolexpr1876 = FALSE ;
  else {
  mu__boolexpr1876 = ((mu_Routers[mu_n1]) == (0)) ; 
}
  if (!(mu__boolexpr1876)) mu__boolexpr1875 = FALSE ;
  else {
  mu__boolexpr1875 = ((mu_Routers[mu_n2]) == (0)) ; 
}
  if (!(mu__boolexpr1875)) mu__boolexpr1874 = FALSE ;
  else {
  mu__boolexpr1874 = ((mu_Tokens[mu_n1]) > (0)) ; 
}
  if (!(mu__boolexpr1874)) mu__boolexpr1873 = FALSE ;
  else {
  mu__boolexpr1873 = ((mu_n3) != (mu_n4)) ; 
}
  if (!(mu__boolexpr1873)) mu__boolexpr1872 = FALSE ;
  else {
  mu__boolexpr1872 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1872)) mu__boolexpr1871 = FALSE ;
  else {
  mu__boolexpr1871 = ((mu_Routers[mu_n3]) == (0)) ; 
}
  if (!(mu__boolexpr1871)) mu__boolexpr1870 = FALSE ;
  else {
  mu__boolexpr1870 = ((mu_Routers[mu_n4]) == (0)) ; 
}
  if (!(mu__boolexpr1870)) mu__boolexpr1869 = FALSE ;
  else {
  mu__boolexpr1869 = ((mu_Tokens[mu_n3]) > (0)) ; 
}
  if (!(mu__boolexpr1869)) mu__boolexpr1868 = FALSE ;
  else {
  mu__boolexpr1868 = ((mu_n5) != (mu_n6)) ; 
}
  if (!(mu__boolexpr1868)) mu__boolexpr1867 = FALSE ;
  else {
  mu__boolexpr1867 = ((mu_TailPointers[mu_ExitPath[mu_n5]][mu_n5]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1867)) mu__boolexpr1866 = FALSE ;
  else {
  mu__boolexpr1866 = ((mu_Routers[mu_n5]) == (0)) ; 
}
  if (!(mu__boolexpr1866)) mu__boolexpr1865 = FALSE ;
  else {
  mu__boolexpr1865 = ((mu_Routers[mu_n6]) == (0)) ; 
}
  if (!(mu__boolexpr1865)) mu__boolexpr1864 = FALSE ;
  else {
  mu__boolexpr1864 = ((mu_Tokens[mu_n5]) > (0)) ; 
}
  if (!(mu__boolexpr1864)) mu__boolexpr1863 = FALSE ;
  else {
  mu__boolexpr1863 = ((mu_IncomingQueue[mu_n7][mu_EntryPath[mu_n7]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr1863)) mu__boolexpr1862 = FALSE ;
  else {
  mu__boolexpr1862 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr1862)) mu__boolexpr1861 = FALSE ;
  else {
  mu__boolexpr1861 = ((mu_n1) != (mu_n5)) ; 
}
  if (!(mu__boolexpr1861)) mu__boolexpr1860 = FALSE ;
  else {
  mu__boolexpr1860 = ((mu_n1) != (mu_n7)) ; 
}
  if (!(mu__boolexpr1860)) mu__boolexpr1859 = FALSE ;
  else {
  mu__boolexpr1859 = ((mu_n3) != (mu_n5)) ; 
}
  if (!(mu__boolexpr1859)) mu__boolexpr1858 = FALSE ;
  else {
  mu__boolexpr1858 = ((mu_n3) != (mu_n7)) ; 
}
  if (!(mu__boolexpr1858)) mu__boolexpr1857 = FALSE ;
  else {
  mu__boolexpr1857 = ((mu_n5) != (mu_n7)) ; 
}
	      if (mu__boolexpr1857) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 70400;
    mu_n7.value((r % 4) + 0);
    r = r / 4;
    mu_n6.value((r % 4) + 0);
    r = r / 4;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_232 mu_n7;
    mu_n7.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_231 mu_n6;
    mu_n6.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_230 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_229 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_228 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_227 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_226 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_SendRequest ( (int)mu_n1, mu_ExitPath[mu_n1], (int)mu_n2 );
mu_Tokens[mu_n1] = (mu_Tokens[mu_n1]) - (1);
mu_SendRequest ( (int)mu_n3, mu_ExitPath[mu_n3], (int)mu_n4 );
mu_Tokens[mu_n3] = (mu_Tokens[mu_n3]) - (1);
mu_SendRequest ( (int)mu_n5, mu_ExitPath[mu_n5], (int)mu_n6 );
mu_Tokens[mu_n5] = (mu_Tokens[mu_n5]) - (1);
mu_ProcessResponse ( (int)mu_n7, mu_EntryPath[mu_n7] );
mu_Tokens[mu_n7] = (mu_Tokens[mu_n7]) + (1);
  };

};
/******************** RuleBase66 ********************/
class RuleBase66
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_225 mu_n7;
    mu_n7.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_224 mu_n6;
    mu_n6.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_223 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_222 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_221 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_220 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_219 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Send request + Send request + Send request + Process fwd_response, n7:%s, n6:%s, n5:%s, n4:%s, n3:%s, n2:%s, n1:%s", mu_n7.Name(), mu_n6.Name(), mu_n5.Name(), mu_n4.Name(), mu_n3.Name(), mu_n2.Name(), mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_225 mu_n7;
    mu_n7.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_224 mu_n6;
    mu_n6.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_223 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_222 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_221 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_220 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_219 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr1878;
bool mu__boolexpr1879;
bool mu__boolexpr1880;
bool mu__boolexpr1881;
bool mu__boolexpr1882;
bool mu__boolexpr1883;
bool mu__boolexpr1884;
bool mu__boolexpr1885;
bool mu__boolexpr1886;
bool mu__boolexpr1887;
bool mu__boolexpr1888;
bool mu__boolexpr1889;
bool mu__boolexpr1890;
bool mu__boolexpr1891;
bool mu__boolexpr1892;
bool mu__boolexpr1893;
bool mu__boolexpr1894;
bool mu__boolexpr1895;
bool mu__boolexpr1896;
bool mu__boolexpr1897;
bool mu__boolexpr1898;
bool mu__boolexpr1899;
  if (!((mu_n1) != (mu_n2))) mu__boolexpr1899 = FALSE ;
  else {
  mu__boolexpr1899 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1899)) mu__boolexpr1898 = FALSE ;
  else {
  mu__boolexpr1898 = ((mu_Routers[mu_n1]) == (0)) ; 
}
  if (!(mu__boolexpr1898)) mu__boolexpr1897 = FALSE ;
  else {
  mu__boolexpr1897 = ((mu_Routers[mu_n2]) == (0)) ; 
}
  if (!(mu__boolexpr1897)) mu__boolexpr1896 = FALSE ;
  else {
  mu__boolexpr1896 = ((mu_Tokens[mu_n1]) > (0)) ; 
}
  if (!(mu__boolexpr1896)) mu__boolexpr1895 = FALSE ;
  else {
  mu__boolexpr1895 = ((mu_n3) != (mu_n4)) ; 
}
  if (!(mu__boolexpr1895)) mu__boolexpr1894 = FALSE ;
  else {
  mu__boolexpr1894 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1894)) mu__boolexpr1893 = FALSE ;
  else {
  mu__boolexpr1893 = ((mu_Routers[mu_n3]) == (0)) ; 
}
  if (!(mu__boolexpr1893)) mu__boolexpr1892 = FALSE ;
  else {
  mu__boolexpr1892 = ((mu_Routers[mu_n4]) == (0)) ; 
}
  if (!(mu__boolexpr1892)) mu__boolexpr1891 = FALSE ;
  else {
  mu__boolexpr1891 = ((mu_Tokens[mu_n3]) > (0)) ; 
}
  if (!(mu__boolexpr1891)) mu__boolexpr1890 = FALSE ;
  else {
  mu__boolexpr1890 = ((mu_n5) != (mu_n6)) ; 
}
  if (!(mu__boolexpr1890)) mu__boolexpr1889 = FALSE ;
  else {
  mu__boolexpr1889 = ((mu_TailPointers[mu_ExitPath[mu_n5]][mu_n5]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1889)) mu__boolexpr1888 = FALSE ;
  else {
  mu__boolexpr1888 = ((mu_Routers[mu_n5]) == (0)) ; 
}
  if (!(mu__boolexpr1888)) mu__boolexpr1887 = FALSE ;
  else {
  mu__boolexpr1887 = ((mu_Routers[mu_n6]) == (0)) ; 
}
  if (!(mu__boolexpr1887)) mu__boolexpr1886 = FALSE ;
  else {
  mu__boolexpr1886 = ((mu_Tokens[mu_n5]) > (0)) ; 
}
  if (!(mu__boolexpr1886)) mu__boolexpr1885 = FALSE ;
  else {
  mu__boolexpr1885 = ((mu_IncomingQueue[mu_n7][mu_EntryPath[mu_n7]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr1885)) mu__boolexpr1884 = FALSE ;
  else {
  mu__boolexpr1884 = ((mu_TailPointers[mu_ExitPath[mu_n7]][mu_n7]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1884)) mu__boolexpr1883 = FALSE ;
  else {
  mu__boolexpr1883 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr1883)) mu__boolexpr1882 = FALSE ;
  else {
  mu__boolexpr1882 = ((mu_n1) != (mu_n5)) ; 
}
  if (!(mu__boolexpr1882)) mu__boolexpr1881 = FALSE ;
  else {
  mu__boolexpr1881 = ((mu_n1) != (mu_n7)) ; 
}
  if (!(mu__boolexpr1881)) mu__boolexpr1880 = FALSE ;
  else {
  mu__boolexpr1880 = ((mu_n3) != (mu_n5)) ; 
}
  if (!(mu__boolexpr1880)) mu__boolexpr1879 = FALSE ;
  else {
  mu__boolexpr1879 = ((mu_n3) != (mu_n7)) ; 
}
  if (!(mu__boolexpr1879)) mu__boolexpr1878 = FALSE ;
  else {
  mu__boolexpr1878 = ((mu_n5) != (mu_n7)) ; 
}
    return mu__boolexpr1878;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 86784;
    static mu__subrange_225 mu_n7;
    mu_n7.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_224 mu_n6;
    mu_n6.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_223 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_222 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_221 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_220 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_219 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 103168 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr1900;
bool mu__boolexpr1901;
bool mu__boolexpr1902;
bool mu__boolexpr1903;
bool mu__boolexpr1904;
bool mu__boolexpr1905;
bool mu__boolexpr1906;
bool mu__boolexpr1907;
bool mu__boolexpr1908;
bool mu__boolexpr1909;
bool mu__boolexpr1910;
bool mu__boolexpr1911;
bool mu__boolexpr1912;
bool mu__boolexpr1913;
bool mu__boolexpr1914;
bool mu__boolexpr1915;
bool mu__boolexpr1916;
bool mu__boolexpr1917;
bool mu__boolexpr1918;
bool mu__boolexpr1919;
bool mu__boolexpr1920;
bool mu__boolexpr1921;
  if (!((mu_n1) != (mu_n2))) mu__boolexpr1921 = FALSE ;
  else {
  mu__boolexpr1921 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1921)) mu__boolexpr1920 = FALSE ;
  else {
  mu__boolexpr1920 = ((mu_Routers[mu_n1]) == (0)) ; 
}
  if (!(mu__boolexpr1920)) mu__boolexpr1919 = FALSE ;
  else {
  mu__boolexpr1919 = ((mu_Routers[mu_n2]) == (0)) ; 
}
  if (!(mu__boolexpr1919)) mu__boolexpr1918 = FALSE ;
  else {
  mu__boolexpr1918 = ((mu_Tokens[mu_n1]) > (0)) ; 
}
  if (!(mu__boolexpr1918)) mu__boolexpr1917 = FALSE ;
  else {
  mu__boolexpr1917 = ((mu_n3) != (mu_n4)) ; 
}
  if (!(mu__boolexpr1917)) mu__boolexpr1916 = FALSE ;
  else {
  mu__boolexpr1916 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1916)) mu__boolexpr1915 = FALSE ;
  else {
  mu__boolexpr1915 = ((mu_Routers[mu_n3]) == (0)) ; 
}
  if (!(mu__boolexpr1915)) mu__boolexpr1914 = FALSE ;
  else {
  mu__boolexpr1914 = ((mu_Routers[mu_n4]) == (0)) ; 
}
  if (!(mu__boolexpr1914)) mu__boolexpr1913 = FALSE ;
  else {
  mu__boolexpr1913 = ((mu_Tokens[mu_n3]) > (0)) ; 
}
  if (!(mu__boolexpr1913)) mu__boolexpr1912 = FALSE ;
  else {
  mu__boolexpr1912 = ((mu_n5) != (mu_n6)) ; 
}
  if (!(mu__boolexpr1912)) mu__boolexpr1911 = FALSE ;
  else {
  mu__boolexpr1911 = ((mu_TailPointers[mu_ExitPath[mu_n5]][mu_n5]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1911)) mu__boolexpr1910 = FALSE ;
  else {
  mu__boolexpr1910 = ((mu_Routers[mu_n5]) == (0)) ; 
}
  if (!(mu__boolexpr1910)) mu__boolexpr1909 = FALSE ;
  else {
  mu__boolexpr1909 = ((mu_Routers[mu_n6]) == (0)) ; 
}
  if (!(mu__boolexpr1909)) mu__boolexpr1908 = FALSE ;
  else {
  mu__boolexpr1908 = ((mu_Tokens[mu_n5]) > (0)) ; 
}
  if (!(mu__boolexpr1908)) mu__boolexpr1907 = FALSE ;
  else {
  mu__boolexpr1907 = ((mu_IncomingQueue[mu_n7][mu_EntryPath[mu_n7]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr1907)) mu__boolexpr1906 = FALSE ;
  else {
  mu__boolexpr1906 = ((mu_TailPointers[mu_ExitPath[mu_n7]][mu_n7]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1906)) mu__boolexpr1905 = FALSE ;
  else {
  mu__boolexpr1905 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr1905)) mu__boolexpr1904 = FALSE ;
  else {
  mu__boolexpr1904 = ((mu_n1) != (mu_n5)) ; 
}
  if (!(mu__boolexpr1904)) mu__boolexpr1903 = FALSE ;
  else {
  mu__boolexpr1903 = ((mu_n1) != (mu_n7)) ; 
}
  if (!(mu__boolexpr1903)) mu__boolexpr1902 = FALSE ;
  else {
  mu__boolexpr1902 = ((mu_n3) != (mu_n5)) ; 
}
  if (!(mu__boolexpr1902)) mu__boolexpr1901 = FALSE ;
  else {
  mu__boolexpr1901 = ((mu_n3) != (mu_n7)) ; 
}
  if (!(mu__boolexpr1901)) mu__boolexpr1900 = FALSE ;
  else {
  mu__boolexpr1900 = ((mu_n5) != (mu_n7)) ; 
}
	      if (mu__boolexpr1900) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 86784;
    mu_n7.value((r % 4) + 0);
    r = r / 4;
    mu_n6.value((r % 4) + 0);
    r = r / 4;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_225 mu_n7;
    mu_n7.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_224 mu_n6;
    mu_n6.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_223 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_222 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_221 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_220 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_219 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_SendRequest ( (int)mu_n1, mu_ExitPath[mu_n1], (int)mu_n2 );
mu_Tokens[mu_n1] = (mu_Tokens[mu_n1]) - (1);
mu_SendRequest ( (int)mu_n3, mu_ExitPath[mu_n3], (int)mu_n4 );
mu_Tokens[mu_n3] = (mu_Tokens[mu_n3]) - (1);
mu_SendRequest ( (int)mu_n5, mu_ExitPath[mu_n5], (int)mu_n6 );
mu_Tokens[mu_n5] = (mu_Tokens[mu_n5]) - (1);
mu_ProcessFwdResponse ( (int)mu_n7, mu_EntryPath[mu_n7], mu_ExitPath[mu_n7] );
  };

};
/******************** RuleBase67 ********************/
class RuleBase67
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_218 mu_n7;
    mu_n7.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_217 mu_n6;
    mu_n6.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_216 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_215 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_214 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_213 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_212 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Send request + Send request + Send request + Process request, n7:%s, n6:%s, n5:%s, n4:%s, n3:%s, n2:%s, n1:%s", mu_n7.Name(), mu_n6.Name(), mu_n5.Name(), mu_n4.Name(), mu_n3.Name(), mu_n2.Name(), mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_218 mu_n7;
    mu_n7.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_217 mu_n6;
    mu_n6.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_216 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_215 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_214 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_213 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_212 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr1922;
bool mu__boolexpr1923;
bool mu__boolexpr1924;
bool mu__boolexpr1925;
bool mu__boolexpr1926;
bool mu__boolexpr1927;
bool mu__boolexpr1928;
bool mu__boolexpr1929;
bool mu__boolexpr1930;
bool mu__boolexpr1931;
bool mu__boolexpr1932;
bool mu__boolexpr1933;
bool mu__boolexpr1934;
bool mu__boolexpr1935;
bool mu__boolexpr1936;
bool mu__boolexpr1937;
bool mu__boolexpr1938;
bool mu__boolexpr1939;
bool mu__boolexpr1940;
bool mu__boolexpr1941;
bool mu__boolexpr1942;
bool mu__boolexpr1943;
  if (!((mu_n1) != (mu_n2))) mu__boolexpr1943 = FALSE ;
  else {
  mu__boolexpr1943 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1943)) mu__boolexpr1942 = FALSE ;
  else {
  mu__boolexpr1942 = ((mu_Routers[mu_n1]) == (0)) ; 
}
  if (!(mu__boolexpr1942)) mu__boolexpr1941 = FALSE ;
  else {
  mu__boolexpr1941 = ((mu_Routers[mu_n2]) == (0)) ; 
}
  if (!(mu__boolexpr1941)) mu__boolexpr1940 = FALSE ;
  else {
  mu__boolexpr1940 = ((mu_Tokens[mu_n1]) > (0)) ; 
}
  if (!(mu__boolexpr1940)) mu__boolexpr1939 = FALSE ;
  else {
  mu__boolexpr1939 = ((mu_n3) != (mu_n4)) ; 
}
  if (!(mu__boolexpr1939)) mu__boolexpr1938 = FALSE ;
  else {
  mu__boolexpr1938 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1938)) mu__boolexpr1937 = FALSE ;
  else {
  mu__boolexpr1937 = ((mu_Routers[mu_n3]) == (0)) ; 
}
  if (!(mu__boolexpr1937)) mu__boolexpr1936 = FALSE ;
  else {
  mu__boolexpr1936 = ((mu_Routers[mu_n4]) == (0)) ; 
}
  if (!(mu__boolexpr1936)) mu__boolexpr1935 = FALSE ;
  else {
  mu__boolexpr1935 = ((mu_Tokens[mu_n3]) > (0)) ; 
}
  if (!(mu__boolexpr1935)) mu__boolexpr1934 = FALSE ;
  else {
  mu__boolexpr1934 = ((mu_n5) != (mu_n6)) ; 
}
  if (!(mu__boolexpr1934)) mu__boolexpr1933 = FALSE ;
  else {
  mu__boolexpr1933 = ((mu_TailPointers[mu_ExitPath[mu_n5]][mu_n5]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1933)) mu__boolexpr1932 = FALSE ;
  else {
  mu__boolexpr1932 = ((mu_Routers[mu_n5]) == (0)) ; 
}
  if (!(mu__boolexpr1932)) mu__boolexpr1931 = FALSE ;
  else {
  mu__boolexpr1931 = ((mu_Routers[mu_n6]) == (0)) ; 
}
  if (!(mu__boolexpr1931)) mu__boolexpr1930 = FALSE ;
  else {
  mu__boolexpr1930 = ((mu_Tokens[mu_n5]) > (0)) ; 
}
  if (!(mu__boolexpr1930)) mu__boolexpr1929 = FALSE ;
  else {
  mu__boolexpr1929 = ((mu_IncomingQueue[mu_n7][mu_EntryPath[mu_n7]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr1929)) mu__boolexpr1928 = FALSE ;
  else {
  mu__boolexpr1928 = ((mu_TailPointers[mu_ExitPath[mu_n7]][mu_n7]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1928)) mu__boolexpr1927 = FALSE ;
  else {
  mu__boolexpr1927 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr1927)) mu__boolexpr1926 = FALSE ;
  else {
  mu__boolexpr1926 = ((mu_n1) != (mu_n5)) ; 
}
  if (!(mu__boolexpr1926)) mu__boolexpr1925 = FALSE ;
  else {
  mu__boolexpr1925 = ((mu_n1) != (mu_n7)) ; 
}
  if (!(mu__boolexpr1925)) mu__boolexpr1924 = FALSE ;
  else {
  mu__boolexpr1924 = ((mu_n3) != (mu_n5)) ; 
}
  if (!(mu__boolexpr1924)) mu__boolexpr1923 = FALSE ;
  else {
  mu__boolexpr1923 = ((mu_n3) != (mu_n7)) ; 
}
  if (!(mu__boolexpr1923)) mu__boolexpr1922 = FALSE ;
  else {
  mu__boolexpr1922 = ((mu_n5) != (mu_n7)) ; 
}
    return mu__boolexpr1922;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 103168;
    static mu__subrange_218 mu_n7;
    mu_n7.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_217 mu_n6;
    mu_n6.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_216 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_215 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_214 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_213 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_212 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 119552 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr1944;
bool mu__boolexpr1945;
bool mu__boolexpr1946;
bool mu__boolexpr1947;
bool mu__boolexpr1948;
bool mu__boolexpr1949;
bool mu__boolexpr1950;
bool mu__boolexpr1951;
bool mu__boolexpr1952;
bool mu__boolexpr1953;
bool mu__boolexpr1954;
bool mu__boolexpr1955;
bool mu__boolexpr1956;
bool mu__boolexpr1957;
bool mu__boolexpr1958;
bool mu__boolexpr1959;
bool mu__boolexpr1960;
bool mu__boolexpr1961;
bool mu__boolexpr1962;
bool mu__boolexpr1963;
bool mu__boolexpr1964;
bool mu__boolexpr1965;
  if (!((mu_n1) != (mu_n2))) mu__boolexpr1965 = FALSE ;
  else {
  mu__boolexpr1965 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1965)) mu__boolexpr1964 = FALSE ;
  else {
  mu__boolexpr1964 = ((mu_Routers[mu_n1]) == (0)) ; 
}
  if (!(mu__boolexpr1964)) mu__boolexpr1963 = FALSE ;
  else {
  mu__boolexpr1963 = ((mu_Routers[mu_n2]) == (0)) ; 
}
  if (!(mu__boolexpr1963)) mu__boolexpr1962 = FALSE ;
  else {
  mu__boolexpr1962 = ((mu_Tokens[mu_n1]) > (0)) ; 
}
  if (!(mu__boolexpr1962)) mu__boolexpr1961 = FALSE ;
  else {
  mu__boolexpr1961 = ((mu_n3) != (mu_n4)) ; 
}
  if (!(mu__boolexpr1961)) mu__boolexpr1960 = FALSE ;
  else {
  mu__boolexpr1960 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1960)) mu__boolexpr1959 = FALSE ;
  else {
  mu__boolexpr1959 = ((mu_Routers[mu_n3]) == (0)) ; 
}
  if (!(mu__boolexpr1959)) mu__boolexpr1958 = FALSE ;
  else {
  mu__boolexpr1958 = ((mu_Routers[mu_n4]) == (0)) ; 
}
  if (!(mu__boolexpr1958)) mu__boolexpr1957 = FALSE ;
  else {
  mu__boolexpr1957 = ((mu_Tokens[mu_n3]) > (0)) ; 
}
  if (!(mu__boolexpr1957)) mu__boolexpr1956 = FALSE ;
  else {
  mu__boolexpr1956 = ((mu_n5) != (mu_n6)) ; 
}
  if (!(mu__boolexpr1956)) mu__boolexpr1955 = FALSE ;
  else {
  mu__boolexpr1955 = ((mu_TailPointers[mu_ExitPath[mu_n5]][mu_n5]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1955)) mu__boolexpr1954 = FALSE ;
  else {
  mu__boolexpr1954 = ((mu_Routers[mu_n5]) == (0)) ; 
}
  if (!(mu__boolexpr1954)) mu__boolexpr1953 = FALSE ;
  else {
  mu__boolexpr1953 = ((mu_Routers[mu_n6]) == (0)) ; 
}
  if (!(mu__boolexpr1953)) mu__boolexpr1952 = FALSE ;
  else {
  mu__boolexpr1952 = ((mu_Tokens[mu_n5]) > (0)) ; 
}
  if (!(mu__boolexpr1952)) mu__boolexpr1951 = FALSE ;
  else {
  mu__boolexpr1951 = ((mu_IncomingQueue[mu_n7][mu_EntryPath[mu_n7]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr1951)) mu__boolexpr1950 = FALSE ;
  else {
  mu__boolexpr1950 = ((mu_TailPointers[mu_ExitPath[mu_n7]][mu_n7]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1950)) mu__boolexpr1949 = FALSE ;
  else {
  mu__boolexpr1949 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr1949)) mu__boolexpr1948 = FALSE ;
  else {
  mu__boolexpr1948 = ((mu_n1) != (mu_n5)) ; 
}
  if (!(mu__boolexpr1948)) mu__boolexpr1947 = FALSE ;
  else {
  mu__boolexpr1947 = ((mu_n1) != (mu_n7)) ; 
}
  if (!(mu__boolexpr1947)) mu__boolexpr1946 = FALSE ;
  else {
  mu__boolexpr1946 = ((mu_n3) != (mu_n5)) ; 
}
  if (!(mu__boolexpr1946)) mu__boolexpr1945 = FALSE ;
  else {
  mu__boolexpr1945 = ((mu_n3) != (mu_n7)) ; 
}
  if (!(mu__boolexpr1945)) mu__boolexpr1944 = FALSE ;
  else {
  mu__boolexpr1944 = ((mu_n5) != (mu_n7)) ; 
}
	      if (mu__boolexpr1944) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 103168;
    mu_n7.value((r % 4) + 0);
    r = r / 4;
    mu_n6.value((r % 4) + 0);
    r = r / 4;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_218 mu_n7;
    mu_n7.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_217 mu_n6;
    mu_n6.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_216 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_215 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_214 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_213 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_212 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_SendRequest ( (int)mu_n1, mu_ExitPath[mu_n1], (int)mu_n2 );
mu_Tokens[mu_n1] = (mu_Tokens[mu_n1]) - (1);
mu_SendRequest ( (int)mu_n3, mu_ExitPath[mu_n3], (int)mu_n4 );
mu_Tokens[mu_n3] = (mu_Tokens[mu_n3]) - (1);
mu_SendRequest ( (int)mu_n5, mu_ExitPath[mu_n5], (int)mu_n6 );
mu_Tokens[mu_n5] = (mu_Tokens[mu_n5]) - (1);
mu_ProcessRequest ( (int)mu_n7, mu_EntryPath[mu_n7], mu_ExitPath[mu_n7] );
  };

};
/******************** RuleBase68 ********************/
class RuleBase68
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_211 mu_n7;
    mu_n7.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_210 mu_n6;
    mu_n6.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_209 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_208 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_207 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_206 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_205 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Send request + Send request + Send request + Process fwd_request, n7:%s, n6:%s, n5:%s, n4:%s, n3:%s, n2:%s, n1:%s", mu_n7.Name(), mu_n6.Name(), mu_n5.Name(), mu_n4.Name(), mu_n3.Name(), mu_n2.Name(), mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_211 mu_n7;
    mu_n7.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_210 mu_n6;
    mu_n6.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_209 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_208 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_207 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_206 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_205 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr1966;
bool mu__boolexpr1967;
bool mu__boolexpr1968;
bool mu__boolexpr1969;
bool mu__boolexpr1970;
bool mu__boolexpr1971;
bool mu__boolexpr1972;
bool mu__boolexpr1973;
bool mu__boolexpr1974;
bool mu__boolexpr1975;
bool mu__boolexpr1976;
bool mu__boolexpr1977;
bool mu__boolexpr1978;
bool mu__boolexpr1979;
bool mu__boolexpr1980;
bool mu__boolexpr1981;
bool mu__boolexpr1982;
bool mu__boolexpr1983;
bool mu__boolexpr1984;
bool mu__boolexpr1985;
bool mu__boolexpr1986;
bool mu__boolexpr1987;
  if (!((mu_n1) != (mu_n2))) mu__boolexpr1987 = FALSE ;
  else {
  mu__boolexpr1987 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1987)) mu__boolexpr1986 = FALSE ;
  else {
  mu__boolexpr1986 = ((mu_Routers[mu_n1]) == (0)) ; 
}
  if (!(mu__boolexpr1986)) mu__boolexpr1985 = FALSE ;
  else {
  mu__boolexpr1985 = ((mu_Routers[mu_n2]) == (0)) ; 
}
  if (!(mu__boolexpr1985)) mu__boolexpr1984 = FALSE ;
  else {
  mu__boolexpr1984 = ((mu_Tokens[mu_n1]) > (0)) ; 
}
  if (!(mu__boolexpr1984)) mu__boolexpr1983 = FALSE ;
  else {
  mu__boolexpr1983 = ((mu_n3) != (mu_n4)) ; 
}
  if (!(mu__boolexpr1983)) mu__boolexpr1982 = FALSE ;
  else {
  mu__boolexpr1982 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1982)) mu__boolexpr1981 = FALSE ;
  else {
  mu__boolexpr1981 = ((mu_Routers[mu_n3]) == (0)) ; 
}
  if (!(mu__boolexpr1981)) mu__boolexpr1980 = FALSE ;
  else {
  mu__boolexpr1980 = ((mu_Routers[mu_n4]) == (0)) ; 
}
  if (!(mu__boolexpr1980)) mu__boolexpr1979 = FALSE ;
  else {
  mu__boolexpr1979 = ((mu_Tokens[mu_n3]) > (0)) ; 
}
  if (!(mu__boolexpr1979)) mu__boolexpr1978 = FALSE ;
  else {
  mu__boolexpr1978 = ((mu_n5) != (mu_n6)) ; 
}
  if (!(mu__boolexpr1978)) mu__boolexpr1977 = FALSE ;
  else {
  mu__boolexpr1977 = ((mu_TailPointers[mu_ExitPath[mu_n5]][mu_n5]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1977)) mu__boolexpr1976 = FALSE ;
  else {
  mu__boolexpr1976 = ((mu_Routers[mu_n5]) == (0)) ; 
}
  if (!(mu__boolexpr1976)) mu__boolexpr1975 = FALSE ;
  else {
  mu__boolexpr1975 = ((mu_Routers[mu_n6]) == (0)) ; 
}
  if (!(mu__boolexpr1975)) mu__boolexpr1974 = FALSE ;
  else {
  mu__boolexpr1974 = ((mu_Tokens[mu_n5]) > (0)) ; 
}
  if (!(mu__boolexpr1974)) mu__boolexpr1973 = FALSE ;
  else {
  mu__boolexpr1973 = ((mu_IncomingQueue[mu_n7][mu_EntryPath[mu_n7]][0].mu_msg_type) == (mu_fwd_request)) ; 
}
  if (!(mu__boolexpr1973)) mu__boolexpr1972 = FALSE ;
  else {
  mu__boolexpr1972 = ((mu_TailPointers[mu_ExitPath[mu_n7]][mu_n7]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1972)) mu__boolexpr1971 = FALSE ;
  else {
  mu__boolexpr1971 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr1971)) mu__boolexpr1970 = FALSE ;
  else {
  mu__boolexpr1970 = ((mu_n1) != (mu_n5)) ; 
}
  if (!(mu__boolexpr1970)) mu__boolexpr1969 = FALSE ;
  else {
  mu__boolexpr1969 = ((mu_n1) != (mu_n7)) ; 
}
  if (!(mu__boolexpr1969)) mu__boolexpr1968 = FALSE ;
  else {
  mu__boolexpr1968 = ((mu_n3) != (mu_n5)) ; 
}
  if (!(mu__boolexpr1968)) mu__boolexpr1967 = FALSE ;
  else {
  mu__boolexpr1967 = ((mu_n3) != (mu_n7)) ; 
}
  if (!(mu__boolexpr1967)) mu__boolexpr1966 = FALSE ;
  else {
  mu__boolexpr1966 = ((mu_n5) != (mu_n7)) ; 
}
    return mu__boolexpr1966;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 119552;
    static mu__subrange_211 mu_n7;
    mu_n7.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_210 mu_n6;
    mu_n6.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_209 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_208 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_207 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_206 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_205 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 135936 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr1988;
bool mu__boolexpr1989;
bool mu__boolexpr1990;
bool mu__boolexpr1991;
bool mu__boolexpr1992;
bool mu__boolexpr1993;
bool mu__boolexpr1994;
bool mu__boolexpr1995;
bool mu__boolexpr1996;
bool mu__boolexpr1997;
bool mu__boolexpr1998;
bool mu__boolexpr1999;
bool mu__boolexpr2000;
bool mu__boolexpr2001;
bool mu__boolexpr2002;
bool mu__boolexpr2003;
bool mu__boolexpr2004;
bool mu__boolexpr2005;
bool mu__boolexpr2006;
bool mu__boolexpr2007;
bool mu__boolexpr2008;
bool mu__boolexpr2009;
  if (!((mu_n1) != (mu_n2))) mu__boolexpr2009 = FALSE ;
  else {
  mu__boolexpr2009 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2009)) mu__boolexpr2008 = FALSE ;
  else {
  mu__boolexpr2008 = ((mu_Routers[mu_n1]) == (0)) ; 
}
  if (!(mu__boolexpr2008)) mu__boolexpr2007 = FALSE ;
  else {
  mu__boolexpr2007 = ((mu_Routers[mu_n2]) == (0)) ; 
}
  if (!(mu__boolexpr2007)) mu__boolexpr2006 = FALSE ;
  else {
  mu__boolexpr2006 = ((mu_Tokens[mu_n1]) > (0)) ; 
}
  if (!(mu__boolexpr2006)) mu__boolexpr2005 = FALSE ;
  else {
  mu__boolexpr2005 = ((mu_n3) != (mu_n4)) ; 
}
  if (!(mu__boolexpr2005)) mu__boolexpr2004 = FALSE ;
  else {
  mu__boolexpr2004 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2004)) mu__boolexpr2003 = FALSE ;
  else {
  mu__boolexpr2003 = ((mu_Routers[mu_n3]) == (0)) ; 
}
  if (!(mu__boolexpr2003)) mu__boolexpr2002 = FALSE ;
  else {
  mu__boolexpr2002 = ((mu_Routers[mu_n4]) == (0)) ; 
}
  if (!(mu__boolexpr2002)) mu__boolexpr2001 = FALSE ;
  else {
  mu__boolexpr2001 = ((mu_Tokens[mu_n3]) > (0)) ; 
}
  if (!(mu__boolexpr2001)) mu__boolexpr2000 = FALSE ;
  else {
  mu__boolexpr2000 = ((mu_n5) != (mu_n6)) ; 
}
  if (!(mu__boolexpr2000)) mu__boolexpr1999 = FALSE ;
  else {
  mu__boolexpr1999 = ((mu_TailPointers[mu_ExitPath[mu_n5]][mu_n5]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1999)) mu__boolexpr1998 = FALSE ;
  else {
  mu__boolexpr1998 = ((mu_Routers[mu_n5]) == (0)) ; 
}
  if (!(mu__boolexpr1998)) mu__boolexpr1997 = FALSE ;
  else {
  mu__boolexpr1997 = ((mu_Routers[mu_n6]) == (0)) ; 
}
  if (!(mu__boolexpr1997)) mu__boolexpr1996 = FALSE ;
  else {
  mu__boolexpr1996 = ((mu_Tokens[mu_n5]) > (0)) ; 
}
  if (!(mu__boolexpr1996)) mu__boolexpr1995 = FALSE ;
  else {
  mu__boolexpr1995 = ((mu_IncomingQueue[mu_n7][mu_EntryPath[mu_n7]][0].mu_msg_type) == (mu_fwd_request)) ; 
}
  if (!(mu__boolexpr1995)) mu__boolexpr1994 = FALSE ;
  else {
  mu__boolexpr1994 = ((mu_TailPointers[mu_ExitPath[mu_n7]][mu_n7]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr1994)) mu__boolexpr1993 = FALSE ;
  else {
  mu__boolexpr1993 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr1993)) mu__boolexpr1992 = FALSE ;
  else {
  mu__boolexpr1992 = ((mu_n1) != (mu_n5)) ; 
}
  if (!(mu__boolexpr1992)) mu__boolexpr1991 = FALSE ;
  else {
  mu__boolexpr1991 = ((mu_n1) != (mu_n7)) ; 
}
  if (!(mu__boolexpr1991)) mu__boolexpr1990 = FALSE ;
  else {
  mu__boolexpr1990 = ((mu_n3) != (mu_n5)) ; 
}
  if (!(mu__boolexpr1990)) mu__boolexpr1989 = FALSE ;
  else {
  mu__boolexpr1989 = ((mu_n3) != (mu_n7)) ; 
}
  if (!(mu__boolexpr1989)) mu__boolexpr1988 = FALSE ;
  else {
  mu__boolexpr1988 = ((mu_n5) != (mu_n7)) ; 
}
	      if (mu__boolexpr1988) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 119552;
    mu_n7.value((r % 4) + 0);
    r = r / 4;
    mu_n6.value((r % 4) + 0);
    r = r / 4;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_211 mu_n7;
    mu_n7.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_210 mu_n6;
    mu_n6.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_209 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_208 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_207 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_206 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_205 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_SendRequest ( (int)mu_n1, mu_ExitPath[mu_n1], (int)mu_n2 );
mu_Tokens[mu_n1] = (mu_Tokens[mu_n1]) - (1);
mu_SendRequest ( (int)mu_n3, mu_ExitPath[mu_n3], (int)mu_n4 );
mu_Tokens[mu_n3] = (mu_Tokens[mu_n3]) - (1);
mu_SendRequest ( (int)mu_n5, mu_ExitPath[mu_n5], (int)mu_n6 );
mu_Tokens[mu_n5] = (mu_Tokens[mu_n5]) - (1);
mu_ProcessFwdRequest ( (int)mu_n7, mu_EntryPath[mu_n7], mu_ExitPath[mu_n7] );
  };

};
/******************** RuleBase69 ********************/
class RuleBase69
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_204 mu_n8;
    mu_n8.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_203 mu_n7;
    mu_n7.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_202 mu_n6;
    mu_n6.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_201 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_200 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_199 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_198 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_197 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Send request + Send request + Send request + Send request, n8:%s, n7:%s, n6:%s, n5:%s, n4:%s, n3:%s, n2:%s, n1:%s", mu_n8.Name(), mu_n7.Name(), mu_n6.Name(), mu_n5.Name(), mu_n4.Name(), mu_n3.Name(), mu_n2.Name(), mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_204 mu_n8;
    mu_n8.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_203 mu_n7;
    mu_n7.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_202 mu_n6;
    mu_n6.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_201 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_200 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_199 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_198 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_197 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr2010;
bool mu__boolexpr2011;
bool mu__boolexpr2012;
bool mu__boolexpr2013;
bool mu__boolexpr2014;
bool mu__boolexpr2015;
bool mu__boolexpr2016;
bool mu__boolexpr2017;
bool mu__boolexpr2018;
bool mu__boolexpr2019;
bool mu__boolexpr2020;
bool mu__boolexpr2021;
bool mu__boolexpr2022;
bool mu__boolexpr2023;
bool mu__boolexpr2024;
bool mu__boolexpr2025;
bool mu__boolexpr2026;
bool mu__boolexpr2027;
bool mu__boolexpr2028;
bool mu__boolexpr2029;
bool mu__boolexpr2030;
bool mu__boolexpr2031;
bool mu__boolexpr2032;
bool mu__boolexpr2033;
bool mu__boolexpr2034;
  if (!((mu_n1) != (mu_n2))) mu__boolexpr2034 = FALSE ;
  else {
  mu__boolexpr2034 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2034)) mu__boolexpr2033 = FALSE ;
  else {
  mu__boolexpr2033 = ((mu_Routers[mu_n1]) == (0)) ; 
}
  if (!(mu__boolexpr2033)) mu__boolexpr2032 = FALSE ;
  else {
  mu__boolexpr2032 = ((mu_Routers[mu_n2]) == (0)) ; 
}
  if (!(mu__boolexpr2032)) mu__boolexpr2031 = FALSE ;
  else {
  mu__boolexpr2031 = ((mu_Tokens[mu_n1]) > (0)) ; 
}
  if (!(mu__boolexpr2031)) mu__boolexpr2030 = FALSE ;
  else {
  mu__boolexpr2030 = ((mu_n3) != (mu_n4)) ; 
}
  if (!(mu__boolexpr2030)) mu__boolexpr2029 = FALSE ;
  else {
  mu__boolexpr2029 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2029)) mu__boolexpr2028 = FALSE ;
  else {
  mu__boolexpr2028 = ((mu_Routers[mu_n3]) == (0)) ; 
}
  if (!(mu__boolexpr2028)) mu__boolexpr2027 = FALSE ;
  else {
  mu__boolexpr2027 = ((mu_Routers[mu_n4]) == (0)) ; 
}
  if (!(mu__boolexpr2027)) mu__boolexpr2026 = FALSE ;
  else {
  mu__boolexpr2026 = ((mu_Tokens[mu_n3]) > (0)) ; 
}
  if (!(mu__boolexpr2026)) mu__boolexpr2025 = FALSE ;
  else {
  mu__boolexpr2025 = ((mu_n5) != (mu_n6)) ; 
}
  if (!(mu__boolexpr2025)) mu__boolexpr2024 = FALSE ;
  else {
  mu__boolexpr2024 = ((mu_TailPointers[mu_ExitPath[mu_n5]][mu_n5]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2024)) mu__boolexpr2023 = FALSE ;
  else {
  mu__boolexpr2023 = ((mu_Routers[mu_n5]) == (0)) ; 
}
  if (!(mu__boolexpr2023)) mu__boolexpr2022 = FALSE ;
  else {
  mu__boolexpr2022 = ((mu_Routers[mu_n6]) == (0)) ; 
}
  if (!(mu__boolexpr2022)) mu__boolexpr2021 = FALSE ;
  else {
  mu__boolexpr2021 = ((mu_Tokens[mu_n5]) > (0)) ; 
}
  if (!(mu__boolexpr2021)) mu__boolexpr2020 = FALSE ;
  else {
  mu__boolexpr2020 = ((mu_n7) != (mu_n8)) ; 
}
  if (!(mu__boolexpr2020)) mu__boolexpr2019 = FALSE ;
  else {
  mu__boolexpr2019 = ((mu_TailPointers[mu_ExitPath[mu_n7]][mu_n7]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2019)) mu__boolexpr2018 = FALSE ;
  else {
  mu__boolexpr2018 = ((mu_Routers[mu_n7]) == (0)) ; 
}
  if (!(mu__boolexpr2018)) mu__boolexpr2017 = FALSE ;
  else {
  mu__boolexpr2017 = ((mu_Routers[mu_n8]) == (0)) ; 
}
  if (!(mu__boolexpr2017)) mu__boolexpr2016 = FALSE ;
  else {
  mu__boolexpr2016 = ((mu_Tokens[mu_n7]) > (0)) ; 
}
  if (!(mu__boolexpr2016)) mu__boolexpr2015 = FALSE ;
  else {
  mu__boolexpr2015 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr2015)) mu__boolexpr2014 = FALSE ;
  else {
  mu__boolexpr2014 = ((mu_n1) != (mu_n5)) ; 
}
  if (!(mu__boolexpr2014)) mu__boolexpr2013 = FALSE ;
  else {
  mu__boolexpr2013 = ((mu_n1) != (mu_n7)) ; 
}
  if (!(mu__boolexpr2013)) mu__boolexpr2012 = FALSE ;
  else {
  mu__boolexpr2012 = ((mu_n3) != (mu_n5)) ; 
}
  if (!(mu__boolexpr2012)) mu__boolexpr2011 = FALSE ;
  else {
  mu__boolexpr2011 = ((mu_n3) != (mu_n7)) ; 
}
  if (!(mu__boolexpr2011)) mu__boolexpr2010 = FALSE ;
  else {
  mu__boolexpr2010 = ((mu_n5) != (mu_n7)) ; 
}
    return mu__boolexpr2010;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 135936;
    static mu__subrange_204 mu_n8;
    mu_n8.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_203 mu_n7;
    mu_n7.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_202 mu_n6;
    mu_n6.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_201 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_200 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_199 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_198 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_197 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 201472 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr2035;
bool mu__boolexpr2036;
bool mu__boolexpr2037;
bool mu__boolexpr2038;
bool mu__boolexpr2039;
bool mu__boolexpr2040;
bool mu__boolexpr2041;
bool mu__boolexpr2042;
bool mu__boolexpr2043;
bool mu__boolexpr2044;
bool mu__boolexpr2045;
bool mu__boolexpr2046;
bool mu__boolexpr2047;
bool mu__boolexpr2048;
bool mu__boolexpr2049;
bool mu__boolexpr2050;
bool mu__boolexpr2051;
bool mu__boolexpr2052;
bool mu__boolexpr2053;
bool mu__boolexpr2054;
bool mu__boolexpr2055;
bool mu__boolexpr2056;
bool mu__boolexpr2057;
bool mu__boolexpr2058;
bool mu__boolexpr2059;
  if (!((mu_n1) != (mu_n2))) mu__boolexpr2059 = FALSE ;
  else {
  mu__boolexpr2059 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2059)) mu__boolexpr2058 = FALSE ;
  else {
  mu__boolexpr2058 = ((mu_Routers[mu_n1]) == (0)) ; 
}
  if (!(mu__boolexpr2058)) mu__boolexpr2057 = FALSE ;
  else {
  mu__boolexpr2057 = ((mu_Routers[mu_n2]) == (0)) ; 
}
  if (!(mu__boolexpr2057)) mu__boolexpr2056 = FALSE ;
  else {
  mu__boolexpr2056 = ((mu_Tokens[mu_n1]) > (0)) ; 
}
  if (!(mu__boolexpr2056)) mu__boolexpr2055 = FALSE ;
  else {
  mu__boolexpr2055 = ((mu_n3) != (mu_n4)) ; 
}
  if (!(mu__boolexpr2055)) mu__boolexpr2054 = FALSE ;
  else {
  mu__boolexpr2054 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2054)) mu__boolexpr2053 = FALSE ;
  else {
  mu__boolexpr2053 = ((mu_Routers[mu_n3]) == (0)) ; 
}
  if (!(mu__boolexpr2053)) mu__boolexpr2052 = FALSE ;
  else {
  mu__boolexpr2052 = ((mu_Routers[mu_n4]) == (0)) ; 
}
  if (!(mu__boolexpr2052)) mu__boolexpr2051 = FALSE ;
  else {
  mu__boolexpr2051 = ((mu_Tokens[mu_n3]) > (0)) ; 
}
  if (!(mu__boolexpr2051)) mu__boolexpr2050 = FALSE ;
  else {
  mu__boolexpr2050 = ((mu_n5) != (mu_n6)) ; 
}
  if (!(mu__boolexpr2050)) mu__boolexpr2049 = FALSE ;
  else {
  mu__boolexpr2049 = ((mu_TailPointers[mu_ExitPath[mu_n5]][mu_n5]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2049)) mu__boolexpr2048 = FALSE ;
  else {
  mu__boolexpr2048 = ((mu_Routers[mu_n5]) == (0)) ; 
}
  if (!(mu__boolexpr2048)) mu__boolexpr2047 = FALSE ;
  else {
  mu__boolexpr2047 = ((mu_Routers[mu_n6]) == (0)) ; 
}
  if (!(mu__boolexpr2047)) mu__boolexpr2046 = FALSE ;
  else {
  mu__boolexpr2046 = ((mu_Tokens[mu_n5]) > (0)) ; 
}
  if (!(mu__boolexpr2046)) mu__boolexpr2045 = FALSE ;
  else {
  mu__boolexpr2045 = ((mu_n7) != (mu_n8)) ; 
}
  if (!(mu__boolexpr2045)) mu__boolexpr2044 = FALSE ;
  else {
  mu__boolexpr2044 = ((mu_TailPointers[mu_ExitPath[mu_n7]][mu_n7]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2044)) mu__boolexpr2043 = FALSE ;
  else {
  mu__boolexpr2043 = ((mu_Routers[mu_n7]) == (0)) ; 
}
  if (!(mu__boolexpr2043)) mu__boolexpr2042 = FALSE ;
  else {
  mu__boolexpr2042 = ((mu_Routers[mu_n8]) == (0)) ; 
}
  if (!(mu__boolexpr2042)) mu__boolexpr2041 = FALSE ;
  else {
  mu__boolexpr2041 = ((mu_Tokens[mu_n7]) > (0)) ; 
}
  if (!(mu__boolexpr2041)) mu__boolexpr2040 = FALSE ;
  else {
  mu__boolexpr2040 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr2040)) mu__boolexpr2039 = FALSE ;
  else {
  mu__boolexpr2039 = ((mu_n1) != (mu_n5)) ; 
}
  if (!(mu__boolexpr2039)) mu__boolexpr2038 = FALSE ;
  else {
  mu__boolexpr2038 = ((mu_n1) != (mu_n7)) ; 
}
  if (!(mu__boolexpr2038)) mu__boolexpr2037 = FALSE ;
  else {
  mu__boolexpr2037 = ((mu_n3) != (mu_n5)) ; 
}
  if (!(mu__boolexpr2037)) mu__boolexpr2036 = FALSE ;
  else {
  mu__boolexpr2036 = ((mu_n3) != (mu_n7)) ; 
}
  if (!(mu__boolexpr2036)) mu__boolexpr2035 = FALSE ;
  else {
  mu__boolexpr2035 = ((mu_n5) != (mu_n7)) ; 
}
	      if (mu__boolexpr2035) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 135936;
    mu_n8.value((r % 4) + 0);
    r = r / 4;
    mu_n7.value((r % 4) + 0);
    r = r / 4;
    mu_n6.value((r % 4) + 0);
    r = r / 4;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_204 mu_n8;
    mu_n8.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_203 mu_n7;
    mu_n7.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_202 mu_n6;
    mu_n6.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_201 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_200 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_199 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_198 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_197 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_SendRequest ( (int)mu_n1, mu_ExitPath[mu_n1], (int)mu_n2 );
mu_Tokens[mu_n1] = (mu_Tokens[mu_n1]) - (1);
mu_SendRequest ( (int)mu_n3, mu_ExitPath[mu_n3], (int)mu_n4 );
mu_Tokens[mu_n3] = (mu_Tokens[mu_n3]) - (1);
mu_SendRequest ( (int)mu_n5, mu_ExitPath[mu_n5], (int)mu_n6 );
mu_Tokens[mu_n5] = (mu_Tokens[mu_n5]) - (1);
mu_SendRequest ( (int)mu_n7, mu_ExitPath[mu_n7], (int)mu_n8 );
mu_Tokens[mu_n7] = (mu_Tokens[mu_n7]) - (1);
  };

};
/******************** RuleBase70 ********************/
class RuleBase70
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_196 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_195 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_194 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Process response + Process response + Process response, n3:%s, n2:%s, n1:%s", mu_n3.Name(), mu_n2.Name(), mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_196 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_195 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_194 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr2060;
bool mu__boolexpr2061;
bool mu__boolexpr2062;
bool mu__boolexpr2063;
bool mu__boolexpr2064;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_response))) mu__boolexpr2064 = FALSE ;
  else {
  mu__boolexpr2064 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr2064)) mu__boolexpr2063 = FALSE ;
  else {
  mu__boolexpr2063 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr2063)) mu__boolexpr2062 = FALSE ;
  else {
  mu__boolexpr2062 = ((mu_n1) != (mu_n2)) ; 
}
  if (!(mu__boolexpr2062)) mu__boolexpr2061 = FALSE ;
  else {
  mu__boolexpr2061 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr2061)) mu__boolexpr2060 = FALSE ;
  else {
  mu__boolexpr2060 = ((mu_n2) != (mu_n3)) ; 
}
    return mu__boolexpr2060;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 201472;
    static mu__subrange_196 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_195 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_194 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 201536 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr2065;
bool mu__boolexpr2066;
bool mu__boolexpr2067;
bool mu__boolexpr2068;
bool mu__boolexpr2069;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_response))) mu__boolexpr2069 = FALSE ;
  else {
  mu__boolexpr2069 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr2069)) mu__boolexpr2068 = FALSE ;
  else {
  mu__boolexpr2068 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr2068)) mu__boolexpr2067 = FALSE ;
  else {
  mu__boolexpr2067 = ((mu_n1) != (mu_n2)) ; 
}
  if (!(mu__boolexpr2067)) mu__boolexpr2066 = FALSE ;
  else {
  mu__boolexpr2066 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr2066)) mu__boolexpr2065 = FALSE ;
  else {
  mu__boolexpr2065 = ((mu_n2) != (mu_n3)) ; 
}
	      if (mu__boolexpr2065) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 201472;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_196 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_195 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_194 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_ProcessResponse ( (int)mu_n1, mu_EntryPath[mu_n1] );
mu_Tokens[mu_n1] = (mu_Tokens[mu_n1]) + (1);
mu_ProcessResponse ( (int)mu_n2, mu_EntryPath[mu_n2] );
mu_Tokens[mu_n2] = (mu_Tokens[mu_n2]) + (1);
mu_ProcessResponse ( (int)mu_n3, mu_EntryPath[mu_n3] );
mu_Tokens[mu_n3] = (mu_Tokens[mu_n3]) + (1);
  };

};
/******************** RuleBase71 ********************/
class RuleBase71
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_193 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_192 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_191 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Process fwd_response + Process response + Process response, n3:%s, n2:%s, n1:%s", mu_n3.Name(), mu_n2.Name(), mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_193 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_192 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_191 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr2070;
bool mu__boolexpr2071;
bool mu__boolexpr2072;
bool mu__boolexpr2073;
bool mu__boolexpr2074;
bool mu__boolexpr2075;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_fwd_response))) mu__boolexpr2075 = FALSE ;
  else {
  mu__boolexpr2075 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2075)) mu__boolexpr2074 = FALSE ;
  else {
  mu__boolexpr2074 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr2074)) mu__boolexpr2073 = FALSE ;
  else {
  mu__boolexpr2073 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr2073)) mu__boolexpr2072 = FALSE ;
  else {
  mu__boolexpr2072 = ((mu_n1) != (mu_n2)) ; 
}
  if (!(mu__boolexpr2072)) mu__boolexpr2071 = FALSE ;
  else {
  mu__boolexpr2071 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr2071)) mu__boolexpr2070 = FALSE ;
  else {
  mu__boolexpr2070 = ((mu_n2) != (mu_n3)) ; 
}
    return mu__boolexpr2070;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 201536;
    static mu__subrange_193 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_192 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_191 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 201600 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr2076;
bool mu__boolexpr2077;
bool mu__boolexpr2078;
bool mu__boolexpr2079;
bool mu__boolexpr2080;
bool mu__boolexpr2081;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_fwd_response))) mu__boolexpr2081 = FALSE ;
  else {
  mu__boolexpr2081 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2081)) mu__boolexpr2080 = FALSE ;
  else {
  mu__boolexpr2080 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr2080)) mu__boolexpr2079 = FALSE ;
  else {
  mu__boolexpr2079 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr2079)) mu__boolexpr2078 = FALSE ;
  else {
  mu__boolexpr2078 = ((mu_n1) != (mu_n2)) ; 
}
  if (!(mu__boolexpr2078)) mu__boolexpr2077 = FALSE ;
  else {
  mu__boolexpr2077 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr2077)) mu__boolexpr2076 = FALSE ;
  else {
  mu__boolexpr2076 = ((mu_n2) != (mu_n3)) ; 
}
	      if (mu__boolexpr2076) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 201536;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_193 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_192 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_191 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_ProcessFwdResponse ( (int)mu_n1, mu_EntryPath[mu_n1], mu_ExitPath[mu_n1] );
mu_ProcessResponse ( (int)mu_n2, mu_EntryPath[mu_n2] );
mu_Tokens[mu_n2] = (mu_Tokens[mu_n2]) + (1);
mu_ProcessResponse ( (int)mu_n3, mu_EntryPath[mu_n3] );
mu_Tokens[mu_n3] = (mu_Tokens[mu_n3]) + (1);
  };

};
/******************** RuleBase72 ********************/
class RuleBase72
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_190 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_189 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_188 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Process fwd_response + Process fwd_response + Process response, n3:%s, n2:%s, n1:%s", mu_n3.Name(), mu_n2.Name(), mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_190 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_189 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_188 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr2082;
bool mu__boolexpr2083;
bool mu__boolexpr2084;
bool mu__boolexpr2085;
bool mu__boolexpr2086;
bool mu__boolexpr2087;
bool mu__boolexpr2088;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_fwd_response))) mu__boolexpr2088 = FALSE ;
  else {
  mu__boolexpr2088 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2088)) mu__boolexpr2087 = FALSE ;
  else {
  mu__boolexpr2087 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr2087)) mu__boolexpr2086 = FALSE ;
  else {
  mu__boolexpr2086 = ((mu_TailPointers[mu_ExitPath[mu_n2]][mu_n2]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2086)) mu__boolexpr2085 = FALSE ;
  else {
  mu__boolexpr2085 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr2085)) mu__boolexpr2084 = FALSE ;
  else {
  mu__boolexpr2084 = ((mu_n1) != (mu_n2)) ; 
}
  if (!(mu__boolexpr2084)) mu__boolexpr2083 = FALSE ;
  else {
  mu__boolexpr2083 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr2083)) mu__boolexpr2082 = FALSE ;
  else {
  mu__boolexpr2082 = ((mu_n2) != (mu_n3)) ; 
}
    return mu__boolexpr2082;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 201600;
    static mu__subrange_190 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_189 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_188 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 201664 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr2089;
bool mu__boolexpr2090;
bool mu__boolexpr2091;
bool mu__boolexpr2092;
bool mu__boolexpr2093;
bool mu__boolexpr2094;
bool mu__boolexpr2095;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_fwd_response))) mu__boolexpr2095 = FALSE ;
  else {
  mu__boolexpr2095 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2095)) mu__boolexpr2094 = FALSE ;
  else {
  mu__boolexpr2094 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr2094)) mu__boolexpr2093 = FALSE ;
  else {
  mu__boolexpr2093 = ((mu_TailPointers[mu_ExitPath[mu_n2]][mu_n2]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2093)) mu__boolexpr2092 = FALSE ;
  else {
  mu__boolexpr2092 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr2092)) mu__boolexpr2091 = FALSE ;
  else {
  mu__boolexpr2091 = ((mu_n1) != (mu_n2)) ; 
}
  if (!(mu__boolexpr2091)) mu__boolexpr2090 = FALSE ;
  else {
  mu__boolexpr2090 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr2090)) mu__boolexpr2089 = FALSE ;
  else {
  mu__boolexpr2089 = ((mu_n2) != (mu_n3)) ; 
}
	      if (mu__boolexpr2089) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 201600;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_190 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_189 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_188 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_ProcessFwdResponse ( (int)mu_n1, mu_EntryPath[mu_n1], mu_ExitPath[mu_n1] );
mu_ProcessFwdResponse ( (int)mu_n2, mu_EntryPath[mu_n2], mu_ExitPath[mu_n2] );
mu_ProcessResponse ( (int)mu_n3, mu_EntryPath[mu_n3] );
mu_Tokens[mu_n3] = (mu_Tokens[mu_n3]) + (1);
  };

};
/******************** RuleBase73 ********************/
class RuleBase73
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_187 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_186 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_185 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Process fwd_response + Process fwd_response + Process fwd_response, n3:%s, n2:%s, n1:%s", mu_n3.Name(), mu_n2.Name(), mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_187 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_186 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_185 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr2096;
bool mu__boolexpr2097;
bool mu__boolexpr2098;
bool mu__boolexpr2099;
bool mu__boolexpr2100;
bool mu__boolexpr2101;
bool mu__boolexpr2102;
bool mu__boolexpr2103;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_fwd_response))) mu__boolexpr2103 = FALSE ;
  else {
  mu__boolexpr2103 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2103)) mu__boolexpr2102 = FALSE ;
  else {
  mu__boolexpr2102 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr2102)) mu__boolexpr2101 = FALSE ;
  else {
  mu__boolexpr2101 = ((mu_TailPointers[mu_ExitPath[mu_n2]][mu_n2]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2101)) mu__boolexpr2100 = FALSE ;
  else {
  mu__boolexpr2100 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr2100)) mu__boolexpr2099 = FALSE ;
  else {
  mu__boolexpr2099 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2099)) mu__boolexpr2098 = FALSE ;
  else {
  mu__boolexpr2098 = ((mu_n1) != (mu_n2)) ; 
}
  if (!(mu__boolexpr2098)) mu__boolexpr2097 = FALSE ;
  else {
  mu__boolexpr2097 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr2097)) mu__boolexpr2096 = FALSE ;
  else {
  mu__boolexpr2096 = ((mu_n2) != (mu_n3)) ; 
}
    return mu__boolexpr2096;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 201664;
    static mu__subrange_187 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_186 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_185 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 201728 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr2104;
bool mu__boolexpr2105;
bool mu__boolexpr2106;
bool mu__boolexpr2107;
bool mu__boolexpr2108;
bool mu__boolexpr2109;
bool mu__boolexpr2110;
bool mu__boolexpr2111;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_fwd_response))) mu__boolexpr2111 = FALSE ;
  else {
  mu__boolexpr2111 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2111)) mu__boolexpr2110 = FALSE ;
  else {
  mu__boolexpr2110 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr2110)) mu__boolexpr2109 = FALSE ;
  else {
  mu__boolexpr2109 = ((mu_TailPointers[mu_ExitPath[mu_n2]][mu_n2]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2109)) mu__boolexpr2108 = FALSE ;
  else {
  mu__boolexpr2108 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr2108)) mu__boolexpr2107 = FALSE ;
  else {
  mu__boolexpr2107 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2107)) mu__boolexpr2106 = FALSE ;
  else {
  mu__boolexpr2106 = ((mu_n1) != (mu_n2)) ; 
}
  if (!(mu__boolexpr2106)) mu__boolexpr2105 = FALSE ;
  else {
  mu__boolexpr2105 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr2105)) mu__boolexpr2104 = FALSE ;
  else {
  mu__boolexpr2104 = ((mu_n2) != (mu_n3)) ; 
}
	      if (mu__boolexpr2104) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 201664;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_187 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_186 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_185 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_ProcessFwdResponse ( (int)mu_n1, mu_EntryPath[mu_n1], mu_ExitPath[mu_n1] );
mu_ProcessFwdResponse ( (int)mu_n2, mu_EntryPath[mu_n2], mu_ExitPath[mu_n2] );
mu_ProcessFwdResponse ( (int)mu_n3, mu_EntryPath[mu_n3], mu_ExitPath[mu_n3] );
  };

};
/******************** RuleBase74 ********************/
class RuleBase74
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_184 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_183 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_182 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Process request + Process response + Process response, n3:%s, n2:%s, n1:%s", mu_n3.Name(), mu_n2.Name(), mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_184 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_183 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_182 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr2112;
bool mu__boolexpr2113;
bool mu__boolexpr2114;
bool mu__boolexpr2115;
bool mu__boolexpr2116;
bool mu__boolexpr2117;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_request))) mu__boolexpr2117 = FALSE ;
  else {
  mu__boolexpr2117 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2117)) mu__boolexpr2116 = FALSE ;
  else {
  mu__boolexpr2116 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr2116)) mu__boolexpr2115 = FALSE ;
  else {
  mu__boolexpr2115 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr2115)) mu__boolexpr2114 = FALSE ;
  else {
  mu__boolexpr2114 = ((mu_n1) != (mu_n2)) ; 
}
  if (!(mu__boolexpr2114)) mu__boolexpr2113 = FALSE ;
  else {
  mu__boolexpr2113 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr2113)) mu__boolexpr2112 = FALSE ;
  else {
  mu__boolexpr2112 = ((mu_n2) != (mu_n3)) ; 
}
    return mu__boolexpr2112;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 201728;
    static mu__subrange_184 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_183 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_182 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 201792 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr2118;
bool mu__boolexpr2119;
bool mu__boolexpr2120;
bool mu__boolexpr2121;
bool mu__boolexpr2122;
bool mu__boolexpr2123;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_request))) mu__boolexpr2123 = FALSE ;
  else {
  mu__boolexpr2123 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2123)) mu__boolexpr2122 = FALSE ;
  else {
  mu__boolexpr2122 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr2122)) mu__boolexpr2121 = FALSE ;
  else {
  mu__boolexpr2121 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr2121)) mu__boolexpr2120 = FALSE ;
  else {
  mu__boolexpr2120 = ((mu_n1) != (mu_n2)) ; 
}
  if (!(mu__boolexpr2120)) mu__boolexpr2119 = FALSE ;
  else {
  mu__boolexpr2119 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr2119)) mu__boolexpr2118 = FALSE ;
  else {
  mu__boolexpr2118 = ((mu_n2) != (mu_n3)) ; 
}
	      if (mu__boolexpr2118) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 201728;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_184 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_183 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_182 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_ProcessRequest ( (int)mu_n1, mu_EntryPath[mu_n1], mu_ExitPath[mu_n1] );
mu_ProcessResponse ( (int)mu_n2, mu_EntryPath[mu_n2] );
mu_Tokens[mu_n2] = (mu_Tokens[mu_n2]) + (1);
mu_ProcessResponse ( (int)mu_n3, mu_EntryPath[mu_n3] );
mu_Tokens[mu_n3] = (mu_Tokens[mu_n3]) + (1);
  };

};
/******************** RuleBase75 ********************/
class RuleBase75
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_181 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_180 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_179 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Process request + Process fwd_response + Process response, n3:%s, n2:%s, n1:%s", mu_n3.Name(), mu_n2.Name(), mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_181 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_180 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_179 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr2124;
bool mu__boolexpr2125;
bool mu__boolexpr2126;
bool mu__boolexpr2127;
bool mu__boolexpr2128;
bool mu__boolexpr2129;
bool mu__boolexpr2130;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_request))) mu__boolexpr2130 = FALSE ;
  else {
  mu__boolexpr2130 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2130)) mu__boolexpr2129 = FALSE ;
  else {
  mu__boolexpr2129 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr2129)) mu__boolexpr2128 = FALSE ;
  else {
  mu__boolexpr2128 = ((mu_TailPointers[mu_ExitPath[mu_n2]][mu_n2]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2128)) mu__boolexpr2127 = FALSE ;
  else {
  mu__boolexpr2127 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr2127)) mu__boolexpr2126 = FALSE ;
  else {
  mu__boolexpr2126 = ((mu_n1) != (mu_n2)) ; 
}
  if (!(mu__boolexpr2126)) mu__boolexpr2125 = FALSE ;
  else {
  mu__boolexpr2125 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr2125)) mu__boolexpr2124 = FALSE ;
  else {
  mu__boolexpr2124 = ((mu_n2) != (mu_n3)) ; 
}
    return mu__boolexpr2124;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 201792;
    static mu__subrange_181 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_180 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_179 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 201856 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr2131;
bool mu__boolexpr2132;
bool mu__boolexpr2133;
bool mu__boolexpr2134;
bool mu__boolexpr2135;
bool mu__boolexpr2136;
bool mu__boolexpr2137;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_request))) mu__boolexpr2137 = FALSE ;
  else {
  mu__boolexpr2137 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2137)) mu__boolexpr2136 = FALSE ;
  else {
  mu__boolexpr2136 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr2136)) mu__boolexpr2135 = FALSE ;
  else {
  mu__boolexpr2135 = ((mu_TailPointers[mu_ExitPath[mu_n2]][mu_n2]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2135)) mu__boolexpr2134 = FALSE ;
  else {
  mu__boolexpr2134 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr2134)) mu__boolexpr2133 = FALSE ;
  else {
  mu__boolexpr2133 = ((mu_n1) != (mu_n2)) ; 
}
  if (!(mu__boolexpr2133)) mu__boolexpr2132 = FALSE ;
  else {
  mu__boolexpr2132 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr2132)) mu__boolexpr2131 = FALSE ;
  else {
  mu__boolexpr2131 = ((mu_n2) != (mu_n3)) ; 
}
	      if (mu__boolexpr2131) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 201792;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_181 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_180 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_179 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_ProcessRequest ( (int)mu_n1, mu_EntryPath[mu_n1], mu_ExitPath[mu_n1] );
mu_ProcessFwdResponse ( (int)mu_n2, mu_EntryPath[mu_n2], mu_ExitPath[mu_n2] );
mu_ProcessResponse ( (int)mu_n3, mu_EntryPath[mu_n3] );
mu_Tokens[mu_n3] = (mu_Tokens[mu_n3]) + (1);
  };

};
/******************** RuleBase76 ********************/
class RuleBase76
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_178 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_177 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_176 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Process request + Process fwd_response + Process fwd_response, n3:%s, n2:%s, n1:%s", mu_n3.Name(), mu_n2.Name(), mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_178 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_177 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_176 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr2138;
bool mu__boolexpr2139;
bool mu__boolexpr2140;
bool mu__boolexpr2141;
bool mu__boolexpr2142;
bool mu__boolexpr2143;
bool mu__boolexpr2144;
bool mu__boolexpr2145;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_request))) mu__boolexpr2145 = FALSE ;
  else {
  mu__boolexpr2145 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2145)) mu__boolexpr2144 = FALSE ;
  else {
  mu__boolexpr2144 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr2144)) mu__boolexpr2143 = FALSE ;
  else {
  mu__boolexpr2143 = ((mu_TailPointers[mu_ExitPath[mu_n2]][mu_n2]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2143)) mu__boolexpr2142 = FALSE ;
  else {
  mu__boolexpr2142 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr2142)) mu__boolexpr2141 = FALSE ;
  else {
  mu__boolexpr2141 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2141)) mu__boolexpr2140 = FALSE ;
  else {
  mu__boolexpr2140 = ((mu_n1) != (mu_n2)) ; 
}
  if (!(mu__boolexpr2140)) mu__boolexpr2139 = FALSE ;
  else {
  mu__boolexpr2139 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr2139)) mu__boolexpr2138 = FALSE ;
  else {
  mu__boolexpr2138 = ((mu_n2) != (mu_n3)) ; 
}
    return mu__boolexpr2138;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 201856;
    static mu__subrange_178 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_177 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_176 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 201920 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr2146;
bool mu__boolexpr2147;
bool mu__boolexpr2148;
bool mu__boolexpr2149;
bool mu__boolexpr2150;
bool mu__boolexpr2151;
bool mu__boolexpr2152;
bool mu__boolexpr2153;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_request))) mu__boolexpr2153 = FALSE ;
  else {
  mu__boolexpr2153 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2153)) mu__boolexpr2152 = FALSE ;
  else {
  mu__boolexpr2152 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr2152)) mu__boolexpr2151 = FALSE ;
  else {
  mu__boolexpr2151 = ((mu_TailPointers[mu_ExitPath[mu_n2]][mu_n2]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2151)) mu__boolexpr2150 = FALSE ;
  else {
  mu__boolexpr2150 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr2150)) mu__boolexpr2149 = FALSE ;
  else {
  mu__boolexpr2149 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2149)) mu__boolexpr2148 = FALSE ;
  else {
  mu__boolexpr2148 = ((mu_n1) != (mu_n2)) ; 
}
  if (!(mu__boolexpr2148)) mu__boolexpr2147 = FALSE ;
  else {
  mu__boolexpr2147 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr2147)) mu__boolexpr2146 = FALSE ;
  else {
  mu__boolexpr2146 = ((mu_n2) != (mu_n3)) ; 
}
	      if (mu__boolexpr2146) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 201856;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_178 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_177 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_176 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_ProcessRequest ( (int)mu_n1, mu_EntryPath[mu_n1], mu_ExitPath[mu_n1] );
mu_ProcessFwdResponse ( (int)mu_n2, mu_EntryPath[mu_n2], mu_ExitPath[mu_n2] );
mu_ProcessFwdResponse ( (int)mu_n3, mu_EntryPath[mu_n3], mu_ExitPath[mu_n3] );
  };

};
/******************** RuleBase77 ********************/
class RuleBase77
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_175 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_174 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_173 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Process request + Process request + Process response, n3:%s, n2:%s, n1:%s", mu_n3.Name(), mu_n2.Name(), mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_175 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_174 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_173 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr2154;
bool mu__boolexpr2155;
bool mu__boolexpr2156;
bool mu__boolexpr2157;
bool mu__boolexpr2158;
bool mu__boolexpr2159;
bool mu__boolexpr2160;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_request))) mu__boolexpr2160 = FALSE ;
  else {
  mu__boolexpr2160 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2160)) mu__boolexpr2159 = FALSE ;
  else {
  mu__boolexpr2159 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr2159)) mu__boolexpr2158 = FALSE ;
  else {
  mu__boolexpr2158 = ((mu_TailPointers[mu_ExitPath[mu_n2]][mu_n2]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2158)) mu__boolexpr2157 = FALSE ;
  else {
  mu__boolexpr2157 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr2157)) mu__boolexpr2156 = FALSE ;
  else {
  mu__boolexpr2156 = ((mu_n1) != (mu_n2)) ; 
}
  if (!(mu__boolexpr2156)) mu__boolexpr2155 = FALSE ;
  else {
  mu__boolexpr2155 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr2155)) mu__boolexpr2154 = FALSE ;
  else {
  mu__boolexpr2154 = ((mu_n2) != (mu_n3)) ; 
}
    return mu__boolexpr2154;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 201920;
    static mu__subrange_175 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_174 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_173 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 201984 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr2161;
bool mu__boolexpr2162;
bool mu__boolexpr2163;
bool mu__boolexpr2164;
bool mu__boolexpr2165;
bool mu__boolexpr2166;
bool mu__boolexpr2167;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_request))) mu__boolexpr2167 = FALSE ;
  else {
  mu__boolexpr2167 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2167)) mu__boolexpr2166 = FALSE ;
  else {
  mu__boolexpr2166 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr2166)) mu__boolexpr2165 = FALSE ;
  else {
  mu__boolexpr2165 = ((mu_TailPointers[mu_ExitPath[mu_n2]][mu_n2]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2165)) mu__boolexpr2164 = FALSE ;
  else {
  mu__boolexpr2164 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr2164)) mu__boolexpr2163 = FALSE ;
  else {
  mu__boolexpr2163 = ((mu_n1) != (mu_n2)) ; 
}
  if (!(mu__boolexpr2163)) mu__boolexpr2162 = FALSE ;
  else {
  mu__boolexpr2162 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr2162)) mu__boolexpr2161 = FALSE ;
  else {
  mu__boolexpr2161 = ((mu_n2) != (mu_n3)) ; 
}
	      if (mu__boolexpr2161) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 201920;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_175 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_174 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_173 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_ProcessRequest ( (int)mu_n1, mu_EntryPath[mu_n1], mu_ExitPath[mu_n1] );
mu_ProcessRequest ( (int)mu_n2, mu_EntryPath[mu_n2], mu_ExitPath[mu_n2] );
mu_ProcessResponse ( (int)mu_n3, mu_EntryPath[mu_n3] );
mu_Tokens[mu_n3] = (mu_Tokens[mu_n3]) + (1);
  };

};
/******************** RuleBase78 ********************/
class RuleBase78
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_172 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_171 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_170 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Process request + Process request + Process fwd_response, n3:%s, n2:%s, n1:%s", mu_n3.Name(), mu_n2.Name(), mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_172 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_171 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_170 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr2168;
bool mu__boolexpr2169;
bool mu__boolexpr2170;
bool mu__boolexpr2171;
bool mu__boolexpr2172;
bool mu__boolexpr2173;
bool mu__boolexpr2174;
bool mu__boolexpr2175;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_request))) mu__boolexpr2175 = FALSE ;
  else {
  mu__boolexpr2175 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2175)) mu__boolexpr2174 = FALSE ;
  else {
  mu__boolexpr2174 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr2174)) mu__boolexpr2173 = FALSE ;
  else {
  mu__boolexpr2173 = ((mu_TailPointers[mu_ExitPath[mu_n2]][mu_n2]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2173)) mu__boolexpr2172 = FALSE ;
  else {
  mu__boolexpr2172 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr2172)) mu__boolexpr2171 = FALSE ;
  else {
  mu__boolexpr2171 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2171)) mu__boolexpr2170 = FALSE ;
  else {
  mu__boolexpr2170 = ((mu_n1) != (mu_n2)) ; 
}
  if (!(mu__boolexpr2170)) mu__boolexpr2169 = FALSE ;
  else {
  mu__boolexpr2169 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr2169)) mu__boolexpr2168 = FALSE ;
  else {
  mu__boolexpr2168 = ((mu_n2) != (mu_n3)) ; 
}
    return mu__boolexpr2168;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 201984;
    static mu__subrange_172 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_171 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_170 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 202048 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr2176;
bool mu__boolexpr2177;
bool mu__boolexpr2178;
bool mu__boolexpr2179;
bool mu__boolexpr2180;
bool mu__boolexpr2181;
bool mu__boolexpr2182;
bool mu__boolexpr2183;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_request))) mu__boolexpr2183 = FALSE ;
  else {
  mu__boolexpr2183 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2183)) mu__boolexpr2182 = FALSE ;
  else {
  mu__boolexpr2182 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr2182)) mu__boolexpr2181 = FALSE ;
  else {
  mu__boolexpr2181 = ((mu_TailPointers[mu_ExitPath[mu_n2]][mu_n2]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2181)) mu__boolexpr2180 = FALSE ;
  else {
  mu__boolexpr2180 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr2180)) mu__boolexpr2179 = FALSE ;
  else {
  mu__boolexpr2179 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2179)) mu__boolexpr2178 = FALSE ;
  else {
  mu__boolexpr2178 = ((mu_n1) != (mu_n2)) ; 
}
  if (!(mu__boolexpr2178)) mu__boolexpr2177 = FALSE ;
  else {
  mu__boolexpr2177 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr2177)) mu__boolexpr2176 = FALSE ;
  else {
  mu__boolexpr2176 = ((mu_n2) != (mu_n3)) ; 
}
	      if (mu__boolexpr2176) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 201984;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_172 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_171 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_170 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_ProcessRequest ( (int)mu_n1, mu_EntryPath[mu_n1], mu_ExitPath[mu_n1] );
mu_ProcessRequest ( (int)mu_n2, mu_EntryPath[mu_n2], mu_ExitPath[mu_n2] );
mu_ProcessFwdResponse ( (int)mu_n3, mu_EntryPath[mu_n3], mu_ExitPath[mu_n3] );
  };

};
/******************** RuleBase79 ********************/
class RuleBase79
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_169 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_168 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_167 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Process request + Process request + Process request, n3:%s, n2:%s, n1:%s", mu_n3.Name(), mu_n2.Name(), mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_169 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_168 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_167 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr2184;
bool mu__boolexpr2185;
bool mu__boolexpr2186;
bool mu__boolexpr2187;
bool mu__boolexpr2188;
bool mu__boolexpr2189;
bool mu__boolexpr2190;
bool mu__boolexpr2191;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_request))) mu__boolexpr2191 = FALSE ;
  else {
  mu__boolexpr2191 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2191)) mu__boolexpr2190 = FALSE ;
  else {
  mu__boolexpr2190 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr2190)) mu__boolexpr2189 = FALSE ;
  else {
  mu__boolexpr2189 = ((mu_TailPointers[mu_ExitPath[mu_n2]][mu_n2]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2189)) mu__boolexpr2188 = FALSE ;
  else {
  mu__boolexpr2188 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr2188)) mu__boolexpr2187 = FALSE ;
  else {
  mu__boolexpr2187 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2187)) mu__boolexpr2186 = FALSE ;
  else {
  mu__boolexpr2186 = ((mu_n1) != (mu_n2)) ; 
}
  if (!(mu__boolexpr2186)) mu__boolexpr2185 = FALSE ;
  else {
  mu__boolexpr2185 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr2185)) mu__boolexpr2184 = FALSE ;
  else {
  mu__boolexpr2184 = ((mu_n2) != (mu_n3)) ; 
}
    return mu__boolexpr2184;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 202048;
    static mu__subrange_169 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_168 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_167 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 202112 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr2192;
bool mu__boolexpr2193;
bool mu__boolexpr2194;
bool mu__boolexpr2195;
bool mu__boolexpr2196;
bool mu__boolexpr2197;
bool mu__boolexpr2198;
bool mu__boolexpr2199;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_request))) mu__boolexpr2199 = FALSE ;
  else {
  mu__boolexpr2199 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2199)) mu__boolexpr2198 = FALSE ;
  else {
  mu__boolexpr2198 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr2198)) mu__boolexpr2197 = FALSE ;
  else {
  mu__boolexpr2197 = ((mu_TailPointers[mu_ExitPath[mu_n2]][mu_n2]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2197)) mu__boolexpr2196 = FALSE ;
  else {
  mu__boolexpr2196 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr2196)) mu__boolexpr2195 = FALSE ;
  else {
  mu__boolexpr2195 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2195)) mu__boolexpr2194 = FALSE ;
  else {
  mu__boolexpr2194 = ((mu_n1) != (mu_n2)) ; 
}
  if (!(mu__boolexpr2194)) mu__boolexpr2193 = FALSE ;
  else {
  mu__boolexpr2193 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr2193)) mu__boolexpr2192 = FALSE ;
  else {
  mu__boolexpr2192 = ((mu_n2) != (mu_n3)) ; 
}
	      if (mu__boolexpr2192) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 202048;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_169 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_168 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_167 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_ProcessRequest ( (int)mu_n1, mu_EntryPath[mu_n1], mu_ExitPath[mu_n1] );
mu_ProcessRequest ( (int)mu_n2, mu_EntryPath[mu_n2], mu_ExitPath[mu_n2] );
mu_ProcessRequest ( (int)mu_n3, mu_EntryPath[mu_n3], mu_ExitPath[mu_n3] );
  };

};
/******************** RuleBase80 ********************/
class RuleBase80
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_166 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_165 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_164 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Process fwd_request + Process response + Process response, n3:%s, n2:%s, n1:%s", mu_n3.Name(), mu_n2.Name(), mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_166 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_165 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_164 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr2200;
bool mu__boolexpr2201;
bool mu__boolexpr2202;
bool mu__boolexpr2203;
bool mu__boolexpr2204;
bool mu__boolexpr2205;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_fwd_request))) mu__boolexpr2205 = FALSE ;
  else {
  mu__boolexpr2205 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2205)) mu__boolexpr2204 = FALSE ;
  else {
  mu__boolexpr2204 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr2204)) mu__boolexpr2203 = FALSE ;
  else {
  mu__boolexpr2203 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr2203)) mu__boolexpr2202 = FALSE ;
  else {
  mu__boolexpr2202 = ((mu_n1) != (mu_n2)) ; 
}
  if (!(mu__boolexpr2202)) mu__boolexpr2201 = FALSE ;
  else {
  mu__boolexpr2201 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr2201)) mu__boolexpr2200 = FALSE ;
  else {
  mu__boolexpr2200 = ((mu_n2) != (mu_n3)) ; 
}
    return mu__boolexpr2200;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 202112;
    static mu__subrange_166 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_165 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_164 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 202176 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr2206;
bool mu__boolexpr2207;
bool mu__boolexpr2208;
bool mu__boolexpr2209;
bool mu__boolexpr2210;
bool mu__boolexpr2211;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_fwd_request))) mu__boolexpr2211 = FALSE ;
  else {
  mu__boolexpr2211 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2211)) mu__boolexpr2210 = FALSE ;
  else {
  mu__boolexpr2210 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr2210)) mu__boolexpr2209 = FALSE ;
  else {
  mu__boolexpr2209 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr2209)) mu__boolexpr2208 = FALSE ;
  else {
  mu__boolexpr2208 = ((mu_n1) != (mu_n2)) ; 
}
  if (!(mu__boolexpr2208)) mu__boolexpr2207 = FALSE ;
  else {
  mu__boolexpr2207 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr2207)) mu__boolexpr2206 = FALSE ;
  else {
  mu__boolexpr2206 = ((mu_n2) != (mu_n3)) ; 
}
	      if (mu__boolexpr2206) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 202112;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_166 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_165 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_164 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_ProcessFwdRequest ( (int)mu_n1, mu_EntryPath[mu_n1], mu_ExitPath[mu_n1] );
mu_ProcessResponse ( (int)mu_n2, mu_EntryPath[mu_n2] );
mu_Tokens[mu_n2] = (mu_Tokens[mu_n2]) + (1);
mu_ProcessResponse ( (int)mu_n3, mu_EntryPath[mu_n3] );
mu_Tokens[mu_n3] = (mu_Tokens[mu_n3]) + (1);
  };

};
/******************** RuleBase81 ********************/
class RuleBase81
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_163 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_162 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_161 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Process fwd_request + Process fwd_response + Process response, n3:%s, n2:%s, n1:%s", mu_n3.Name(), mu_n2.Name(), mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_163 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_162 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_161 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr2212;
bool mu__boolexpr2213;
bool mu__boolexpr2214;
bool mu__boolexpr2215;
bool mu__boolexpr2216;
bool mu__boolexpr2217;
bool mu__boolexpr2218;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_fwd_request))) mu__boolexpr2218 = FALSE ;
  else {
  mu__boolexpr2218 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2218)) mu__boolexpr2217 = FALSE ;
  else {
  mu__boolexpr2217 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr2217)) mu__boolexpr2216 = FALSE ;
  else {
  mu__boolexpr2216 = ((mu_TailPointers[mu_ExitPath[mu_n2]][mu_n2]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2216)) mu__boolexpr2215 = FALSE ;
  else {
  mu__boolexpr2215 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr2215)) mu__boolexpr2214 = FALSE ;
  else {
  mu__boolexpr2214 = ((mu_n1) != (mu_n2)) ; 
}
  if (!(mu__boolexpr2214)) mu__boolexpr2213 = FALSE ;
  else {
  mu__boolexpr2213 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr2213)) mu__boolexpr2212 = FALSE ;
  else {
  mu__boolexpr2212 = ((mu_n2) != (mu_n3)) ; 
}
    return mu__boolexpr2212;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 202176;
    static mu__subrange_163 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_162 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_161 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 202240 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr2219;
bool mu__boolexpr2220;
bool mu__boolexpr2221;
bool mu__boolexpr2222;
bool mu__boolexpr2223;
bool mu__boolexpr2224;
bool mu__boolexpr2225;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_fwd_request))) mu__boolexpr2225 = FALSE ;
  else {
  mu__boolexpr2225 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2225)) mu__boolexpr2224 = FALSE ;
  else {
  mu__boolexpr2224 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr2224)) mu__boolexpr2223 = FALSE ;
  else {
  mu__boolexpr2223 = ((mu_TailPointers[mu_ExitPath[mu_n2]][mu_n2]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2223)) mu__boolexpr2222 = FALSE ;
  else {
  mu__boolexpr2222 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr2222)) mu__boolexpr2221 = FALSE ;
  else {
  mu__boolexpr2221 = ((mu_n1) != (mu_n2)) ; 
}
  if (!(mu__boolexpr2221)) mu__boolexpr2220 = FALSE ;
  else {
  mu__boolexpr2220 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr2220)) mu__boolexpr2219 = FALSE ;
  else {
  mu__boolexpr2219 = ((mu_n2) != (mu_n3)) ; 
}
	      if (mu__boolexpr2219) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 202176;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_163 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_162 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_161 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_ProcessFwdRequest ( (int)mu_n1, mu_EntryPath[mu_n1], mu_ExitPath[mu_n1] );
mu_ProcessFwdResponse ( (int)mu_n2, mu_EntryPath[mu_n2], mu_ExitPath[mu_n2] );
mu_ProcessResponse ( (int)mu_n3, mu_EntryPath[mu_n3] );
mu_Tokens[mu_n3] = (mu_Tokens[mu_n3]) + (1);
  };

};
/******************** RuleBase82 ********************/
class RuleBase82
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_160 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_159 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_158 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Process fwd_request + Process fwd_response + Process fwd_response, n3:%s, n2:%s, n1:%s", mu_n3.Name(), mu_n2.Name(), mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_160 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_159 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_158 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr2226;
bool mu__boolexpr2227;
bool mu__boolexpr2228;
bool mu__boolexpr2229;
bool mu__boolexpr2230;
bool mu__boolexpr2231;
bool mu__boolexpr2232;
bool mu__boolexpr2233;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_fwd_request))) mu__boolexpr2233 = FALSE ;
  else {
  mu__boolexpr2233 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2233)) mu__boolexpr2232 = FALSE ;
  else {
  mu__boolexpr2232 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr2232)) mu__boolexpr2231 = FALSE ;
  else {
  mu__boolexpr2231 = ((mu_TailPointers[mu_ExitPath[mu_n2]][mu_n2]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2231)) mu__boolexpr2230 = FALSE ;
  else {
  mu__boolexpr2230 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr2230)) mu__boolexpr2229 = FALSE ;
  else {
  mu__boolexpr2229 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2229)) mu__boolexpr2228 = FALSE ;
  else {
  mu__boolexpr2228 = ((mu_n1) != (mu_n2)) ; 
}
  if (!(mu__boolexpr2228)) mu__boolexpr2227 = FALSE ;
  else {
  mu__boolexpr2227 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr2227)) mu__boolexpr2226 = FALSE ;
  else {
  mu__boolexpr2226 = ((mu_n2) != (mu_n3)) ; 
}
    return mu__boolexpr2226;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 202240;
    static mu__subrange_160 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_159 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_158 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 202304 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr2234;
bool mu__boolexpr2235;
bool mu__boolexpr2236;
bool mu__boolexpr2237;
bool mu__boolexpr2238;
bool mu__boolexpr2239;
bool mu__boolexpr2240;
bool mu__boolexpr2241;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_fwd_request))) mu__boolexpr2241 = FALSE ;
  else {
  mu__boolexpr2241 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2241)) mu__boolexpr2240 = FALSE ;
  else {
  mu__boolexpr2240 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr2240)) mu__boolexpr2239 = FALSE ;
  else {
  mu__boolexpr2239 = ((mu_TailPointers[mu_ExitPath[mu_n2]][mu_n2]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2239)) mu__boolexpr2238 = FALSE ;
  else {
  mu__boolexpr2238 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr2238)) mu__boolexpr2237 = FALSE ;
  else {
  mu__boolexpr2237 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2237)) mu__boolexpr2236 = FALSE ;
  else {
  mu__boolexpr2236 = ((mu_n1) != (mu_n2)) ; 
}
  if (!(mu__boolexpr2236)) mu__boolexpr2235 = FALSE ;
  else {
  mu__boolexpr2235 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr2235)) mu__boolexpr2234 = FALSE ;
  else {
  mu__boolexpr2234 = ((mu_n2) != (mu_n3)) ; 
}
	      if (mu__boolexpr2234) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 202240;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_160 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_159 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_158 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_ProcessFwdRequest ( (int)mu_n1, mu_EntryPath[mu_n1], mu_ExitPath[mu_n1] );
mu_ProcessFwdResponse ( (int)mu_n2, mu_EntryPath[mu_n2], mu_ExitPath[mu_n2] );
mu_ProcessFwdResponse ( (int)mu_n3, mu_EntryPath[mu_n3], mu_ExitPath[mu_n3] );
  };

};
/******************** RuleBase83 ********************/
class RuleBase83
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_157 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_156 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_155 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Process fwd_request + Process request + Process response, n3:%s, n2:%s, n1:%s", mu_n3.Name(), mu_n2.Name(), mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_157 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_156 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_155 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr2242;
bool mu__boolexpr2243;
bool mu__boolexpr2244;
bool mu__boolexpr2245;
bool mu__boolexpr2246;
bool mu__boolexpr2247;
bool mu__boolexpr2248;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_fwd_request))) mu__boolexpr2248 = FALSE ;
  else {
  mu__boolexpr2248 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2248)) mu__boolexpr2247 = FALSE ;
  else {
  mu__boolexpr2247 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr2247)) mu__boolexpr2246 = FALSE ;
  else {
  mu__boolexpr2246 = ((mu_TailPointers[mu_ExitPath[mu_n2]][mu_n2]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2246)) mu__boolexpr2245 = FALSE ;
  else {
  mu__boolexpr2245 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr2245)) mu__boolexpr2244 = FALSE ;
  else {
  mu__boolexpr2244 = ((mu_n1) != (mu_n2)) ; 
}
  if (!(mu__boolexpr2244)) mu__boolexpr2243 = FALSE ;
  else {
  mu__boolexpr2243 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr2243)) mu__boolexpr2242 = FALSE ;
  else {
  mu__boolexpr2242 = ((mu_n2) != (mu_n3)) ; 
}
    return mu__boolexpr2242;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 202304;
    static mu__subrange_157 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_156 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_155 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 202368 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr2249;
bool mu__boolexpr2250;
bool mu__boolexpr2251;
bool mu__boolexpr2252;
bool mu__boolexpr2253;
bool mu__boolexpr2254;
bool mu__boolexpr2255;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_fwd_request))) mu__boolexpr2255 = FALSE ;
  else {
  mu__boolexpr2255 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2255)) mu__boolexpr2254 = FALSE ;
  else {
  mu__boolexpr2254 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr2254)) mu__boolexpr2253 = FALSE ;
  else {
  mu__boolexpr2253 = ((mu_TailPointers[mu_ExitPath[mu_n2]][mu_n2]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2253)) mu__boolexpr2252 = FALSE ;
  else {
  mu__boolexpr2252 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr2252)) mu__boolexpr2251 = FALSE ;
  else {
  mu__boolexpr2251 = ((mu_n1) != (mu_n2)) ; 
}
  if (!(mu__boolexpr2251)) mu__boolexpr2250 = FALSE ;
  else {
  mu__boolexpr2250 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr2250)) mu__boolexpr2249 = FALSE ;
  else {
  mu__boolexpr2249 = ((mu_n2) != (mu_n3)) ; 
}
	      if (mu__boolexpr2249) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 202304;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_157 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_156 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_155 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_ProcessFwdRequest ( (int)mu_n1, mu_EntryPath[mu_n1], mu_ExitPath[mu_n1] );
mu_ProcessRequest ( (int)mu_n2, mu_EntryPath[mu_n2], mu_ExitPath[mu_n2] );
mu_ProcessResponse ( (int)mu_n3, mu_EntryPath[mu_n3] );
mu_Tokens[mu_n3] = (mu_Tokens[mu_n3]) + (1);
  };

};
/******************** RuleBase84 ********************/
class RuleBase84
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_154 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_153 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_152 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Process fwd_request + Process request + Process fwd_response, n3:%s, n2:%s, n1:%s", mu_n3.Name(), mu_n2.Name(), mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_154 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_153 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_152 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr2256;
bool mu__boolexpr2257;
bool mu__boolexpr2258;
bool mu__boolexpr2259;
bool mu__boolexpr2260;
bool mu__boolexpr2261;
bool mu__boolexpr2262;
bool mu__boolexpr2263;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_fwd_request))) mu__boolexpr2263 = FALSE ;
  else {
  mu__boolexpr2263 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2263)) mu__boolexpr2262 = FALSE ;
  else {
  mu__boolexpr2262 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr2262)) mu__boolexpr2261 = FALSE ;
  else {
  mu__boolexpr2261 = ((mu_TailPointers[mu_ExitPath[mu_n2]][mu_n2]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2261)) mu__boolexpr2260 = FALSE ;
  else {
  mu__boolexpr2260 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr2260)) mu__boolexpr2259 = FALSE ;
  else {
  mu__boolexpr2259 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2259)) mu__boolexpr2258 = FALSE ;
  else {
  mu__boolexpr2258 = ((mu_n1) != (mu_n2)) ; 
}
  if (!(mu__boolexpr2258)) mu__boolexpr2257 = FALSE ;
  else {
  mu__boolexpr2257 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr2257)) mu__boolexpr2256 = FALSE ;
  else {
  mu__boolexpr2256 = ((mu_n2) != (mu_n3)) ; 
}
    return mu__boolexpr2256;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 202368;
    static mu__subrange_154 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_153 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_152 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 202432 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr2264;
bool mu__boolexpr2265;
bool mu__boolexpr2266;
bool mu__boolexpr2267;
bool mu__boolexpr2268;
bool mu__boolexpr2269;
bool mu__boolexpr2270;
bool mu__boolexpr2271;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_fwd_request))) mu__boolexpr2271 = FALSE ;
  else {
  mu__boolexpr2271 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2271)) mu__boolexpr2270 = FALSE ;
  else {
  mu__boolexpr2270 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr2270)) mu__boolexpr2269 = FALSE ;
  else {
  mu__boolexpr2269 = ((mu_TailPointers[mu_ExitPath[mu_n2]][mu_n2]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2269)) mu__boolexpr2268 = FALSE ;
  else {
  mu__boolexpr2268 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr2268)) mu__boolexpr2267 = FALSE ;
  else {
  mu__boolexpr2267 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2267)) mu__boolexpr2266 = FALSE ;
  else {
  mu__boolexpr2266 = ((mu_n1) != (mu_n2)) ; 
}
  if (!(mu__boolexpr2266)) mu__boolexpr2265 = FALSE ;
  else {
  mu__boolexpr2265 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr2265)) mu__boolexpr2264 = FALSE ;
  else {
  mu__boolexpr2264 = ((mu_n2) != (mu_n3)) ; 
}
	      if (mu__boolexpr2264) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 202368;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_154 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_153 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_152 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_ProcessFwdRequest ( (int)mu_n1, mu_EntryPath[mu_n1], mu_ExitPath[mu_n1] );
mu_ProcessRequest ( (int)mu_n2, mu_EntryPath[mu_n2], mu_ExitPath[mu_n2] );
mu_ProcessFwdResponse ( (int)mu_n3, mu_EntryPath[mu_n3], mu_ExitPath[mu_n3] );
  };

};
/******************** RuleBase85 ********************/
class RuleBase85
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_151 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_150 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_149 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Process fwd_request + Process request + Process request, n3:%s, n2:%s, n1:%s", mu_n3.Name(), mu_n2.Name(), mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_151 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_150 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_149 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr2272;
bool mu__boolexpr2273;
bool mu__boolexpr2274;
bool mu__boolexpr2275;
bool mu__boolexpr2276;
bool mu__boolexpr2277;
bool mu__boolexpr2278;
bool mu__boolexpr2279;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_fwd_request))) mu__boolexpr2279 = FALSE ;
  else {
  mu__boolexpr2279 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2279)) mu__boolexpr2278 = FALSE ;
  else {
  mu__boolexpr2278 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr2278)) mu__boolexpr2277 = FALSE ;
  else {
  mu__boolexpr2277 = ((mu_TailPointers[mu_ExitPath[mu_n2]][mu_n2]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2277)) mu__boolexpr2276 = FALSE ;
  else {
  mu__boolexpr2276 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr2276)) mu__boolexpr2275 = FALSE ;
  else {
  mu__boolexpr2275 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2275)) mu__boolexpr2274 = FALSE ;
  else {
  mu__boolexpr2274 = ((mu_n1) != (mu_n2)) ; 
}
  if (!(mu__boolexpr2274)) mu__boolexpr2273 = FALSE ;
  else {
  mu__boolexpr2273 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr2273)) mu__boolexpr2272 = FALSE ;
  else {
  mu__boolexpr2272 = ((mu_n2) != (mu_n3)) ; 
}
    return mu__boolexpr2272;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 202432;
    static mu__subrange_151 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_150 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_149 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 202496 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr2280;
bool mu__boolexpr2281;
bool mu__boolexpr2282;
bool mu__boolexpr2283;
bool mu__boolexpr2284;
bool mu__boolexpr2285;
bool mu__boolexpr2286;
bool mu__boolexpr2287;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_fwd_request))) mu__boolexpr2287 = FALSE ;
  else {
  mu__boolexpr2287 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2287)) mu__boolexpr2286 = FALSE ;
  else {
  mu__boolexpr2286 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr2286)) mu__boolexpr2285 = FALSE ;
  else {
  mu__boolexpr2285 = ((mu_TailPointers[mu_ExitPath[mu_n2]][mu_n2]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2285)) mu__boolexpr2284 = FALSE ;
  else {
  mu__boolexpr2284 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr2284)) mu__boolexpr2283 = FALSE ;
  else {
  mu__boolexpr2283 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2283)) mu__boolexpr2282 = FALSE ;
  else {
  mu__boolexpr2282 = ((mu_n1) != (mu_n2)) ; 
}
  if (!(mu__boolexpr2282)) mu__boolexpr2281 = FALSE ;
  else {
  mu__boolexpr2281 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr2281)) mu__boolexpr2280 = FALSE ;
  else {
  mu__boolexpr2280 = ((mu_n2) != (mu_n3)) ; 
}
	      if (mu__boolexpr2280) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 202432;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_151 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_150 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_149 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_ProcessFwdRequest ( (int)mu_n1, mu_EntryPath[mu_n1], mu_ExitPath[mu_n1] );
mu_ProcessRequest ( (int)mu_n2, mu_EntryPath[mu_n2], mu_ExitPath[mu_n2] );
mu_ProcessRequest ( (int)mu_n3, mu_EntryPath[mu_n3], mu_ExitPath[mu_n3] );
  };

};
/******************** RuleBase86 ********************/
class RuleBase86
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_148 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_147 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_146 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Process fwd_request + Process fwd_request + Process response, n3:%s, n2:%s, n1:%s", mu_n3.Name(), mu_n2.Name(), mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_148 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_147 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_146 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr2288;
bool mu__boolexpr2289;
bool mu__boolexpr2290;
bool mu__boolexpr2291;
bool mu__boolexpr2292;
bool mu__boolexpr2293;
bool mu__boolexpr2294;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_fwd_request))) mu__boolexpr2294 = FALSE ;
  else {
  mu__boolexpr2294 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2294)) mu__boolexpr2293 = FALSE ;
  else {
  mu__boolexpr2293 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_fwd_request)) ; 
}
  if (!(mu__boolexpr2293)) mu__boolexpr2292 = FALSE ;
  else {
  mu__boolexpr2292 = ((mu_TailPointers[mu_ExitPath[mu_n2]][mu_n2]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2292)) mu__boolexpr2291 = FALSE ;
  else {
  mu__boolexpr2291 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr2291)) mu__boolexpr2290 = FALSE ;
  else {
  mu__boolexpr2290 = ((mu_n1) != (mu_n2)) ; 
}
  if (!(mu__boolexpr2290)) mu__boolexpr2289 = FALSE ;
  else {
  mu__boolexpr2289 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr2289)) mu__boolexpr2288 = FALSE ;
  else {
  mu__boolexpr2288 = ((mu_n2) != (mu_n3)) ; 
}
    return mu__boolexpr2288;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 202496;
    static mu__subrange_148 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_147 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_146 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 202560 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr2295;
bool mu__boolexpr2296;
bool mu__boolexpr2297;
bool mu__boolexpr2298;
bool mu__boolexpr2299;
bool mu__boolexpr2300;
bool mu__boolexpr2301;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_fwd_request))) mu__boolexpr2301 = FALSE ;
  else {
  mu__boolexpr2301 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2301)) mu__boolexpr2300 = FALSE ;
  else {
  mu__boolexpr2300 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_fwd_request)) ; 
}
  if (!(mu__boolexpr2300)) mu__boolexpr2299 = FALSE ;
  else {
  mu__boolexpr2299 = ((mu_TailPointers[mu_ExitPath[mu_n2]][mu_n2]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2299)) mu__boolexpr2298 = FALSE ;
  else {
  mu__boolexpr2298 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr2298)) mu__boolexpr2297 = FALSE ;
  else {
  mu__boolexpr2297 = ((mu_n1) != (mu_n2)) ; 
}
  if (!(mu__boolexpr2297)) mu__boolexpr2296 = FALSE ;
  else {
  mu__boolexpr2296 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr2296)) mu__boolexpr2295 = FALSE ;
  else {
  mu__boolexpr2295 = ((mu_n2) != (mu_n3)) ; 
}
	      if (mu__boolexpr2295) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 202496;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_148 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_147 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_146 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_ProcessFwdRequest ( (int)mu_n1, mu_EntryPath[mu_n1], mu_ExitPath[mu_n1] );
mu_ProcessFwdRequest ( (int)mu_n2, mu_EntryPath[mu_n2], mu_ExitPath[mu_n2] );
mu_ProcessResponse ( (int)mu_n3, mu_EntryPath[mu_n3] );
mu_Tokens[mu_n3] = (mu_Tokens[mu_n3]) + (1);
  };

};
/******************** RuleBase87 ********************/
class RuleBase87
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_145 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_144 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_143 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Process fwd_request + Process fwd_request + Process fwd_response, n3:%s, n2:%s, n1:%s", mu_n3.Name(), mu_n2.Name(), mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_145 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_144 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_143 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr2302;
bool mu__boolexpr2303;
bool mu__boolexpr2304;
bool mu__boolexpr2305;
bool mu__boolexpr2306;
bool mu__boolexpr2307;
bool mu__boolexpr2308;
bool mu__boolexpr2309;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_fwd_request))) mu__boolexpr2309 = FALSE ;
  else {
  mu__boolexpr2309 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2309)) mu__boolexpr2308 = FALSE ;
  else {
  mu__boolexpr2308 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_fwd_request)) ; 
}
  if (!(mu__boolexpr2308)) mu__boolexpr2307 = FALSE ;
  else {
  mu__boolexpr2307 = ((mu_TailPointers[mu_ExitPath[mu_n2]][mu_n2]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2307)) mu__boolexpr2306 = FALSE ;
  else {
  mu__boolexpr2306 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr2306)) mu__boolexpr2305 = FALSE ;
  else {
  mu__boolexpr2305 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2305)) mu__boolexpr2304 = FALSE ;
  else {
  mu__boolexpr2304 = ((mu_n1) != (mu_n2)) ; 
}
  if (!(mu__boolexpr2304)) mu__boolexpr2303 = FALSE ;
  else {
  mu__boolexpr2303 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr2303)) mu__boolexpr2302 = FALSE ;
  else {
  mu__boolexpr2302 = ((mu_n2) != (mu_n3)) ; 
}
    return mu__boolexpr2302;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 202560;
    static mu__subrange_145 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_144 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_143 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 202624 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr2310;
bool mu__boolexpr2311;
bool mu__boolexpr2312;
bool mu__boolexpr2313;
bool mu__boolexpr2314;
bool mu__boolexpr2315;
bool mu__boolexpr2316;
bool mu__boolexpr2317;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_fwd_request))) mu__boolexpr2317 = FALSE ;
  else {
  mu__boolexpr2317 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2317)) mu__boolexpr2316 = FALSE ;
  else {
  mu__boolexpr2316 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_fwd_request)) ; 
}
  if (!(mu__boolexpr2316)) mu__boolexpr2315 = FALSE ;
  else {
  mu__boolexpr2315 = ((mu_TailPointers[mu_ExitPath[mu_n2]][mu_n2]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2315)) mu__boolexpr2314 = FALSE ;
  else {
  mu__boolexpr2314 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr2314)) mu__boolexpr2313 = FALSE ;
  else {
  mu__boolexpr2313 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2313)) mu__boolexpr2312 = FALSE ;
  else {
  mu__boolexpr2312 = ((mu_n1) != (mu_n2)) ; 
}
  if (!(mu__boolexpr2312)) mu__boolexpr2311 = FALSE ;
  else {
  mu__boolexpr2311 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr2311)) mu__boolexpr2310 = FALSE ;
  else {
  mu__boolexpr2310 = ((mu_n2) != (mu_n3)) ; 
}
	      if (mu__boolexpr2310) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 202560;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_145 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_144 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_143 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_ProcessFwdRequest ( (int)mu_n1, mu_EntryPath[mu_n1], mu_ExitPath[mu_n1] );
mu_ProcessFwdRequest ( (int)mu_n2, mu_EntryPath[mu_n2], mu_ExitPath[mu_n2] );
mu_ProcessFwdResponse ( (int)mu_n3, mu_EntryPath[mu_n3], mu_ExitPath[mu_n3] );
  };

};
/******************** RuleBase88 ********************/
class RuleBase88
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_142 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_141 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_140 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Process fwd_request + Process fwd_request + Process request, n3:%s, n2:%s, n1:%s", mu_n3.Name(), mu_n2.Name(), mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_142 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_141 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_140 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr2318;
bool mu__boolexpr2319;
bool mu__boolexpr2320;
bool mu__boolexpr2321;
bool mu__boolexpr2322;
bool mu__boolexpr2323;
bool mu__boolexpr2324;
bool mu__boolexpr2325;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_fwd_request))) mu__boolexpr2325 = FALSE ;
  else {
  mu__boolexpr2325 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2325)) mu__boolexpr2324 = FALSE ;
  else {
  mu__boolexpr2324 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_fwd_request)) ; 
}
  if (!(mu__boolexpr2324)) mu__boolexpr2323 = FALSE ;
  else {
  mu__boolexpr2323 = ((mu_TailPointers[mu_ExitPath[mu_n2]][mu_n2]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2323)) mu__boolexpr2322 = FALSE ;
  else {
  mu__boolexpr2322 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr2322)) mu__boolexpr2321 = FALSE ;
  else {
  mu__boolexpr2321 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2321)) mu__boolexpr2320 = FALSE ;
  else {
  mu__boolexpr2320 = ((mu_n1) != (mu_n2)) ; 
}
  if (!(mu__boolexpr2320)) mu__boolexpr2319 = FALSE ;
  else {
  mu__boolexpr2319 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr2319)) mu__boolexpr2318 = FALSE ;
  else {
  mu__boolexpr2318 = ((mu_n2) != (mu_n3)) ; 
}
    return mu__boolexpr2318;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 202624;
    static mu__subrange_142 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_141 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_140 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 202688 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr2326;
bool mu__boolexpr2327;
bool mu__boolexpr2328;
bool mu__boolexpr2329;
bool mu__boolexpr2330;
bool mu__boolexpr2331;
bool mu__boolexpr2332;
bool mu__boolexpr2333;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_fwd_request))) mu__boolexpr2333 = FALSE ;
  else {
  mu__boolexpr2333 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2333)) mu__boolexpr2332 = FALSE ;
  else {
  mu__boolexpr2332 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_fwd_request)) ; 
}
  if (!(mu__boolexpr2332)) mu__boolexpr2331 = FALSE ;
  else {
  mu__boolexpr2331 = ((mu_TailPointers[mu_ExitPath[mu_n2]][mu_n2]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2331)) mu__boolexpr2330 = FALSE ;
  else {
  mu__boolexpr2330 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr2330)) mu__boolexpr2329 = FALSE ;
  else {
  mu__boolexpr2329 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2329)) mu__boolexpr2328 = FALSE ;
  else {
  mu__boolexpr2328 = ((mu_n1) != (mu_n2)) ; 
}
  if (!(mu__boolexpr2328)) mu__boolexpr2327 = FALSE ;
  else {
  mu__boolexpr2327 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr2327)) mu__boolexpr2326 = FALSE ;
  else {
  mu__boolexpr2326 = ((mu_n2) != (mu_n3)) ; 
}
	      if (mu__boolexpr2326) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 202624;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_142 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_141 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_140 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_ProcessFwdRequest ( (int)mu_n1, mu_EntryPath[mu_n1], mu_ExitPath[mu_n1] );
mu_ProcessFwdRequest ( (int)mu_n2, mu_EntryPath[mu_n2], mu_ExitPath[mu_n2] );
mu_ProcessRequest ( (int)mu_n3, mu_EntryPath[mu_n3], mu_ExitPath[mu_n3] );
  };

};
/******************** RuleBase89 ********************/
class RuleBase89
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_139 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_138 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_137 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Process fwd_request + Process fwd_request + Process fwd_request, n3:%s, n2:%s, n1:%s", mu_n3.Name(), mu_n2.Name(), mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_139 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_138 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_137 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr2334;
bool mu__boolexpr2335;
bool mu__boolexpr2336;
bool mu__boolexpr2337;
bool mu__boolexpr2338;
bool mu__boolexpr2339;
bool mu__boolexpr2340;
bool mu__boolexpr2341;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_fwd_request))) mu__boolexpr2341 = FALSE ;
  else {
  mu__boolexpr2341 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2341)) mu__boolexpr2340 = FALSE ;
  else {
  mu__boolexpr2340 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_fwd_request)) ; 
}
  if (!(mu__boolexpr2340)) mu__boolexpr2339 = FALSE ;
  else {
  mu__boolexpr2339 = ((mu_TailPointers[mu_ExitPath[mu_n2]][mu_n2]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2339)) mu__boolexpr2338 = FALSE ;
  else {
  mu__boolexpr2338 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_fwd_request)) ; 
}
  if (!(mu__boolexpr2338)) mu__boolexpr2337 = FALSE ;
  else {
  mu__boolexpr2337 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2337)) mu__boolexpr2336 = FALSE ;
  else {
  mu__boolexpr2336 = ((mu_n1) != (mu_n2)) ; 
}
  if (!(mu__boolexpr2336)) mu__boolexpr2335 = FALSE ;
  else {
  mu__boolexpr2335 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr2335)) mu__boolexpr2334 = FALSE ;
  else {
  mu__boolexpr2334 = ((mu_n2) != (mu_n3)) ; 
}
    return mu__boolexpr2334;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 202688;
    static mu__subrange_139 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_138 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_137 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 202752 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr2342;
bool mu__boolexpr2343;
bool mu__boolexpr2344;
bool mu__boolexpr2345;
bool mu__boolexpr2346;
bool mu__boolexpr2347;
bool mu__boolexpr2348;
bool mu__boolexpr2349;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_fwd_request))) mu__boolexpr2349 = FALSE ;
  else {
  mu__boolexpr2349 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2349)) mu__boolexpr2348 = FALSE ;
  else {
  mu__boolexpr2348 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_fwd_request)) ; 
}
  if (!(mu__boolexpr2348)) mu__boolexpr2347 = FALSE ;
  else {
  mu__boolexpr2347 = ((mu_TailPointers[mu_ExitPath[mu_n2]][mu_n2]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2347)) mu__boolexpr2346 = FALSE ;
  else {
  mu__boolexpr2346 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_fwd_request)) ; 
}
  if (!(mu__boolexpr2346)) mu__boolexpr2345 = FALSE ;
  else {
  mu__boolexpr2345 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2345)) mu__boolexpr2344 = FALSE ;
  else {
  mu__boolexpr2344 = ((mu_n1) != (mu_n2)) ; 
}
  if (!(mu__boolexpr2344)) mu__boolexpr2343 = FALSE ;
  else {
  mu__boolexpr2343 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr2343)) mu__boolexpr2342 = FALSE ;
  else {
  mu__boolexpr2342 = ((mu_n2) != (mu_n3)) ; 
}
	      if (mu__boolexpr2342) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 202688;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_139 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_138 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_137 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_ProcessFwdRequest ( (int)mu_n1, mu_EntryPath[mu_n1], mu_ExitPath[mu_n1] );
mu_ProcessFwdRequest ( (int)mu_n2, mu_EntryPath[mu_n2], mu_ExitPath[mu_n2] );
mu_ProcessFwdRequest ( (int)mu_n3, mu_EntryPath[mu_n3], mu_ExitPath[mu_n3] );
  };

};
/******************** RuleBase90 ********************/
class RuleBase90
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_136 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_135 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_134 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_133 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Send request + Process response + Process response, n4:%s, n3:%s, n2:%s, n1:%s", mu_n4.Name(), mu_n3.Name(), mu_n2.Name(), mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_136 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_135 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_134 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_133 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr2350;
bool mu__boolexpr2351;
bool mu__boolexpr2352;
bool mu__boolexpr2353;
bool mu__boolexpr2354;
bool mu__boolexpr2355;
bool mu__boolexpr2356;
bool mu__boolexpr2357;
bool mu__boolexpr2358;
  if (!((mu_n1) != (mu_n2))) mu__boolexpr2358 = FALSE ;
  else {
  mu__boolexpr2358 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2358)) mu__boolexpr2357 = FALSE ;
  else {
  mu__boolexpr2357 = ((mu_Routers[mu_n1]) == (0)) ; 
}
  if (!(mu__boolexpr2357)) mu__boolexpr2356 = FALSE ;
  else {
  mu__boolexpr2356 = ((mu_Routers[mu_n2]) == (0)) ; 
}
  if (!(mu__boolexpr2356)) mu__boolexpr2355 = FALSE ;
  else {
  mu__boolexpr2355 = ((mu_Tokens[mu_n1]) > (0)) ; 
}
  if (!(mu__boolexpr2355)) mu__boolexpr2354 = FALSE ;
  else {
  mu__boolexpr2354 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr2354)) mu__boolexpr2353 = FALSE ;
  else {
  mu__boolexpr2353 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr2353)) mu__boolexpr2352 = FALSE ;
  else {
  mu__boolexpr2352 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr2352)) mu__boolexpr2351 = FALSE ;
  else {
  mu__boolexpr2351 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr2351)) mu__boolexpr2350 = FALSE ;
  else {
  mu__boolexpr2350 = ((mu_n3) != (mu_n4)) ; 
}
    return mu__boolexpr2350;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 202752;
    static mu__subrange_136 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_135 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_134 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_133 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 203008 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr2359;
bool mu__boolexpr2360;
bool mu__boolexpr2361;
bool mu__boolexpr2362;
bool mu__boolexpr2363;
bool mu__boolexpr2364;
bool mu__boolexpr2365;
bool mu__boolexpr2366;
bool mu__boolexpr2367;
  if (!((mu_n1) != (mu_n2))) mu__boolexpr2367 = FALSE ;
  else {
  mu__boolexpr2367 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2367)) mu__boolexpr2366 = FALSE ;
  else {
  mu__boolexpr2366 = ((mu_Routers[mu_n1]) == (0)) ; 
}
  if (!(mu__boolexpr2366)) mu__boolexpr2365 = FALSE ;
  else {
  mu__boolexpr2365 = ((mu_Routers[mu_n2]) == (0)) ; 
}
  if (!(mu__boolexpr2365)) mu__boolexpr2364 = FALSE ;
  else {
  mu__boolexpr2364 = ((mu_Tokens[mu_n1]) > (0)) ; 
}
  if (!(mu__boolexpr2364)) mu__boolexpr2363 = FALSE ;
  else {
  mu__boolexpr2363 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr2363)) mu__boolexpr2362 = FALSE ;
  else {
  mu__boolexpr2362 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr2362)) mu__boolexpr2361 = FALSE ;
  else {
  mu__boolexpr2361 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr2361)) mu__boolexpr2360 = FALSE ;
  else {
  mu__boolexpr2360 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr2360)) mu__boolexpr2359 = FALSE ;
  else {
  mu__boolexpr2359 = ((mu_n3) != (mu_n4)) ; 
}
	      if (mu__boolexpr2359) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 202752;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_136 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_135 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_134 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_133 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_SendRequest ( (int)mu_n1, mu_ExitPath[mu_n1], (int)mu_n2 );
mu_Tokens[mu_n1] = (mu_Tokens[mu_n1]) - (1);
mu_ProcessResponse ( (int)mu_n3, mu_EntryPath[mu_n3] );
mu_Tokens[mu_n3] = (mu_Tokens[mu_n3]) + (1);
mu_ProcessResponse ( (int)mu_n4, mu_EntryPath[mu_n4] );
mu_Tokens[mu_n4] = (mu_Tokens[mu_n4]) + (1);
  };

};
/******************** RuleBase91 ********************/
class RuleBase91
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_132 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_131 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_130 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_129 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Send request + Process fwd_response + Process response, n4:%s, n3:%s, n2:%s, n1:%s", mu_n4.Name(), mu_n3.Name(), mu_n2.Name(), mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_132 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_131 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_130 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_129 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr2368;
bool mu__boolexpr2369;
bool mu__boolexpr2370;
bool mu__boolexpr2371;
bool mu__boolexpr2372;
bool mu__boolexpr2373;
bool mu__boolexpr2374;
bool mu__boolexpr2375;
bool mu__boolexpr2376;
bool mu__boolexpr2377;
  if (!((mu_n1) != (mu_n2))) mu__boolexpr2377 = FALSE ;
  else {
  mu__boolexpr2377 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2377)) mu__boolexpr2376 = FALSE ;
  else {
  mu__boolexpr2376 = ((mu_Routers[mu_n1]) == (0)) ; 
}
  if (!(mu__boolexpr2376)) mu__boolexpr2375 = FALSE ;
  else {
  mu__boolexpr2375 = ((mu_Routers[mu_n2]) == (0)) ; 
}
  if (!(mu__boolexpr2375)) mu__boolexpr2374 = FALSE ;
  else {
  mu__boolexpr2374 = ((mu_Tokens[mu_n1]) > (0)) ; 
}
  if (!(mu__boolexpr2374)) mu__boolexpr2373 = FALSE ;
  else {
  mu__boolexpr2373 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr2373)) mu__boolexpr2372 = FALSE ;
  else {
  mu__boolexpr2372 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2372)) mu__boolexpr2371 = FALSE ;
  else {
  mu__boolexpr2371 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr2371)) mu__boolexpr2370 = FALSE ;
  else {
  mu__boolexpr2370 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr2370)) mu__boolexpr2369 = FALSE ;
  else {
  mu__boolexpr2369 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr2369)) mu__boolexpr2368 = FALSE ;
  else {
  mu__boolexpr2368 = ((mu_n3) != (mu_n4)) ; 
}
    return mu__boolexpr2368;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 203008;
    static mu__subrange_132 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_131 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_130 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_129 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 203264 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr2378;
bool mu__boolexpr2379;
bool mu__boolexpr2380;
bool mu__boolexpr2381;
bool mu__boolexpr2382;
bool mu__boolexpr2383;
bool mu__boolexpr2384;
bool mu__boolexpr2385;
bool mu__boolexpr2386;
bool mu__boolexpr2387;
  if (!((mu_n1) != (mu_n2))) mu__boolexpr2387 = FALSE ;
  else {
  mu__boolexpr2387 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2387)) mu__boolexpr2386 = FALSE ;
  else {
  mu__boolexpr2386 = ((mu_Routers[mu_n1]) == (0)) ; 
}
  if (!(mu__boolexpr2386)) mu__boolexpr2385 = FALSE ;
  else {
  mu__boolexpr2385 = ((mu_Routers[mu_n2]) == (0)) ; 
}
  if (!(mu__boolexpr2385)) mu__boolexpr2384 = FALSE ;
  else {
  mu__boolexpr2384 = ((mu_Tokens[mu_n1]) > (0)) ; 
}
  if (!(mu__boolexpr2384)) mu__boolexpr2383 = FALSE ;
  else {
  mu__boolexpr2383 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr2383)) mu__boolexpr2382 = FALSE ;
  else {
  mu__boolexpr2382 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2382)) mu__boolexpr2381 = FALSE ;
  else {
  mu__boolexpr2381 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr2381)) mu__boolexpr2380 = FALSE ;
  else {
  mu__boolexpr2380 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr2380)) mu__boolexpr2379 = FALSE ;
  else {
  mu__boolexpr2379 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr2379)) mu__boolexpr2378 = FALSE ;
  else {
  mu__boolexpr2378 = ((mu_n3) != (mu_n4)) ; 
}
	      if (mu__boolexpr2378) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 203008;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_132 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_131 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_130 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_129 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_SendRequest ( (int)mu_n1, mu_ExitPath[mu_n1], (int)mu_n2 );
mu_Tokens[mu_n1] = (mu_Tokens[mu_n1]) - (1);
mu_ProcessFwdResponse ( (int)mu_n3, mu_EntryPath[mu_n3], mu_ExitPath[mu_n3] );
mu_ProcessResponse ( (int)mu_n4, mu_EntryPath[mu_n4] );
mu_Tokens[mu_n4] = (mu_Tokens[mu_n4]) + (1);
  };

};
/******************** RuleBase92 ********************/
class RuleBase92
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_128 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_127 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_126 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_125 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Send request + Process fwd_response + Process fwd_response, n4:%s, n3:%s, n2:%s, n1:%s", mu_n4.Name(), mu_n3.Name(), mu_n2.Name(), mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_128 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_127 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_126 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_125 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr2388;
bool mu__boolexpr2389;
bool mu__boolexpr2390;
bool mu__boolexpr2391;
bool mu__boolexpr2392;
bool mu__boolexpr2393;
bool mu__boolexpr2394;
bool mu__boolexpr2395;
bool mu__boolexpr2396;
bool mu__boolexpr2397;
bool mu__boolexpr2398;
  if (!((mu_n1) != (mu_n2))) mu__boolexpr2398 = FALSE ;
  else {
  mu__boolexpr2398 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2398)) mu__boolexpr2397 = FALSE ;
  else {
  mu__boolexpr2397 = ((mu_Routers[mu_n1]) == (0)) ; 
}
  if (!(mu__boolexpr2397)) mu__boolexpr2396 = FALSE ;
  else {
  mu__boolexpr2396 = ((mu_Routers[mu_n2]) == (0)) ; 
}
  if (!(mu__boolexpr2396)) mu__boolexpr2395 = FALSE ;
  else {
  mu__boolexpr2395 = ((mu_Tokens[mu_n1]) > (0)) ; 
}
  if (!(mu__boolexpr2395)) mu__boolexpr2394 = FALSE ;
  else {
  mu__boolexpr2394 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr2394)) mu__boolexpr2393 = FALSE ;
  else {
  mu__boolexpr2393 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2393)) mu__boolexpr2392 = FALSE ;
  else {
  mu__boolexpr2392 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr2392)) mu__boolexpr2391 = FALSE ;
  else {
  mu__boolexpr2391 = ((mu_TailPointers[mu_ExitPath[mu_n4]][mu_n4]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2391)) mu__boolexpr2390 = FALSE ;
  else {
  mu__boolexpr2390 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr2390)) mu__boolexpr2389 = FALSE ;
  else {
  mu__boolexpr2389 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr2389)) mu__boolexpr2388 = FALSE ;
  else {
  mu__boolexpr2388 = ((mu_n3) != (mu_n4)) ; 
}
    return mu__boolexpr2388;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 203264;
    static mu__subrange_128 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_127 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_126 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_125 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 203520 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr2399;
bool mu__boolexpr2400;
bool mu__boolexpr2401;
bool mu__boolexpr2402;
bool mu__boolexpr2403;
bool mu__boolexpr2404;
bool mu__boolexpr2405;
bool mu__boolexpr2406;
bool mu__boolexpr2407;
bool mu__boolexpr2408;
bool mu__boolexpr2409;
  if (!((mu_n1) != (mu_n2))) mu__boolexpr2409 = FALSE ;
  else {
  mu__boolexpr2409 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2409)) mu__boolexpr2408 = FALSE ;
  else {
  mu__boolexpr2408 = ((mu_Routers[mu_n1]) == (0)) ; 
}
  if (!(mu__boolexpr2408)) mu__boolexpr2407 = FALSE ;
  else {
  mu__boolexpr2407 = ((mu_Routers[mu_n2]) == (0)) ; 
}
  if (!(mu__boolexpr2407)) mu__boolexpr2406 = FALSE ;
  else {
  mu__boolexpr2406 = ((mu_Tokens[mu_n1]) > (0)) ; 
}
  if (!(mu__boolexpr2406)) mu__boolexpr2405 = FALSE ;
  else {
  mu__boolexpr2405 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr2405)) mu__boolexpr2404 = FALSE ;
  else {
  mu__boolexpr2404 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2404)) mu__boolexpr2403 = FALSE ;
  else {
  mu__boolexpr2403 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr2403)) mu__boolexpr2402 = FALSE ;
  else {
  mu__boolexpr2402 = ((mu_TailPointers[mu_ExitPath[mu_n4]][mu_n4]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2402)) mu__boolexpr2401 = FALSE ;
  else {
  mu__boolexpr2401 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr2401)) mu__boolexpr2400 = FALSE ;
  else {
  mu__boolexpr2400 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr2400)) mu__boolexpr2399 = FALSE ;
  else {
  mu__boolexpr2399 = ((mu_n3) != (mu_n4)) ; 
}
	      if (mu__boolexpr2399) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 203264;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_128 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_127 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_126 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_125 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_SendRequest ( (int)mu_n1, mu_ExitPath[mu_n1], (int)mu_n2 );
mu_Tokens[mu_n1] = (mu_Tokens[mu_n1]) - (1);
mu_ProcessFwdResponse ( (int)mu_n3, mu_EntryPath[mu_n3], mu_ExitPath[mu_n3] );
mu_ProcessFwdResponse ( (int)mu_n4, mu_EntryPath[mu_n4], mu_ExitPath[mu_n4] );
  };

};
/******************** RuleBase93 ********************/
class RuleBase93
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_124 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_123 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_122 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_121 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Send request + Process request + Process response, n4:%s, n3:%s, n2:%s, n1:%s", mu_n4.Name(), mu_n3.Name(), mu_n2.Name(), mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_124 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_123 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_122 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_121 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr2410;
bool mu__boolexpr2411;
bool mu__boolexpr2412;
bool mu__boolexpr2413;
bool mu__boolexpr2414;
bool mu__boolexpr2415;
bool mu__boolexpr2416;
bool mu__boolexpr2417;
bool mu__boolexpr2418;
bool mu__boolexpr2419;
  if (!((mu_n1) != (mu_n2))) mu__boolexpr2419 = FALSE ;
  else {
  mu__boolexpr2419 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2419)) mu__boolexpr2418 = FALSE ;
  else {
  mu__boolexpr2418 = ((mu_Routers[mu_n1]) == (0)) ; 
}
  if (!(mu__boolexpr2418)) mu__boolexpr2417 = FALSE ;
  else {
  mu__boolexpr2417 = ((mu_Routers[mu_n2]) == (0)) ; 
}
  if (!(mu__boolexpr2417)) mu__boolexpr2416 = FALSE ;
  else {
  mu__boolexpr2416 = ((mu_Tokens[mu_n1]) > (0)) ; 
}
  if (!(mu__boolexpr2416)) mu__boolexpr2415 = FALSE ;
  else {
  mu__boolexpr2415 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr2415)) mu__boolexpr2414 = FALSE ;
  else {
  mu__boolexpr2414 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2414)) mu__boolexpr2413 = FALSE ;
  else {
  mu__boolexpr2413 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr2413)) mu__boolexpr2412 = FALSE ;
  else {
  mu__boolexpr2412 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr2412)) mu__boolexpr2411 = FALSE ;
  else {
  mu__boolexpr2411 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr2411)) mu__boolexpr2410 = FALSE ;
  else {
  mu__boolexpr2410 = ((mu_n3) != (mu_n4)) ; 
}
    return mu__boolexpr2410;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 203520;
    static mu__subrange_124 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_123 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_122 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_121 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 203776 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr2420;
bool mu__boolexpr2421;
bool mu__boolexpr2422;
bool mu__boolexpr2423;
bool mu__boolexpr2424;
bool mu__boolexpr2425;
bool mu__boolexpr2426;
bool mu__boolexpr2427;
bool mu__boolexpr2428;
bool mu__boolexpr2429;
  if (!((mu_n1) != (mu_n2))) mu__boolexpr2429 = FALSE ;
  else {
  mu__boolexpr2429 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2429)) mu__boolexpr2428 = FALSE ;
  else {
  mu__boolexpr2428 = ((mu_Routers[mu_n1]) == (0)) ; 
}
  if (!(mu__boolexpr2428)) mu__boolexpr2427 = FALSE ;
  else {
  mu__boolexpr2427 = ((mu_Routers[mu_n2]) == (0)) ; 
}
  if (!(mu__boolexpr2427)) mu__boolexpr2426 = FALSE ;
  else {
  mu__boolexpr2426 = ((mu_Tokens[mu_n1]) > (0)) ; 
}
  if (!(mu__boolexpr2426)) mu__boolexpr2425 = FALSE ;
  else {
  mu__boolexpr2425 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr2425)) mu__boolexpr2424 = FALSE ;
  else {
  mu__boolexpr2424 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2424)) mu__boolexpr2423 = FALSE ;
  else {
  mu__boolexpr2423 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr2423)) mu__boolexpr2422 = FALSE ;
  else {
  mu__boolexpr2422 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr2422)) mu__boolexpr2421 = FALSE ;
  else {
  mu__boolexpr2421 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr2421)) mu__boolexpr2420 = FALSE ;
  else {
  mu__boolexpr2420 = ((mu_n3) != (mu_n4)) ; 
}
	      if (mu__boolexpr2420) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 203520;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_124 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_123 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_122 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_121 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_SendRequest ( (int)mu_n1, mu_ExitPath[mu_n1], (int)mu_n2 );
mu_Tokens[mu_n1] = (mu_Tokens[mu_n1]) - (1);
mu_ProcessRequest ( (int)mu_n3, mu_EntryPath[mu_n3], mu_ExitPath[mu_n3] );
mu_ProcessResponse ( (int)mu_n4, mu_EntryPath[mu_n4] );
mu_Tokens[mu_n4] = (mu_Tokens[mu_n4]) + (1);
  };

};
/******************** RuleBase94 ********************/
class RuleBase94
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_120 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_119 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_118 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_117 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Send request + Process request + Process fwd_response, n4:%s, n3:%s, n2:%s, n1:%s", mu_n4.Name(), mu_n3.Name(), mu_n2.Name(), mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_120 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_119 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_118 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_117 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr2430;
bool mu__boolexpr2431;
bool mu__boolexpr2432;
bool mu__boolexpr2433;
bool mu__boolexpr2434;
bool mu__boolexpr2435;
bool mu__boolexpr2436;
bool mu__boolexpr2437;
bool mu__boolexpr2438;
bool mu__boolexpr2439;
bool mu__boolexpr2440;
  if (!((mu_n1) != (mu_n2))) mu__boolexpr2440 = FALSE ;
  else {
  mu__boolexpr2440 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2440)) mu__boolexpr2439 = FALSE ;
  else {
  mu__boolexpr2439 = ((mu_Routers[mu_n1]) == (0)) ; 
}
  if (!(mu__boolexpr2439)) mu__boolexpr2438 = FALSE ;
  else {
  mu__boolexpr2438 = ((mu_Routers[mu_n2]) == (0)) ; 
}
  if (!(mu__boolexpr2438)) mu__boolexpr2437 = FALSE ;
  else {
  mu__boolexpr2437 = ((mu_Tokens[mu_n1]) > (0)) ; 
}
  if (!(mu__boolexpr2437)) mu__boolexpr2436 = FALSE ;
  else {
  mu__boolexpr2436 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr2436)) mu__boolexpr2435 = FALSE ;
  else {
  mu__boolexpr2435 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2435)) mu__boolexpr2434 = FALSE ;
  else {
  mu__boolexpr2434 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr2434)) mu__boolexpr2433 = FALSE ;
  else {
  mu__boolexpr2433 = ((mu_TailPointers[mu_ExitPath[mu_n4]][mu_n4]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2433)) mu__boolexpr2432 = FALSE ;
  else {
  mu__boolexpr2432 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr2432)) mu__boolexpr2431 = FALSE ;
  else {
  mu__boolexpr2431 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr2431)) mu__boolexpr2430 = FALSE ;
  else {
  mu__boolexpr2430 = ((mu_n3) != (mu_n4)) ; 
}
    return mu__boolexpr2430;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 203776;
    static mu__subrange_120 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_119 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_118 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_117 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 204032 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr2441;
bool mu__boolexpr2442;
bool mu__boolexpr2443;
bool mu__boolexpr2444;
bool mu__boolexpr2445;
bool mu__boolexpr2446;
bool mu__boolexpr2447;
bool mu__boolexpr2448;
bool mu__boolexpr2449;
bool mu__boolexpr2450;
bool mu__boolexpr2451;
  if (!((mu_n1) != (mu_n2))) mu__boolexpr2451 = FALSE ;
  else {
  mu__boolexpr2451 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2451)) mu__boolexpr2450 = FALSE ;
  else {
  mu__boolexpr2450 = ((mu_Routers[mu_n1]) == (0)) ; 
}
  if (!(mu__boolexpr2450)) mu__boolexpr2449 = FALSE ;
  else {
  mu__boolexpr2449 = ((mu_Routers[mu_n2]) == (0)) ; 
}
  if (!(mu__boolexpr2449)) mu__boolexpr2448 = FALSE ;
  else {
  mu__boolexpr2448 = ((mu_Tokens[mu_n1]) > (0)) ; 
}
  if (!(mu__boolexpr2448)) mu__boolexpr2447 = FALSE ;
  else {
  mu__boolexpr2447 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr2447)) mu__boolexpr2446 = FALSE ;
  else {
  mu__boolexpr2446 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2446)) mu__boolexpr2445 = FALSE ;
  else {
  mu__boolexpr2445 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr2445)) mu__boolexpr2444 = FALSE ;
  else {
  mu__boolexpr2444 = ((mu_TailPointers[mu_ExitPath[mu_n4]][mu_n4]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2444)) mu__boolexpr2443 = FALSE ;
  else {
  mu__boolexpr2443 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr2443)) mu__boolexpr2442 = FALSE ;
  else {
  mu__boolexpr2442 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr2442)) mu__boolexpr2441 = FALSE ;
  else {
  mu__boolexpr2441 = ((mu_n3) != (mu_n4)) ; 
}
	      if (mu__boolexpr2441) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 203776;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_120 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_119 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_118 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_117 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_SendRequest ( (int)mu_n1, mu_ExitPath[mu_n1], (int)mu_n2 );
mu_Tokens[mu_n1] = (mu_Tokens[mu_n1]) - (1);
mu_ProcessRequest ( (int)mu_n3, mu_EntryPath[mu_n3], mu_ExitPath[mu_n3] );
mu_ProcessFwdResponse ( (int)mu_n4, mu_EntryPath[mu_n4], mu_ExitPath[mu_n4] );
  };

};
/******************** RuleBase95 ********************/
class RuleBase95
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_116 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_115 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_114 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_113 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Send request + Process request + Process request, n4:%s, n3:%s, n2:%s, n1:%s", mu_n4.Name(), mu_n3.Name(), mu_n2.Name(), mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_116 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_115 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_114 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_113 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr2452;
bool mu__boolexpr2453;
bool mu__boolexpr2454;
bool mu__boolexpr2455;
bool mu__boolexpr2456;
bool mu__boolexpr2457;
bool mu__boolexpr2458;
bool mu__boolexpr2459;
bool mu__boolexpr2460;
bool mu__boolexpr2461;
bool mu__boolexpr2462;
  if (!((mu_n1) != (mu_n2))) mu__boolexpr2462 = FALSE ;
  else {
  mu__boolexpr2462 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2462)) mu__boolexpr2461 = FALSE ;
  else {
  mu__boolexpr2461 = ((mu_Routers[mu_n1]) == (0)) ; 
}
  if (!(mu__boolexpr2461)) mu__boolexpr2460 = FALSE ;
  else {
  mu__boolexpr2460 = ((mu_Routers[mu_n2]) == (0)) ; 
}
  if (!(mu__boolexpr2460)) mu__boolexpr2459 = FALSE ;
  else {
  mu__boolexpr2459 = ((mu_Tokens[mu_n1]) > (0)) ; 
}
  if (!(mu__boolexpr2459)) mu__boolexpr2458 = FALSE ;
  else {
  mu__boolexpr2458 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr2458)) mu__boolexpr2457 = FALSE ;
  else {
  mu__boolexpr2457 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2457)) mu__boolexpr2456 = FALSE ;
  else {
  mu__boolexpr2456 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr2456)) mu__boolexpr2455 = FALSE ;
  else {
  mu__boolexpr2455 = ((mu_TailPointers[mu_ExitPath[mu_n4]][mu_n4]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2455)) mu__boolexpr2454 = FALSE ;
  else {
  mu__boolexpr2454 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr2454)) mu__boolexpr2453 = FALSE ;
  else {
  mu__boolexpr2453 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr2453)) mu__boolexpr2452 = FALSE ;
  else {
  mu__boolexpr2452 = ((mu_n3) != (mu_n4)) ; 
}
    return mu__boolexpr2452;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 204032;
    static mu__subrange_116 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_115 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_114 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_113 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 204288 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr2463;
bool mu__boolexpr2464;
bool mu__boolexpr2465;
bool mu__boolexpr2466;
bool mu__boolexpr2467;
bool mu__boolexpr2468;
bool mu__boolexpr2469;
bool mu__boolexpr2470;
bool mu__boolexpr2471;
bool mu__boolexpr2472;
bool mu__boolexpr2473;
  if (!((mu_n1) != (mu_n2))) mu__boolexpr2473 = FALSE ;
  else {
  mu__boolexpr2473 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2473)) mu__boolexpr2472 = FALSE ;
  else {
  mu__boolexpr2472 = ((mu_Routers[mu_n1]) == (0)) ; 
}
  if (!(mu__boolexpr2472)) mu__boolexpr2471 = FALSE ;
  else {
  mu__boolexpr2471 = ((mu_Routers[mu_n2]) == (0)) ; 
}
  if (!(mu__boolexpr2471)) mu__boolexpr2470 = FALSE ;
  else {
  mu__boolexpr2470 = ((mu_Tokens[mu_n1]) > (0)) ; 
}
  if (!(mu__boolexpr2470)) mu__boolexpr2469 = FALSE ;
  else {
  mu__boolexpr2469 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr2469)) mu__boolexpr2468 = FALSE ;
  else {
  mu__boolexpr2468 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2468)) mu__boolexpr2467 = FALSE ;
  else {
  mu__boolexpr2467 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr2467)) mu__boolexpr2466 = FALSE ;
  else {
  mu__boolexpr2466 = ((mu_TailPointers[mu_ExitPath[mu_n4]][mu_n4]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2466)) mu__boolexpr2465 = FALSE ;
  else {
  mu__boolexpr2465 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr2465)) mu__boolexpr2464 = FALSE ;
  else {
  mu__boolexpr2464 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr2464)) mu__boolexpr2463 = FALSE ;
  else {
  mu__boolexpr2463 = ((mu_n3) != (mu_n4)) ; 
}
	      if (mu__boolexpr2463) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 204032;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_116 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_115 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_114 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_113 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_SendRequest ( (int)mu_n1, mu_ExitPath[mu_n1], (int)mu_n2 );
mu_Tokens[mu_n1] = (mu_Tokens[mu_n1]) - (1);
mu_ProcessRequest ( (int)mu_n3, mu_EntryPath[mu_n3], mu_ExitPath[mu_n3] );
mu_ProcessRequest ( (int)mu_n4, mu_EntryPath[mu_n4], mu_ExitPath[mu_n4] );
  };

};
/******************** RuleBase96 ********************/
class RuleBase96
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_112 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_111 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_110 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_109 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Send request + Process fwd_request + Process response, n4:%s, n3:%s, n2:%s, n1:%s", mu_n4.Name(), mu_n3.Name(), mu_n2.Name(), mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_112 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_111 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_110 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_109 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr2474;
bool mu__boolexpr2475;
bool mu__boolexpr2476;
bool mu__boolexpr2477;
bool mu__boolexpr2478;
bool mu__boolexpr2479;
bool mu__boolexpr2480;
bool mu__boolexpr2481;
bool mu__boolexpr2482;
bool mu__boolexpr2483;
  if (!((mu_n1) != (mu_n2))) mu__boolexpr2483 = FALSE ;
  else {
  mu__boolexpr2483 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2483)) mu__boolexpr2482 = FALSE ;
  else {
  mu__boolexpr2482 = ((mu_Routers[mu_n1]) == (0)) ; 
}
  if (!(mu__boolexpr2482)) mu__boolexpr2481 = FALSE ;
  else {
  mu__boolexpr2481 = ((mu_Routers[mu_n2]) == (0)) ; 
}
  if (!(mu__boolexpr2481)) mu__boolexpr2480 = FALSE ;
  else {
  mu__boolexpr2480 = ((mu_Tokens[mu_n1]) > (0)) ; 
}
  if (!(mu__boolexpr2480)) mu__boolexpr2479 = FALSE ;
  else {
  mu__boolexpr2479 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_fwd_request)) ; 
}
  if (!(mu__boolexpr2479)) mu__boolexpr2478 = FALSE ;
  else {
  mu__boolexpr2478 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2478)) mu__boolexpr2477 = FALSE ;
  else {
  mu__boolexpr2477 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr2477)) mu__boolexpr2476 = FALSE ;
  else {
  mu__boolexpr2476 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr2476)) mu__boolexpr2475 = FALSE ;
  else {
  mu__boolexpr2475 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr2475)) mu__boolexpr2474 = FALSE ;
  else {
  mu__boolexpr2474 = ((mu_n3) != (mu_n4)) ; 
}
    return mu__boolexpr2474;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 204288;
    static mu__subrange_112 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_111 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_110 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_109 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 204544 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr2484;
bool mu__boolexpr2485;
bool mu__boolexpr2486;
bool mu__boolexpr2487;
bool mu__boolexpr2488;
bool mu__boolexpr2489;
bool mu__boolexpr2490;
bool mu__boolexpr2491;
bool mu__boolexpr2492;
bool mu__boolexpr2493;
  if (!((mu_n1) != (mu_n2))) mu__boolexpr2493 = FALSE ;
  else {
  mu__boolexpr2493 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2493)) mu__boolexpr2492 = FALSE ;
  else {
  mu__boolexpr2492 = ((mu_Routers[mu_n1]) == (0)) ; 
}
  if (!(mu__boolexpr2492)) mu__boolexpr2491 = FALSE ;
  else {
  mu__boolexpr2491 = ((mu_Routers[mu_n2]) == (0)) ; 
}
  if (!(mu__boolexpr2491)) mu__boolexpr2490 = FALSE ;
  else {
  mu__boolexpr2490 = ((mu_Tokens[mu_n1]) > (0)) ; 
}
  if (!(mu__boolexpr2490)) mu__boolexpr2489 = FALSE ;
  else {
  mu__boolexpr2489 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_fwd_request)) ; 
}
  if (!(mu__boolexpr2489)) mu__boolexpr2488 = FALSE ;
  else {
  mu__boolexpr2488 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2488)) mu__boolexpr2487 = FALSE ;
  else {
  mu__boolexpr2487 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr2487)) mu__boolexpr2486 = FALSE ;
  else {
  mu__boolexpr2486 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr2486)) mu__boolexpr2485 = FALSE ;
  else {
  mu__boolexpr2485 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr2485)) mu__boolexpr2484 = FALSE ;
  else {
  mu__boolexpr2484 = ((mu_n3) != (mu_n4)) ; 
}
	      if (mu__boolexpr2484) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 204288;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_112 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_111 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_110 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_109 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_SendRequest ( (int)mu_n1, mu_ExitPath[mu_n1], (int)mu_n2 );
mu_Tokens[mu_n1] = (mu_Tokens[mu_n1]) - (1);
mu_ProcessFwdRequest ( (int)mu_n3, mu_EntryPath[mu_n3], mu_ExitPath[mu_n3] );
mu_ProcessResponse ( (int)mu_n4, mu_EntryPath[mu_n4] );
mu_Tokens[mu_n4] = (mu_Tokens[mu_n4]) + (1);
  };

};
/******************** RuleBase97 ********************/
class RuleBase97
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_108 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_107 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_106 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_105 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Send request + Process fwd_request + Process fwd_response, n4:%s, n3:%s, n2:%s, n1:%s", mu_n4.Name(), mu_n3.Name(), mu_n2.Name(), mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_108 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_107 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_106 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_105 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr2494;
bool mu__boolexpr2495;
bool mu__boolexpr2496;
bool mu__boolexpr2497;
bool mu__boolexpr2498;
bool mu__boolexpr2499;
bool mu__boolexpr2500;
bool mu__boolexpr2501;
bool mu__boolexpr2502;
bool mu__boolexpr2503;
bool mu__boolexpr2504;
  if (!((mu_n1) != (mu_n2))) mu__boolexpr2504 = FALSE ;
  else {
  mu__boolexpr2504 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2504)) mu__boolexpr2503 = FALSE ;
  else {
  mu__boolexpr2503 = ((mu_Routers[mu_n1]) == (0)) ; 
}
  if (!(mu__boolexpr2503)) mu__boolexpr2502 = FALSE ;
  else {
  mu__boolexpr2502 = ((mu_Routers[mu_n2]) == (0)) ; 
}
  if (!(mu__boolexpr2502)) mu__boolexpr2501 = FALSE ;
  else {
  mu__boolexpr2501 = ((mu_Tokens[mu_n1]) > (0)) ; 
}
  if (!(mu__boolexpr2501)) mu__boolexpr2500 = FALSE ;
  else {
  mu__boolexpr2500 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_fwd_request)) ; 
}
  if (!(mu__boolexpr2500)) mu__boolexpr2499 = FALSE ;
  else {
  mu__boolexpr2499 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2499)) mu__boolexpr2498 = FALSE ;
  else {
  mu__boolexpr2498 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr2498)) mu__boolexpr2497 = FALSE ;
  else {
  mu__boolexpr2497 = ((mu_TailPointers[mu_ExitPath[mu_n4]][mu_n4]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2497)) mu__boolexpr2496 = FALSE ;
  else {
  mu__boolexpr2496 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr2496)) mu__boolexpr2495 = FALSE ;
  else {
  mu__boolexpr2495 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr2495)) mu__boolexpr2494 = FALSE ;
  else {
  mu__boolexpr2494 = ((mu_n3) != (mu_n4)) ; 
}
    return mu__boolexpr2494;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 204544;
    static mu__subrange_108 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_107 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_106 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_105 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 204800 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr2505;
bool mu__boolexpr2506;
bool mu__boolexpr2507;
bool mu__boolexpr2508;
bool mu__boolexpr2509;
bool mu__boolexpr2510;
bool mu__boolexpr2511;
bool mu__boolexpr2512;
bool mu__boolexpr2513;
bool mu__boolexpr2514;
bool mu__boolexpr2515;
  if (!((mu_n1) != (mu_n2))) mu__boolexpr2515 = FALSE ;
  else {
  mu__boolexpr2515 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2515)) mu__boolexpr2514 = FALSE ;
  else {
  mu__boolexpr2514 = ((mu_Routers[mu_n1]) == (0)) ; 
}
  if (!(mu__boolexpr2514)) mu__boolexpr2513 = FALSE ;
  else {
  mu__boolexpr2513 = ((mu_Routers[mu_n2]) == (0)) ; 
}
  if (!(mu__boolexpr2513)) mu__boolexpr2512 = FALSE ;
  else {
  mu__boolexpr2512 = ((mu_Tokens[mu_n1]) > (0)) ; 
}
  if (!(mu__boolexpr2512)) mu__boolexpr2511 = FALSE ;
  else {
  mu__boolexpr2511 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_fwd_request)) ; 
}
  if (!(mu__boolexpr2511)) mu__boolexpr2510 = FALSE ;
  else {
  mu__boolexpr2510 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2510)) mu__boolexpr2509 = FALSE ;
  else {
  mu__boolexpr2509 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr2509)) mu__boolexpr2508 = FALSE ;
  else {
  mu__boolexpr2508 = ((mu_TailPointers[mu_ExitPath[mu_n4]][mu_n4]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2508)) mu__boolexpr2507 = FALSE ;
  else {
  mu__boolexpr2507 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr2507)) mu__boolexpr2506 = FALSE ;
  else {
  mu__boolexpr2506 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr2506)) mu__boolexpr2505 = FALSE ;
  else {
  mu__boolexpr2505 = ((mu_n3) != (mu_n4)) ; 
}
	      if (mu__boolexpr2505) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 204544;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_108 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_107 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_106 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_105 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_SendRequest ( (int)mu_n1, mu_ExitPath[mu_n1], (int)mu_n2 );
mu_Tokens[mu_n1] = (mu_Tokens[mu_n1]) - (1);
mu_ProcessFwdRequest ( (int)mu_n3, mu_EntryPath[mu_n3], mu_ExitPath[mu_n3] );
mu_ProcessFwdResponse ( (int)mu_n4, mu_EntryPath[mu_n4], mu_ExitPath[mu_n4] );
  };

};
/******************** RuleBase98 ********************/
class RuleBase98
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_104 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_103 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_102 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_101 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Send request + Process fwd_request + Process request, n4:%s, n3:%s, n2:%s, n1:%s", mu_n4.Name(), mu_n3.Name(), mu_n2.Name(), mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_104 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_103 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_102 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_101 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr2516;
bool mu__boolexpr2517;
bool mu__boolexpr2518;
bool mu__boolexpr2519;
bool mu__boolexpr2520;
bool mu__boolexpr2521;
bool mu__boolexpr2522;
bool mu__boolexpr2523;
bool mu__boolexpr2524;
bool mu__boolexpr2525;
bool mu__boolexpr2526;
  if (!((mu_n1) != (mu_n2))) mu__boolexpr2526 = FALSE ;
  else {
  mu__boolexpr2526 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2526)) mu__boolexpr2525 = FALSE ;
  else {
  mu__boolexpr2525 = ((mu_Routers[mu_n1]) == (0)) ; 
}
  if (!(mu__boolexpr2525)) mu__boolexpr2524 = FALSE ;
  else {
  mu__boolexpr2524 = ((mu_Routers[mu_n2]) == (0)) ; 
}
  if (!(mu__boolexpr2524)) mu__boolexpr2523 = FALSE ;
  else {
  mu__boolexpr2523 = ((mu_Tokens[mu_n1]) > (0)) ; 
}
  if (!(mu__boolexpr2523)) mu__boolexpr2522 = FALSE ;
  else {
  mu__boolexpr2522 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_fwd_request)) ; 
}
  if (!(mu__boolexpr2522)) mu__boolexpr2521 = FALSE ;
  else {
  mu__boolexpr2521 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2521)) mu__boolexpr2520 = FALSE ;
  else {
  mu__boolexpr2520 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr2520)) mu__boolexpr2519 = FALSE ;
  else {
  mu__boolexpr2519 = ((mu_TailPointers[mu_ExitPath[mu_n4]][mu_n4]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2519)) mu__boolexpr2518 = FALSE ;
  else {
  mu__boolexpr2518 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr2518)) mu__boolexpr2517 = FALSE ;
  else {
  mu__boolexpr2517 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr2517)) mu__boolexpr2516 = FALSE ;
  else {
  mu__boolexpr2516 = ((mu_n3) != (mu_n4)) ; 
}
    return mu__boolexpr2516;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 204800;
    static mu__subrange_104 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_103 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_102 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_101 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 205056 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr2527;
bool mu__boolexpr2528;
bool mu__boolexpr2529;
bool mu__boolexpr2530;
bool mu__boolexpr2531;
bool mu__boolexpr2532;
bool mu__boolexpr2533;
bool mu__boolexpr2534;
bool mu__boolexpr2535;
bool mu__boolexpr2536;
bool mu__boolexpr2537;
  if (!((mu_n1) != (mu_n2))) mu__boolexpr2537 = FALSE ;
  else {
  mu__boolexpr2537 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2537)) mu__boolexpr2536 = FALSE ;
  else {
  mu__boolexpr2536 = ((mu_Routers[mu_n1]) == (0)) ; 
}
  if (!(mu__boolexpr2536)) mu__boolexpr2535 = FALSE ;
  else {
  mu__boolexpr2535 = ((mu_Routers[mu_n2]) == (0)) ; 
}
  if (!(mu__boolexpr2535)) mu__boolexpr2534 = FALSE ;
  else {
  mu__boolexpr2534 = ((mu_Tokens[mu_n1]) > (0)) ; 
}
  if (!(mu__boolexpr2534)) mu__boolexpr2533 = FALSE ;
  else {
  mu__boolexpr2533 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_fwd_request)) ; 
}
  if (!(mu__boolexpr2533)) mu__boolexpr2532 = FALSE ;
  else {
  mu__boolexpr2532 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2532)) mu__boolexpr2531 = FALSE ;
  else {
  mu__boolexpr2531 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr2531)) mu__boolexpr2530 = FALSE ;
  else {
  mu__boolexpr2530 = ((mu_TailPointers[mu_ExitPath[mu_n4]][mu_n4]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2530)) mu__boolexpr2529 = FALSE ;
  else {
  mu__boolexpr2529 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr2529)) mu__boolexpr2528 = FALSE ;
  else {
  mu__boolexpr2528 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr2528)) mu__boolexpr2527 = FALSE ;
  else {
  mu__boolexpr2527 = ((mu_n3) != (mu_n4)) ; 
}
	      if (mu__boolexpr2527) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 204800;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_104 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_103 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_102 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_101 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_SendRequest ( (int)mu_n1, mu_ExitPath[mu_n1], (int)mu_n2 );
mu_Tokens[mu_n1] = (mu_Tokens[mu_n1]) - (1);
mu_ProcessFwdRequest ( (int)mu_n3, mu_EntryPath[mu_n3], mu_ExitPath[mu_n3] );
mu_ProcessRequest ( (int)mu_n4, mu_EntryPath[mu_n4], mu_ExitPath[mu_n4] );
  };

};
/******************** RuleBase99 ********************/
class RuleBase99
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_100 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_99 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_98 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_97 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Send request + Process fwd_request + Process fwd_request, n4:%s, n3:%s, n2:%s, n1:%s", mu_n4.Name(), mu_n3.Name(), mu_n2.Name(), mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_100 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_99 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_98 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_97 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr2538;
bool mu__boolexpr2539;
bool mu__boolexpr2540;
bool mu__boolexpr2541;
bool mu__boolexpr2542;
bool mu__boolexpr2543;
bool mu__boolexpr2544;
bool mu__boolexpr2545;
bool mu__boolexpr2546;
bool mu__boolexpr2547;
bool mu__boolexpr2548;
  if (!((mu_n1) != (mu_n2))) mu__boolexpr2548 = FALSE ;
  else {
  mu__boolexpr2548 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2548)) mu__boolexpr2547 = FALSE ;
  else {
  mu__boolexpr2547 = ((mu_Routers[mu_n1]) == (0)) ; 
}
  if (!(mu__boolexpr2547)) mu__boolexpr2546 = FALSE ;
  else {
  mu__boolexpr2546 = ((mu_Routers[mu_n2]) == (0)) ; 
}
  if (!(mu__boolexpr2546)) mu__boolexpr2545 = FALSE ;
  else {
  mu__boolexpr2545 = ((mu_Tokens[mu_n1]) > (0)) ; 
}
  if (!(mu__boolexpr2545)) mu__boolexpr2544 = FALSE ;
  else {
  mu__boolexpr2544 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_fwd_request)) ; 
}
  if (!(mu__boolexpr2544)) mu__boolexpr2543 = FALSE ;
  else {
  mu__boolexpr2543 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2543)) mu__boolexpr2542 = FALSE ;
  else {
  mu__boolexpr2542 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_fwd_request)) ; 
}
  if (!(mu__boolexpr2542)) mu__boolexpr2541 = FALSE ;
  else {
  mu__boolexpr2541 = ((mu_TailPointers[mu_ExitPath[mu_n4]][mu_n4]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2541)) mu__boolexpr2540 = FALSE ;
  else {
  mu__boolexpr2540 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr2540)) mu__boolexpr2539 = FALSE ;
  else {
  mu__boolexpr2539 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr2539)) mu__boolexpr2538 = FALSE ;
  else {
  mu__boolexpr2538 = ((mu_n3) != (mu_n4)) ; 
}
    return mu__boolexpr2538;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 205056;
    static mu__subrange_100 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_99 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_98 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_97 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 205312 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr2549;
bool mu__boolexpr2550;
bool mu__boolexpr2551;
bool mu__boolexpr2552;
bool mu__boolexpr2553;
bool mu__boolexpr2554;
bool mu__boolexpr2555;
bool mu__boolexpr2556;
bool mu__boolexpr2557;
bool mu__boolexpr2558;
bool mu__boolexpr2559;
  if (!((mu_n1) != (mu_n2))) mu__boolexpr2559 = FALSE ;
  else {
  mu__boolexpr2559 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2559)) mu__boolexpr2558 = FALSE ;
  else {
  mu__boolexpr2558 = ((mu_Routers[mu_n1]) == (0)) ; 
}
  if (!(mu__boolexpr2558)) mu__boolexpr2557 = FALSE ;
  else {
  mu__boolexpr2557 = ((mu_Routers[mu_n2]) == (0)) ; 
}
  if (!(mu__boolexpr2557)) mu__boolexpr2556 = FALSE ;
  else {
  mu__boolexpr2556 = ((mu_Tokens[mu_n1]) > (0)) ; 
}
  if (!(mu__boolexpr2556)) mu__boolexpr2555 = FALSE ;
  else {
  mu__boolexpr2555 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_fwd_request)) ; 
}
  if (!(mu__boolexpr2555)) mu__boolexpr2554 = FALSE ;
  else {
  mu__boolexpr2554 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2554)) mu__boolexpr2553 = FALSE ;
  else {
  mu__boolexpr2553 = ((mu_IncomingQueue[mu_n4][mu_EntryPath[mu_n4]][0].mu_msg_type) == (mu_fwd_request)) ; 
}
  if (!(mu__boolexpr2553)) mu__boolexpr2552 = FALSE ;
  else {
  mu__boolexpr2552 = ((mu_TailPointers[mu_ExitPath[mu_n4]][mu_n4]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2552)) mu__boolexpr2551 = FALSE ;
  else {
  mu__boolexpr2551 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr2551)) mu__boolexpr2550 = FALSE ;
  else {
  mu__boolexpr2550 = ((mu_n1) != (mu_n4)) ; 
}
  if (!(mu__boolexpr2550)) mu__boolexpr2549 = FALSE ;
  else {
  mu__boolexpr2549 = ((mu_n3) != (mu_n4)) ; 
}
	      if (mu__boolexpr2549) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 205056;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_100 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_99 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_98 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_97 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_SendRequest ( (int)mu_n1, mu_ExitPath[mu_n1], (int)mu_n2 );
mu_Tokens[mu_n1] = (mu_Tokens[mu_n1]) - (1);
mu_ProcessFwdRequest ( (int)mu_n3, mu_EntryPath[mu_n3], mu_ExitPath[mu_n3] );
mu_ProcessFwdRequest ( (int)mu_n4, mu_EntryPath[mu_n4], mu_ExitPath[mu_n4] );
  };

};
/******************** RuleBase100 ********************/
class RuleBase100
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_96 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_95 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_94 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_93 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_92 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Send request + Send request + Process response, n5:%s, n4:%s, n3:%s, n2:%s, n1:%s", mu_n5.Name(), mu_n4.Name(), mu_n3.Name(), mu_n2.Name(), mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_96 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_95 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_94 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_93 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_92 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr2560;
bool mu__boolexpr2561;
bool mu__boolexpr2562;
bool mu__boolexpr2563;
bool mu__boolexpr2564;
bool mu__boolexpr2565;
bool mu__boolexpr2566;
bool mu__boolexpr2567;
bool mu__boolexpr2568;
bool mu__boolexpr2569;
bool mu__boolexpr2570;
bool mu__boolexpr2571;
bool mu__boolexpr2572;
  if (!((mu_n1) != (mu_n2))) mu__boolexpr2572 = FALSE ;
  else {
  mu__boolexpr2572 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2572)) mu__boolexpr2571 = FALSE ;
  else {
  mu__boolexpr2571 = ((mu_Routers[mu_n1]) == (0)) ; 
}
  if (!(mu__boolexpr2571)) mu__boolexpr2570 = FALSE ;
  else {
  mu__boolexpr2570 = ((mu_Routers[mu_n2]) == (0)) ; 
}
  if (!(mu__boolexpr2570)) mu__boolexpr2569 = FALSE ;
  else {
  mu__boolexpr2569 = ((mu_Tokens[mu_n1]) > (0)) ; 
}
  if (!(mu__boolexpr2569)) mu__boolexpr2568 = FALSE ;
  else {
  mu__boolexpr2568 = ((mu_n3) != (mu_n4)) ; 
}
  if (!(mu__boolexpr2568)) mu__boolexpr2567 = FALSE ;
  else {
  mu__boolexpr2567 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2567)) mu__boolexpr2566 = FALSE ;
  else {
  mu__boolexpr2566 = ((mu_Routers[mu_n3]) == (0)) ; 
}
  if (!(mu__boolexpr2566)) mu__boolexpr2565 = FALSE ;
  else {
  mu__boolexpr2565 = ((mu_Routers[mu_n4]) == (0)) ; 
}
  if (!(mu__boolexpr2565)) mu__boolexpr2564 = FALSE ;
  else {
  mu__boolexpr2564 = ((mu_Tokens[mu_n3]) > (0)) ; 
}
  if (!(mu__boolexpr2564)) mu__boolexpr2563 = FALSE ;
  else {
  mu__boolexpr2563 = ((mu_IncomingQueue[mu_n5][mu_EntryPath[mu_n5]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr2563)) mu__boolexpr2562 = FALSE ;
  else {
  mu__boolexpr2562 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr2562)) mu__boolexpr2561 = FALSE ;
  else {
  mu__boolexpr2561 = ((mu_n1) != (mu_n5)) ; 
}
  if (!(mu__boolexpr2561)) mu__boolexpr2560 = FALSE ;
  else {
  mu__boolexpr2560 = ((mu_n3) != (mu_n5)) ; 
}
    return mu__boolexpr2560;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 205312;
    static mu__subrange_96 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_95 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_94 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_93 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_92 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 206336 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr2573;
bool mu__boolexpr2574;
bool mu__boolexpr2575;
bool mu__boolexpr2576;
bool mu__boolexpr2577;
bool mu__boolexpr2578;
bool mu__boolexpr2579;
bool mu__boolexpr2580;
bool mu__boolexpr2581;
bool mu__boolexpr2582;
bool mu__boolexpr2583;
bool mu__boolexpr2584;
bool mu__boolexpr2585;
  if (!((mu_n1) != (mu_n2))) mu__boolexpr2585 = FALSE ;
  else {
  mu__boolexpr2585 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2585)) mu__boolexpr2584 = FALSE ;
  else {
  mu__boolexpr2584 = ((mu_Routers[mu_n1]) == (0)) ; 
}
  if (!(mu__boolexpr2584)) mu__boolexpr2583 = FALSE ;
  else {
  mu__boolexpr2583 = ((mu_Routers[mu_n2]) == (0)) ; 
}
  if (!(mu__boolexpr2583)) mu__boolexpr2582 = FALSE ;
  else {
  mu__boolexpr2582 = ((mu_Tokens[mu_n1]) > (0)) ; 
}
  if (!(mu__boolexpr2582)) mu__boolexpr2581 = FALSE ;
  else {
  mu__boolexpr2581 = ((mu_n3) != (mu_n4)) ; 
}
  if (!(mu__boolexpr2581)) mu__boolexpr2580 = FALSE ;
  else {
  mu__boolexpr2580 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2580)) mu__boolexpr2579 = FALSE ;
  else {
  mu__boolexpr2579 = ((mu_Routers[mu_n3]) == (0)) ; 
}
  if (!(mu__boolexpr2579)) mu__boolexpr2578 = FALSE ;
  else {
  mu__boolexpr2578 = ((mu_Routers[mu_n4]) == (0)) ; 
}
  if (!(mu__boolexpr2578)) mu__boolexpr2577 = FALSE ;
  else {
  mu__boolexpr2577 = ((mu_Tokens[mu_n3]) > (0)) ; 
}
  if (!(mu__boolexpr2577)) mu__boolexpr2576 = FALSE ;
  else {
  mu__boolexpr2576 = ((mu_IncomingQueue[mu_n5][mu_EntryPath[mu_n5]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr2576)) mu__boolexpr2575 = FALSE ;
  else {
  mu__boolexpr2575 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr2575)) mu__boolexpr2574 = FALSE ;
  else {
  mu__boolexpr2574 = ((mu_n1) != (mu_n5)) ; 
}
  if (!(mu__boolexpr2574)) mu__boolexpr2573 = FALSE ;
  else {
  mu__boolexpr2573 = ((mu_n3) != (mu_n5)) ; 
}
	      if (mu__boolexpr2573) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 205312;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_96 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_95 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_94 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_93 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_92 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_SendRequest ( (int)mu_n1, mu_ExitPath[mu_n1], (int)mu_n2 );
mu_Tokens[mu_n1] = (mu_Tokens[mu_n1]) - (1);
mu_SendRequest ( (int)mu_n3, mu_ExitPath[mu_n3], (int)mu_n4 );
mu_Tokens[mu_n3] = (mu_Tokens[mu_n3]) - (1);
mu_ProcessResponse ( (int)mu_n5, mu_EntryPath[mu_n5] );
mu_Tokens[mu_n5] = (mu_Tokens[mu_n5]) + (1);
  };

};
/******************** RuleBase101 ********************/
class RuleBase101
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_91 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_90 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_89 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_88 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_87 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Send request + Send request + Process fwd_response, n5:%s, n4:%s, n3:%s, n2:%s, n1:%s", mu_n5.Name(), mu_n4.Name(), mu_n3.Name(), mu_n2.Name(), mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_91 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_90 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_89 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_88 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_87 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr2586;
bool mu__boolexpr2587;
bool mu__boolexpr2588;
bool mu__boolexpr2589;
bool mu__boolexpr2590;
bool mu__boolexpr2591;
bool mu__boolexpr2592;
bool mu__boolexpr2593;
bool mu__boolexpr2594;
bool mu__boolexpr2595;
bool mu__boolexpr2596;
bool mu__boolexpr2597;
bool mu__boolexpr2598;
bool mu__boolexpr2599;
  if (!((mu_n1) != (mu_n2))) mu__boolexpr2599 = FALSE ;
  else {
  mu__boolexpr2599 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2599)) mu__boolexpr2598 = FALSE ;
  else {
  mu__boolexpr2598 = ((mu_Routers[mu_n1]) == (0)) ; 
}
  if (!(mu__boolexpr2598)) mu__boolexpr2597 = FALSE ;
  else {
  mu__boolexpr2597 = ((mu_Routers[mu_n2]) == (0)) ; 
}
  if (!(mu__boolexpr2597)) mu__boolexpr2596 = FALSE ;
  else {
  mu__boolexpr2596 = ((mu_Tokens[mu_n1]) > (0)) ; 
}
  if (!(mu__boolexpr2596)) mu__boolexpr2595 = FALSE ;
  else {
  mu__boolexpr2595 = ((mu_n3) != (mu_n4)) ; 
}
  if (!(mu__boolexpr2595)) mu__boolexpr2594 = FALSE ;
  else {
  mu__boolexpr2594 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2594)) mu__boolexpr2593 = FALSE ;
  else {
  mu__boolexpr2593 = ((mu_Routers[mu_n3]) == (0)) ; 
}
  if (!(mu__boolexpr2593)) mu__boolexpr2592 = FALSE ;
  else {
  mu__boolexpr2592 = ((mu_Routers[mu_n4]) == (0)) ; 
}
  if (!(mu__boolexpr2592)) mu__boolexpr2591 = FALSE ;
  else {
  mu__boolexpr2591 = ((mu_Tokens[mu_n3]) > (0)) ; 
}
  if (!(mu__boolexpr2591)) mu__boolexpr2590 = FALSE ;
  else {
  mu__boolexpr2590 = ((mu_IncomingQueue[mu_n5][mu_EntryPath[mu_n5]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr2590)) mu__boolexpr2589 = FALSE ;
  else {
  mu__boolexpr2589 = ((mu_TailPointers[mu_ExitPath[mu_n5]][mu_n5]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2589)) mu__boolexpr2588 = FALSE ;
  else {
  mu__boolexpr2588 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr2588)) mu__boolexpr2587 = FALSE ;
  else {
  mu__boolexpr2587 = ((mu_n1) != (mu_n5)) ; 
}
  if (!(mu__boolexpr2587)) mu__boolexpr2586 = FALSE ;
  else {
  mu__boolexpr2586 = ((mu_n3) != (mu_n5)) ; 
}
    return mu__boolexpr2586;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 206336;
    static mu__subrange_91 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_90 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_89 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_88 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_87 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 207360 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr2600;
bool mu__boolexpr2601;
bool mu__boolexpr2602;
bool mu__boolexpr2603;
bool mu__boolexpr2604;
bool mu__boolexpr2605;
bool mu__boolexpr2606;
bool mu__boolexpr2607;
bool mu__boolexpr2608;
bool mu__boolexpr2609;
bool mu__boolexpr2610;
bool mu__boolexpr2611;
bool mu__boolexpr2612;
bool mu__boolexpr2613;
  if (!((mu_n1) != (mu_n2))) mu__boolexpr2613 = FALSE ;
  else {
  mu__boolexpr2613 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2613)) mu__boolexpr2612 = FALSE ;
  else {
  mu__boolexpr2612 = ((mu_Routers[mu_n1]) == (0)) ; 
}
  if (!(mu__boolexpr2612)) mu__boolexpr2611 = FALSE ;
  else {
  mu__boolexpr2611 = ((mu_Routers[mu_n2]) == (0)) ; 
}
  if (!(mu__boolexpr2611)) mu__boolexpr2610 = FALSE ;
  else {
  mu__boolexpr2610 = ((mu_Tokens[mu_n1]) > (0)) ; 
}
  if (!(mu__boolexpr2610)) mu__boolexpr2609 = FALSE ;
  else {
  mu__boolexpr2609 = ((mu_n3) != (mu_n4)) ; 
}
  if (!(mu__boolexpr2609)) mu__boolexpr2608 = FALSE ;
  else {
  mu__boolexpr2608 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2608)) mu__boolexpr2607 = FALSE ;
  else {
  mu__boolexpr2607 = ((mu_Routers[mu_n3]) == (0)) ; 
}
  if (!(mu__boolexpr2607)) mu__boolexpr2606 = FALSE ;
  else {
  mu__boolexpr2606 = ((mu_Routers[mu_n4]) == (0)) ; 
}
  if (!(mu__boolexpr2606)) mu__boolexpr2605 = FALSE ;
  else {
  mu__boolexpr2605 = ((mu_Tokens[mu_n3]) > (0)) ; 
}
  if (!(mu__boolexpr2605)) mu__boolexpr2604 = FALSE ;
  else {
  mu__boolexpr2604 = ((mu_IncomingQueue[mu_n5][mu_EntryPath[mu_n5]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr2604)) mu__boolexpr2603 = FALSE ;
  else {
  mu__boolexpr2603 = ((mu_TailPointers[mu_ExitPath[mu_n5]][mu_n5]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2603)) mu__boolexpr2602 = FALSE ;
  else {
  mu__boolexpr2602 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr2602)) mu__boolexpr2601 = FALSE ;
  else {
  mu__boolexpr2601 = ((mu_n1) != (mu_n5)) ; 
}
  if (!(mu__boolexpr2601)) mu__boolexpr2600 = FALSE ;
  else {
  mu__boolexpr2600 = ((mu_n3) != (mu_n5)) ; 
}
	      if (mu__boolexpr2600) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 206336;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_91 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_90 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_89 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_88 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_87 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_SendRequest ( (int)mu_n1, mu_ExitPath[mu_n1], (int)mu_n2 );
mu_Tokens[mu_n1] = (mu_Tokens[mu_n1]) - (1);
mu_SendRequest ( (int)mu_n3, mu_ExitPath[mu_n3], (int)mu_n4 );
mu_Tokens[mu_n3] = (mu_Tokens[mu_n3]) - (1);
mu_ProcessFwdResponse ( (int)mu_n5, mu_EntryPath[mu_n5], mu_ExitPath[mu_n5] );
  };

};
/******************** RuleBase102 ********************/
class RuleBase102
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_86 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_85 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_84 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_83 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_82 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Send request + Send request + Process request, n5:%s, n4:%s, n3:%s, n2:%s, n1:%s", mu_n5.Name(), mu_n4.Name(), mu_n3.Name(), mu_n2.Name(), mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_86 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_85 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_84 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_83 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_82 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr2614;
bool mu__boolexpr2615;
bool mu__boolexpr2616;
bool mu__boolexpr2617;
bool mu__boolexpr2618;
bool mu__boolexpr2619;
bool mu__boolexpr2620;
bool mu__boolexpr2621;
bool mu__boolexpr2622;
bool mu__boolexpr2623;
bool mu__boolexpr2624;
bool mu__boolexpr2625;
bool mu__boolexpr2626;
bool mu__boolexpr2627;
  if (!((mu_n1) != (mu_n2))) mu__boolexpr2627 = FALSE ;
  else {
  mu__boolexpr2627 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2627)) mu__boolexpr2626 = FALSE ;
  else {
  mu__boolexpr2626 = ((mu_Routers[mu_n1]) == (0)) ; 
}
  if (!(mu__boolexpr2626)) mu__boolexpr2625 = FALSE ;
  else {
  mu__boolexpr2625 = ((mu_Routers[mu_n2]) == (0)) ; 
}
  if (!(mu__boolexpr2625)) mu__boolexpr2624 = FALSE ;
  else {
  mu__boolexpr2624 = ((mu_Tokens[mu_n1]) > (0)) ; 
}
  if (!(mu__boolexpr2624)) mu__boolexpr2623 = FALSE ;
  else {
  mu__boolexpr2623 = ((mu_n3) != (mu_n4)) ; 
}
  if (!(mu__boolexpr2623)) mu__boolexpr2622 = FALSE ;
  else {
  mu__boolexpr2622 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2622)) mu__boolexpr2621 = FALSE ;
  else {
  mu__boolexpr2621 = ((mu_Routers[mu_n3]) == (0)) ; 
}
  if (!(mu__boolexpr2621)) mu__boolexpr2620 = FALSE ;
  else {
  mu__boolexpr2620 = ((mu_Routers[mu_n4]) == (0)) ; 
}
  if (!(mu__boolexpr2620)) mu__boolexpr2619 = FALSE ;
  else {
  mu__boolexpr2619 = ((mu_Tokens[mu_n3]) > (0)) ; 
}
  if (!(mu__boolexpr2619)) mu__boolexpr2618 = FALSE ;
  else {
  mu__boolexpr2618 = ((mu_IncomingQueue[mu_n5][mu_EntryPath[mu_n5]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr2618)) mu__boolexpr2617 = FALSE ;
  else {
  mu__boolexpr2617 = ((mu_TailPointers[mu_ExitPath[mu_n5]][mu_n5]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2617)) mu__boolexpr2616 = FALSE ;
  else {
  mu__boolexpr2616 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr2616)) mu__boolexpr2615 = FALSE ;
  else {
  mu__boolexpr2615 = ((mu_n1) != (mu_n5)) ; 
}
  if (!(mu__boolexpr2615)) mu__boolexpr2614 = FALSE ;
  else {
  mu__boolexpr2614 = ((mu_n3) != (mu_n5)) ; 
}
    return mu__boolexpr2614;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 207360;
    static mu__subrange_86 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_85 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_84 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_83 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_82 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 208384 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr2628;
bool mu__boolexpr2629;
bool mu__boolexpr2630;
bool mu__boolexpr2631;
bool mu__boolexpr2632;
bool mu__boolexpr2633;
bool mu__boolexpr2634;
bool mu__boolexpr2635;
bool mu__boolexpr2636;
bool mu__boolexpr2637;
bool mu__boolexpr2638;
bool mu__boolexpr2639;
bool mu__boolexpr2640;
bool mu__boolexpr2641;
  if (!((mu_n1) != (mu_n2))) mu__boolexpr2641 = FALSE ;
  else {
  mu__boolexpr2641 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2641)) mu__boolexpr2640 = FALSE ;
  else {
  mu__boolexpr2640 = ((mu_Routers[mu_n1]) == (0)) ; 
}
  if (!(mu__boolexpr2640)) mu__boolexpr2639 = FALSE ;
  else {
  mu__boolexpr2639 = ((mu_Routers[mu_n2]) == (0)) ; 
}
  if (!(mu__boolexpr2639)) mu__boolexpr2638 = FALSE ;
  else {
  mu__boolexpr2638 = ((mu_Tokens[mu_n1]) > (0)) ; 
}
  if (!(mu__boolexpr2638)) mu__boolexpr2637 = FALSE ;
  else {
  mu__boolexpr2637 = ((mu_n3) != (mu_n4)) ; 
}
  if (!(mu__boolexpr2637)) mu__boolexpr2636 = FALSE ;
  else {
  mu__boolexpr2636 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2636)) mu__boolexpr2635 = FALSE ;
  else {
  mu__boolexpr2635 = ((mu_Routers[mu_n3]) == (0)) ; 
}
  if (!(mu__boolexpr2635)) mu__boolexpr2634 = FALSE ;
  else {
  mu__boolexpr2634 = ((mu_Routers[mu_n4]) == (0)) ; 
}
  if (!(mu__boolexpr2634)) mu__boolexpr2633 = FALSE ;
  else {
  mu__boolexpr2633 = ((mu_Tokens[mu_n3]) > (0)) ; 
}
  if (!(mu__boolexpr2633)) mu__boolexpr2632 = FALSE ;
  else {
  mu__boolexpr2632 = ((mu_IncomingQueue[mu_n5][mu_EntryPath[mu_n5]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr2632)) mu__boolexpr2631 = FALSE ;
  else {
  mu__boolexpr2631 = ((mu_TailPointers[mu_ExitPath[mu_n5]][mu_n5]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2631)) mu__boolexpr2630 = FALSE ;
  else {
  mu__boolexpr2630 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr2630)) mu__boolexpr2629 = FALSE ;
  else {
  mu__boolexpr2629 = ((mu_n1) != (mu_n5)) ; 
}
  if (!(mu__boolexpr2629)) mu__boolexpr2628 = FALSE ;
  else {
  mu__boolexpr2628 = ((mu_n3) != (mu_n5)) ; 
}
	      if (mu__boolexpr2628) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 207360;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_86 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_85 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_84 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_83 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_82 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_SendRequest ( (int)mu_n1, mu_ExitPath[mu_n1], (int)mu_n2 );
mu_Tokens[mu_n1] = (mu_Tokens[mu_n1]) - (1);
mu_SendRequest ( (int)mu_n3, mu_ExitPath[mu_n3], (int)mu_n4 );
mu_Tokens[mu_n3] = (mu_Tokens[mu_n3]) - (1);
mu_ProcessRequest ( (int)mu_n5, mu_EntryPath[mu_n5], mu_ExitPath[mu_n5] );
  };

};
/******************** RuleBase103 ********************/
class RuleBase103
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_81 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_80 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_79 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_78 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_77 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Send request + Send request + Process fwd_request, n5:%s, n4:%s, n3:%s, n2:%s, n1:%s", mu_n5.Name(), mu_n4.Name(), mu_n3.Name(), mu_n2.Name(), mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_81 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_80 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_79 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_78 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_77 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr2642;
bool mu__boolexpr2643;
bool mu__boolexpr2644;
bool mu__boolexpr2645;
bool mu__boolexpr2646;
bool mu__boolexpr2647;
bool mu__boolexpr2648;
bool mu__boolexpr2649;
bool mu__boolexpr2650;
bool mu__boolexpr2651;
bool mu__boolexpr2652;
bool mu__boolexpr2653;
bool mu__boolexpr2654;
bool mu__boolexpr2655;
  if (!((mu_n1) != (mu_n2))) mu__boolexpr2655 = FALSE ;
  else {
  mu__boolexpr2655 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2655)) mu__boolexpr2654 = FALSE ;
  else {
  mu__boolexpr2654 = ((mu_Routers[mu_n1]) == (0)) ; 
}
  if (!(mu__boolexpr2654)) mu__boolexpr2653 = FALSE ;
  else {
  mu__boolexpr2653 = ((mu_Routers[mu_n2]) == (0)) ; 
}
  if (!(mu__boolexpr2653)) mu__boolexpr2652 = FALSE ;
  else {
  mu__boolexpr2652 = ((mu_Tokens[mu_n1]) > (0)) ; 
}
  if (!(mu__boolexpr2652)) mu__boolexpr2651 = FALSE ;
  else {
  mu__boolexpr2651 = ((mu_n3) != (mu_n4)) ; 
}
  if (!(mu__boolexpr2651)) mu__boolexpr2650 = FALSE ;
  else {
  mu__boolexpr2650 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2650)) mu__boolexpr2649 = FALSE ;
  else {
  mu__boolexpr2649 = ((mu_Routers[mu_n3]) == (0)) ; 
}
  if (!(mu__boolexpr2649)) mu__boolexpr2648 = FALSE ;
  else {
  mu__boolexpr2648 = ((mu_Routers[mu_n4]) == (0)) ; 
}
  if (!(mu__boolexpr2648)) mu__boolexpr2647 = FALSE ;
  else {
  mu__boolexpr2647 = ((mu_Tokens[mu_n3]) > (0)) ; 
}
  if (!(mu__boolexpr2647)) mu__boolexpr2646 = FALSE ;
  else {
  mu__boolexpr2646 = ((mu_IncomingQueue[mu_n5][mu_EntryPath[mu_n5]][0].mu_msg_type) == (mu_fwd_request)) ; 
}
  if (!(mu__boolexpr2646)) mu__boolexpr2645 = FALSE ;
  else {
  mu__boolexpr2645 = ((mu_TailPointers[mu_ExitPath[mu_n5]][mu_n5]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2645)) mu__boolexpr2644 = FALSE ;
  else {
  mu__boolexpr2644 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr2644)) mu__boolexpr2643 = FALSE ;
  else {
  mu__boolexpr2643 = ((mu_n1) != (mu_n5)) ; 
}
  if (!(mu__boolexpr2643)) mu__boolexpr2642 = FALSE ;
  else {
  mu__boolexpr2642 = ((mu_n3) != (mu_n5)) ; 
}
    return mu__boolexpr2642;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 208384;
    static mu__subrange_81 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_80 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_79 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_78 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_77 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 209408 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr2656;
bool mu__boolexpr2657;
bool mu__boolexpr2658;
bool mu__boolexpr2659;
bool mu__boolexpr2660;
bool mu__boolexpr2661;
bool mu__boolexpr2662;
bool mu__boolexpr2663;
bool mu__boolexpr2664;
bool mu__boolexpr2665;
bool mu__boolexpr2666;
bool mu__boolexpr2667;
bool mu__boolexpr2668;
bool mu__boolexpr2669;
  if (!((mu_n1) != (mu_n2))) mu__boolexpr2669 = FALSE ;
  else {
  mu__boolexpr2669 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2669)) mu__boolexpr2668 = FALSE ;
  else {
  mu__boolexpr2668 = ((mu_Routers[mu_n1]) == (0)) ; 
}
  if (!(mu__boolexpr2668)) mu__boolexpr2667 = FALSE ;
  else {
  mu__boolexpr2667 = ((mu_Routers[mu_n2]) == (0)) ; 
}
  if (!(mu__boolexpr2667)) mu__boolexpr2666 = FALSE ;
  else {
  mu__boolexpr2666 = ((mu_Tokens[mu_n1]) > (0)) ; 
}
  if (!(mu__boolexpr2666)) mu__boolexpr2665 = FALSE ;
  else {
  mu__boolexpr2665 = ((mu_n3) != (mu_n4)) ; 
}
  if (!(mu__boolexpr2665)) mu__boolexpr2664 = FALSE ;
  else {
  mu__boolexpr2664 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2664)) mu__boolexpr2663 = FALSE ;
  else {
  mu__boolexpr2663 = ((mu_Routers[mu_n3]) == (0)) ; 
}
  if (!(mu__boolexpr2663)) mu__boolexpr2662 = FALSE ;
  else {
  mu__boolexpr2662 = ((mu_Routers[mu_n4]) == (0)) ; 
}
  if (!(mu__boolexpr2662)) mu__boolexpr2661 = FALSE ;
  else {
  mu__boolexpr2661 = ((mu_Tokens[mu_n3]) > (0)) ; 
}
  if (!(mu__boolexpr2661)) mu__boolexpr2660 = FALSE ;
  else {
  mu__boolexpr2660 = ((mu_IncomingQueue[mu_n5][mu_EntryPath[mu_n5]][0].mu_msg_type) == (mu_fwd_request)) ; 
}
  if (!(mu__boolexpr2660)) mu__boolexpr2659 = FALSE ;
  else {
  mu__boolexpr2659 = ((mu_TailPointers[mu_ExitPath[mu_n5]][mu_n5]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2659)) mu__boolexpr2658 = FALSE ;
  else {
  mu__boolexpr2658 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr2658)) mu__boolexpr2657 = FALSE ;
  else {
  mu__boolexpr2657 = ((mu_n1) != (mu_n5)) ; 
}
  if (!(mu__boolexpr2657)) mu__boolexpr2656 = FALSE ;
  else {
  mu__boolexpr2656 = ((mu_n3) != (mu_n5)) ; 
}
	      if (mu__boolexpr2656) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 208384;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_81 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_80 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_79 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_78 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_77 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_SendRequest ( (int)mu_n1, mu_ExitPath[mu_n1], (int)mu_n2 );
mu_Tokens[mu_n1] = (mu_Tokens[mu_n1]) - (1);
mu_SendRequest ( (int)mu_n3, mu_ExitPath[mu_n3], (int)mu_n4 );
mu_Tokens[mu_n3] = (mu_Tokens[mu_n3]) - (1);
mu_ProcessFwdRequest ( (int)mu_n5, mu_EntryPath[mu_n5], mu_ExitPath[mu_n5] );
  };

};
/******************** RuleBase104 ********************/
class RuleBase104
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_76 mu_n6;
    mu_n6.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_75 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_74 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_73 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_72 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_71 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Send request + Send request + Send request, n6:%s, n5:%s, n4:%s, n3:%s, n2:%s, n1:%s", mu_n6.Name(), mu_n5.Name(), mu_n4.Name(), mu_n3.Name(), mu_n2.Name(), mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_76 mu_n6;
    mu_n6.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_75 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_74 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_73 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_72 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_71 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr2670;
bool mu__boolexpr2671;
bool mu__boolexpr2672;
bool mu__boolexpr2673;
bool mu__boolexpr2674;
bool mu__boolexpr2675;
bool mu__boolexpr2676;
bool mu__boolexpr2677;
bool mu__boolexpr2678;
bool mu__boolexpr2679;
bool mu__boolexpr2680;
bool mu__boolexpr2681;
bool mu__boolexpr2682;
bool mu__boolexpr2683;
bool mu__boolexpr2684;
bool mu__boolexpr2685;
bool mu__boolexpr2686;
  if (!((mu_n1) != (mu_n2))) mu__boolexpr2686 = FALSE ;
  else {
  mu__boolexpr2686 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2686)) mu__boolexpr2685 = FALSE ;
  else {
  mu__boolexpr2685 = ((mu_Routers[mu_n1]) == (0)) ; 
}
  if (!(mu__boolexpr2685)) mu__boolexpr2684 = FALSE ;
  else {
  mu__boolexpr2684 = ((mu_Routers[mu_n2]) == (0)) ; 
}
  if (!(mu__boolexpr2684)) mu__boolexpr2683 = FALSE ;
  else {
  mu__boolexpr2683 = ((mu_Tokens[mu_n1]) > (0)) ; 
}
  if (!(mu__boolexpr2683)) mu__boolexpr2682 = FALSE ;
  else {
  mu__boolexpr2682 = ((mu_n3) != (mu_n4)) ; 
}
  if (!(mu__boolexpr2682)) mu__boolexpr2681 = FALSE ;
  else {
  mu__boolexpr2681 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2681)) mu__boolexpr2680 = FALSE ;
  else {
  mu__boolexpr2680 = ((mu_Routers[mu_n3]) == (0)) ; 
}
  if (!(mu__boolexpr2680)) mu__boolexpr2679 = FALSE ;
  else {
  mu__boolexpr2679 = ((mu_Routers[mu_n4]) == (0)) ; 
}
  if (!(mu__boolexpr2679)) mu__boolexpr2678 = FALSE ;
  else {
  mu__boolexpr2678 = ((mu_Tokens[mu_n3]) > (0)) ; 
}
  if (!(mu__boolexpr2678)) mu__boolexpr2677 = FALSE ;
  else {
  mu__boolexpr2677 = ((mu_n5) != (mu_n6)) ; 
}
  if (!(mu__boolexpr2677)) mu__boolexpr2676 = FALSE ;
  else {
  mu__boolexpr2676 = ((mu_TailPointers[mu_ExitPath[mu_n5]][mu_n5]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2676)) mu__boolexpr2675 = FALSE ;
  else {
  mu__boolexpr2675 = ((mu_Routers[mu_n5]) == (0)) ; 
}
  if (!(mu__boolexpr2675)) mu__boolexpr2674 = FALSE ;
  else {
  mu__boolexpr2674 = ((mu_Routers[mu_n6]) == (0)) ; 
}
  if (!(mu__boolexpr2674)) mu__boolexpr2673 = FALSE ;
  else {
  mu__boolexpr2673 = ((mu_Tokens[mu_n5]) > (0)) ; 
}
  if (!(mu__boolexpr2673)) mu__boolexpr2672 = FALSE ;
  else {
  mu__boolexpr2672 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr2672)) mu__boolexpr2671 = FALSE ;
  else {
  mu__boolexpr2671 = ((mu_n1) != (mu_n5)) ; 
}
  if (!(mu__boolexpr2671)) mu__boolexpr2670 = FALSE ;
  else {
  mu__boolexpr2670 = ((mu_n3) != (mu_n5)) ; 
}
    return mu__boolexpr2670;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 209408;
    static mu__subrange_76 mu_n6;
    mu_n6.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_75 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_74 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_73 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_72 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_71 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 213504 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr2687;
bool mu__boolexpr2688;
bool mu__boolexpr2689;
bool mu__boolexpr2690;
bool mu__boolexpr2691;
bool mu__boolexpr2692;
bool mu__boolexpr2693;
bool mu__boolexpr2694;
bool mu__boolexpr2695;
bool mu__boolexpr2696;
bool mu__boolexpr2697;
bool mu__boolexpr2698;
bool mu__boolexpr2699;
bool mu__boolexpr2700;
bool mu__boolexpr2701;
bool mu__boolexpr2702;
bool mu__boolexpr2703;
  if (!((mu_n1) != (mu_n2))) mu__boolexpr2703 = FALSE ;
  else {
  mu__boolexpr2703 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2703)) mu__boolexpr2702 = FALSE ;
  else {
  mu__boolexpr2702 = ((mu_Routers[mu_n1]) == (0)) ; 
}
  if (!(mu__boolexpr2702)) mu__boolexpr2701 = FALSE ;
  else {
  mu__boolexpr2701 = ((mu_Routers[mu_n2]) == (0)) ; 
}
  if (!(mu__boolexpr2701)) mu__boolexpr2700 = FALSE ;
  else {
  mu__boolexpr2700 = ((mu_Tokens[mu_n1]) > (0)) ; 
}
  if (!(mu__boolexpr2700)) mu__boolexpr2699 = FALSE ;
  else {
  mu__boolexpr2699 = ((mu_n3) != (mu_n4)) ; 
}
  if (!(mu__boolexpr2699)) mu__boolexpr2698 = FALSE ;
  else {
  mu__boolexpr2698 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2698)) mu__boolexpr2697 = FALSE ;
  else {
  mu__boolexpr2697 = ((mu_Routers[mu_n3]) == (0)) ; 
}
  if (!(mu__boolexpr2697)) mu__boolexpr2696 = FALSE ;
  else {
  mu__boolexpr2696 = ((mu_Routers[mu_n4]) == (0)) ; 
}
  if (!(mu__boolexpr2696)) mu__boolexpr2695 = FALSE ;
  else {
  mu__boolexpr2695 = ((mu_Tokens[mu_n3]) > (0)) ; 
}
  if (!(mu__boolexpr2695)) mu__boolexpr2694 = FALSE ;
  else {
  mu__boolexpr2694 = ((mu_n5) != (mu_n6)) ; 
}
  if (!(mu__boolexpr2694)) mu__boolexpr2693 = FALSE ;
  else {
  mu__boolexpr2693 = ((mu_TailPointers[mu_ExitPath[mu_n5]][mu_n5]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2693)) mu__boolexpr2692 = FALSE ;
  else {
  mu__boolexpr2692 = ((mu_Routers[mu_n5]) == (0)) ; 
}
  if (!(mu__boolexpr2692)) mu__boolexpr2691 = FALSE ;
  else {
  mu__boolexpr2691 = ((mu_Routers[mu_n6]) == (0)) ; 
}
  if (!(mu__boolexpr2691)) mu__boolexpr2690 = FALSE ;
  else {
  mu__boolexpr2690 = ((mu_Tokens[mu_n5]) > (0)) ; 
}
  if (!(mu__boolexpr2690)) mu__boolexpr2689 = FALSE ;
  else {
  mu__boolexpr2689 = ((mu_n1) != (mu_n3)) ; 
}
  if (!(mu__boolexpr2689)) mu__boolexpr2688 = FALSE ;
  else {
  mu__boolexpr2688 = ((mu_n1) != (mu_n5)) ; 
}
  if (!(mu__boolexpr2688)) mu__boolexpr2687 = FALSE ;
  else {
  mu__boolexpr2687 = ((mu_n3) != (mu_n5)) ; 
}
	      if (mu__boolexpr2687) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 209408;
    mu_n6.value((r % 4) + 0);
    r = r / 4;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_76 mu_n6;
    mu_n6.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_75 mu_n5;
    mu_n5.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_74 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_73 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_72 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_71 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_SendRequest ( (int)mu_n1, mu_ExitPath[mu_n1], (int)mu_n2 );
mu_Tokens[mu_n1] = (mu_Tokens[mu_n1]) - (1);
mu_SendRequest ( (int)mu_n3, mu_ExitPath[mu_n3], (int)mu_n4 );
mu_Tokens[mu_n3] = (mu_Tokens[mu_n3]) - (1);
mu_SendRequest ( (int)mu_n5, mu_ExitPath[mu_n5], (int)mu_n6 );
mu_Tokens[mu_n5] = (mu_Tokens[mu_n5]) - (1);
  };

};
/******************** RuleBase105 ********************/
class RuleBase105
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_70 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_69 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Process response + Process response, n2:%s, n1:%s", mu_n2.Name(), mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_70 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_69 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr2704;
bool mu__boolexpr2705;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_response))) mu__boolexpr2705 = FALSE ;
  else {
  mu__boolexpr2705 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr2705)) mu__boolexpr2704 = FALSE ;
  else {
  mu__boolexpr2704 = ((mu_n1) != (mu_n2)) ; 
}
    return mu__boolexpr2704;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 213504;
    static mu__subrange_70 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_69 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 213520 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr2706;
bool mu__boolexpr2707;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_response))) mu__boolexpr2707 = FALSE ;
  else {
  mu__boolexpr2707 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr2707)) mu__boolexpr2706 = FALSE ;
  else {
  mu__boolexpr2706 = ((mu_n1) != (mu_n2)) ; 
}
	      if (mu__boolexpr2706) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 213504;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_70 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_69 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_ProcessResponse ( (int)mu_n1, mu_EntryPath[mu_n1] );
mu_Tokens[mu_n1] = (mu_Tokens[mu_n1]) + (1);
mu_ProcessResponse ( (int)mu_n2, mu_EntryPath[mu_n2] );
mu_Tokens[mu_n2] = (mu_Tokens[mu_n2]) + (1);
  };

};
/******************** RuleBase106 ********************/
class RuleBase106
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_68 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_67 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Process fwd_response + Process response, n2:%s, n1:%s", mu_n2.Name(), mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_68 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_67 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr2708;
bool mu__boolexpr2709;
bool mu__boolexpr2710;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_fwd_response))) mu__boolexpr2710 = FALSE ;
  else {
  mu__boolexpr2710 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2710)) mu__boolexpr2709 = FALSE ;
  else {
  mu__boolexpr2709 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr2709)) mu__boolexpr2708 = FALSE ;
  else {
  mu__boolexpr2708 = ((mu_n1) != (mu_n2)) ; 
}
    return mu__boolexpr2708;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 213520;
    static mu__subrange_68 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_67 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 213536 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr2711;
bool mu__boolexpr2712;
bool mu__boolexpr2713;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_fwd_response))) mu__boolexpr2713 = FALSE ;
  else {
  mu__boolexpr2713 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2713)) mu__boolexpr2712 = FALSE ;
  else {
  mu__boolexpr2712 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr2712)) mu__boolexpr2711 = FALSE ;
  else {
  mu__boolexpr2711 = ((mu_n1) != (mu_n2)) ; 
}
	      if (mu__boolexpr2711) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 213520;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_68 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_67 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_ProcessFwdResponse ( (int)mu_n1, mu_EntryPath[mu_n1], mu_ExitPath[mu_n1] );
mu_ProcessResponse ( (int)mu_n2, mu_EntryPath[mu_n2] );
mu_Tokens[mu_n2] = (mu_Tokens[mu_n2]) + (1);
  };

};
/******************** RuleBase107 ********************/
class RuleBase107
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_66 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_65 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Process fwd_response + Process fwd_response, n2:%s, n1:%s", mu_n2.Name(), mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_66 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_65 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr2714;
bool mu__boolexpr2715;
bool mu__boolexpr2716;
bool mu__boolexpr2717;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_fwd_response))) mu__boolexpr2717 = FALSE ;
  else {
  mu__boolexpr2717 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2717)) mu__boolexpr2716 = FALSE ;
  else {
  mu__boolexpr2716 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr2716)) mu__boolexpr2715 = FALSE ;
  else {
  mu__boolexpr2715 = ((mu_TailPointers[mu_ExitPath[mu_n2]][mu_n2]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2715)) mu__boolexpr2714 = FALSE ;
  else {
  mu__boolexpr2714 = ((mu_n1) != (mu_n2)) ; 
}
    return mu__boolexpr2714;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 213536;
    static mu__subrange_66 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_65 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 213552 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr2718;
bool mu__boolexpr2719;
bool mu__boolexpr2720;
bool mu__boolexpr2721;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_fwd_response))) mu__boolexpr2721 = FALSE ;
  else {
  mu__boolexpr2721 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2721)) mu__boolexpr2720 = FALSE ;
  else {
  mu__boolexpr2720 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr2720)) mu__boolexpr2719 = FALSE ;
  else {
  mu__boolexpr2719 = ((mu_TailPointers[mu_ExitPath[mu_n2]][mu_n2]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2719)) mu__boolexpr2718 = FALSE ;
  else {
  mu__boolexpr2718 = ((mu_n1) != (mu_n2)) ; 
}
	      if (mu__boolexpr2718) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 213536;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_66 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_65 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_ProcessFwdResponse ( (int)mu_n1, mu_EntryPath[mu_n1], mu_ExitPath[mu_n1] );
mu_ProcessFwdResponse ( (int)mu_n2, mu_EntryPath[mu_n2], mu_ExitPath[mu_n2] );
  };

};
/******************** RuleBase108 ********************/
class RuleBase108
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_64 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_63 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Process request + Process response, n2:%s, n1:%s", mu_n2.Name(), mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_64 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_63 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr2722;
bool mu__boolexpr2723;
bool mu__boolexpr2724;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_request))) mu__boolexpr2724 = FALSE ;
  else {
  mu__boolexpr2724 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2724)) mu__boolexpr2723 = FALSE ;
  else {
  mu__boolexpr2723 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr2723)) mu__boolexpr2722 = FALSE ;
  else {
  mu__boolexpr2722 = ((mu_n1) != (mu_n2)) ; 
}
    return mu__boolexpr2722;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 213552;
    static mu__subrange_64 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_63 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 213568 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr2725;
bool mu__boolexpr2726;
bool mu__boolexpr2727;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_request))) mu__boolexpr2727 = FALSE ;
  else {
  mu__boolexpr2727 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2727)) mu__boolexpr2726 = FALSE ;
  else {
  mu__boolexpr2726 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr2726)) mu__boolexpr2725 = FALSE ;
  else {
  mu__boolexpr2725 = ((mu_n1) != (mu_n2)) ; 
}
	      if (mu__boolexpr2725) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 213552;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_64 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_63 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_ProcessRequest ( (int)mu_n1, mu_EntryPath[mu_n1], mu_ExitPath[mu_n1] );
mu_ProcessResponse ( (int)mu_n2, mu_EntryPath[mu_n2] );
mu_Tokens[mu_n2] = (mu_Tokens[mu_n2]) + (1);
  };

};
/******************** RuleBase109 ********************/
class RuleBase109
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_62 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_61 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Process request + Process fwd_response, n2:%s, n1:%s", mu_n2.Name(), mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_62 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_61 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr2728;
bool mu__boolexpr2729;
bool mu__boolexpr2730;
bool mu__boolexpr2731;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_request))) mu__boolexpr2731 = FALSE ;
  else {
  mu__boolexpr2731 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2731)) mu__boolexpr2730 = FALSE ;
  else {
  mu__boolexpr2730 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr2730)) mu__boolexpr2729 = FALSE ;
  else {
  mu__boolexpr2729 = ((mu_TailPointers[mu_ExitPath[mu_n2]][mu_n2]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2729)) mu__boolexpr2728 = FALSE ;
  else {
  mu__boolexpr2728 = ((mu_n1) != (mu_n2)) ; 
}
    return mu__boolexpr2728;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 213568;
    static mu__subrange_62 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_61 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 213584 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr2732;
bool mu__boolexpr2733;
bool mu__boolexpr2734;
bool mu__boolexpr2735;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_request))) mu__boolexpr2735 = FALSE ;
  else {
  mu__boolexpr2735 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2735)) mu__boolexpr2734 = FALSE ;
  else {
  mu__boolexpr2734 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr2734)) mu__boolexpr2733 = FALSE ;
  else {
  mu__boolexpr2733 = ((mu_TailPointers[mu_ExitPath[mu_n2]][mu_n2]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2733)) mu__boolexpr2732 = FALSE ;
  else {
  mu__boolexpr2732 = ((mu_n1) != (mu_n2)) ; 
}
	      if (mu__boolexpr2732) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 213568;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_62 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_61 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_ProcessRequest ( (int)mu_n1, mu_EntryPath[mu_n1], mu_ExitPath[mu_n1] );
mu_ProcessFwdResponse ( (int)mu_n2, mu_EntryPath[mu_n2], mu_ExitPath[mu_n2] );
  };

};
/******************** RuleBase110 ********************/
class RuleBase110
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_60 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_59 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Process request + Process request, n2:%s, n1:%s", mu_n2.Name(), mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_60 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_59 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr2736;
bool mu__boolexpr2737;
bool mu__boolexpr2738;
bool mu__boolexpr2739;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_request))) mu__boolexpr2739 = FALSE ;
  else {
  mu__boolexpr2739 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2739)) mu__boolexpr2738 = FALSE ;
  else {
  mu__boolexpr2738 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr2738)) mu__boolexpr2737 = FALSE ;
  else {
  mu__boolexpr2737 = ((mu_TailPointers[mu_ExitPath[mu_n2]][mu_n2]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2737)) mu__boolexpr2736 = FALSE ;
  else {
  mu__boolexpr2736 = ((mu_n1) != (mu_n2)) ; 
}
    return mu__boolexpr2736;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 213584;
    static mu__subrange_60 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_59 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 213600 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr2740;
bool mu__boolexpr2741;
bool mu__boolexpr2742;
bool mu__boolexpr2743;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_request))) mu__boolexpr2743 = FALSE ;
  else {
  mu__boolexpr2743 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2743)) mu__boolexpr2742 = FALSE ;
  else {
  mu__boolexpr2742 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr2742)) mu__boolexpr2741 = FALSE ;
  else {
  mu__boolexpr2741 = ((mu_TailPointers[mu_ExitPath[mu_n2]][mu_n2]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2741)) mu__boolexpr2740 = FALSE ;
  else {
  mu__boolexpr2740 = ((mu_n1) != (mu_n2)) ; 
}
	      if (mu__boolexpr2740) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 213584;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_60 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_59 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_ProcessRequest ( (int)mu_n1, mu_EntryPath[mu_n1], mu_ExitPath[mu_n1] );
mu_ProcessRequest ( (int)mu_n2, mu_EntryPath[mu_n2], mu_ExitPath[mu_n2] );
  };

};
/******************** RuleBase111 ********************/
class RuleBase111
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_58 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_57 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Process fwd_request + Process response, n2:%s, n1:%s", mu_n2.Name(), mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_58 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_57 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr2744;
bool mu__boolexpr2745;
bool mu__boolexpr2746;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_fwd_request))) mu__boolexpr2746 = FALSE ;
  else {
  mu__boolexpr2746 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2746)) mu__boolexpr2745 = FALSE ;
  else {
  mu__boolexpr2745 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr2745)) mu__boolexpr2744 = FALSE ;
  else {
  mu__boolexpr2744 = ((mu_n1) != (mu_n2)) ; 
}
    return mu__boolexpr2744;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 213600;
    static mu__subrange_58 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_57 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 213616 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr2747;
bool mu__boolexpr2748;
bool mu__boolexpr2749;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_fwd_request))) mu__boolexpr2749 = FALSE ;
  else {
  mu__boolexpr2749 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2749)) mu__boolexpr2748 = FALSE ;
  else {
  mu__boolexpr2748 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr2748)) mu__boolexpr2747 = FALSE ;
  else {
  mu__boolexpr2747 = ((mu_n1) != (mu_n2)) ; 
}
	      if (mu__boolexpr2747) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 213600;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_58 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_57 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_ProcessFwdRequest ( (int)mu_n1, mu_EntryPath[mu_n1], mu_ExitPath[mu_n1] );
mu_ProcessResponse ( (int)mu_n2, mu_EntryPath[mu_n2] );
mu_Tokens[mu_n2] = (mu_Tokens[mu_n2]) + (1);
  };

};
/******************** RuleBase112 ********************/
class RuleBase112
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_56 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_55 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Process fwd_request + Process fwd_response, n2:%s, n1:%s", mu_n2.Name(), mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_56 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_55 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr2750;
bool mu__boolexpr2751;
bool mu__boolexpr2752;
bool mu__boolexpr2753;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_fwd_request))) mu__boolexpr2753 = FALSE ;
  else {
  mu__boolexpr2753 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2753)) mu__boolexpr2752 = FALSE ;
  else {
  mu__boolexpr2752 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr2752)) mu__boolexpr2751 = FALSE ;
  else {
  mu__boolexpr2751 = ((mu_TailPointers[mu_ExitPath[mu_n2]][mu_n2]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2751)) mu__boolexpr2750 = FALSE ;
  else {
  mu__boolexpr2750 = ((mu_n1) != (mu_n2)) ; 
}
    return mu__boolexpr2750;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 213616;
    static mu__subrange_56 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_55 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 213632 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr2754;
bool mu__boolexpr2755;
bool mu__boolexpr2756;
bool mu__boolexpr2757;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_fwd_request))) mu__boolexpr2757 = FALSE ;
  else {
  mu__boolexpr2757 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2757)) mu__boolexpr2756 = FALSE ;
  else {
  mu__boolexpr2756 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr2756)) mu__boolexpr2755 = FALSE ;
  else {
  mu__boolexpr2755 = ((mu_TailPointers[mu_ExitPath[mu_n2]][mu_n2]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2755)) mu__boolexpr2754 = FALSE ;
  else {
  mu__boolexpr2754 = ((mu_n1) != (mu_n2)) ; 
}
	      if (mu__boolexpr2754) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 213616;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_56 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_55 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_ProcessFwdRequest ( (int)mu_n1, mu_EntryPath[mu_n1], mu_ExitPath[mu_n1] );
mu_ProcessFwdResponse ( (int)mu_n2, mu_EntryPath[mu_n2], mu_ExitPath[mu_n2] );
  };

};
/******************** RuleBase113 ********************/
class RuleBase113
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_54 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_53 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Process fwd_request + Process request, n2:%s, n1:%s", mu_n2.Name(), mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_54 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_53 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr2758;
bool mu__boolexpr2759;
bool mu__boolexpr2760;
bool mu__boolexpr2761;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_fwd_request))) mu__boolexpr2761 = FALSE ;
  else {
  mu__boolexpr2761 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2761)) mu__boolexpr2760 = FALSE ;
  else {
  mu__boolexpr2760 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr2760)) mu__boolexpr2759 = FALSE ;
  else {
  mu__boolexpr2759 = ((mu_TailPointers[mu_ExitPath[mu_n2]][mu_n2]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2759)) mu__boolexpr2758 = FALSE ;
  else {
  mu__boolexpr2758 = ((mu_n1) != (mu_n2)) ; 
}
    return mu__boolexpr2758;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 213632;
    static mu__subrange_54 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_53 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 213648 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr2762;
bool mu__boolexpr2763;
bool mu__boolexpr2764;
bool mu__boolexpr2765;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_fwd_request))) mu__boolexpr2765 = FALSE ;
  else {
  mu__boolexpr2765 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2765)) mu__boolexpr2764 = FALSE ;
  else {
  mu__boolexpr2764 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr2764)) mu__boolexpr2763 = FALSE ;
  else {
  mu__boolexpr2763 = ((mu_TailPointers[mu_ExitPath[mu_n2]][mu_n2]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2763)) mu__boolexpr2762 = FALSE ;
  else {
  mu__boolexpr2762 = ((mu_n1) != (mu_n2)) ; 
}
	      if (mu__boolexpr2762) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 213632;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_54 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_53 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_ProcessFwdRequest ( (int)mu_n1, mu_EntryPath[mu_n1], mu_ExitPath[mu_n1] );
mu_ProcessRequest ( (int)mu_n2, mu_EntryPath[mu_n2], mu_ExitPath[mu_n2] );
  };

};
/******************** RuleBase114 ********************/
class RuleBase114
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_52 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_51 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Process fwd_request + Process fwd_request, n2:%s, n1:%s", mu_n2.Name(), mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_52 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_51 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr2766;
bool mu__boolexpr2767;
bool mu__boolexpr2768;
bool mu__boolexpr2769;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_fwd_request))) mu__boolexpr2769 = FALSE ;
  else {
  mu__boolexpr2769 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2769)) mu__boolexpr2768 = FALSE ;
  else {
  mu__boolexpr2768 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_fwd_request)) ; 
}
  if (!(mu__boolexpr2768)) mu__boolexpr2767 = FALSE ;
  else {
  mu__boolexpr2767 = ((mu_TailPointers[mu_ExitPath[mu_n2]][mu_n2]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2767)) mu__boolexpr2766 = FALSE ;
  else {
  mu__boolexpr2766 = ((mu_n1) != (mu_n2)) ; 
}
    return mu__boolexpr2766;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 213648;
    static mu__subrange_52 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_51 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 213664 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr2770;
bool mu__boolexpr2771;
bool mu__boolexpr2772;
bool mu__boolexpr2773;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_fwd_request))) mu__boolexpr2773 = FALSE ;
  else {
  mu__boolexpr2773 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2773)) mu__boolexpr2772 = FALSE ;
  else {
  mu__boolexpr2772 = ((mu_IncomingQueue[mu_n2][mu_EntryPath[mu_n2]][0].mu_msg_type) == (mu_fwd_request)) ; 
}
  if (!(mu__boolexpr2772)) mu__boolexpr2771 = FALSE ;
  else {
  mu__boolexpr2771 = ((mu_TailPointers[mu_ExitPath[mu_n2]][mu_n2]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2771)) mu__boolexpr2770 = FALSE ;
  else {
  mu__boolexpr2770 = ((mu_n1) != (mu_n2)) ; 
}
	      if (mu__boolexpr2770) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 213648;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_52 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_51 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_ProcessFwdRequest ( (int)mu_n1, mu_EntryPath[mu_n1], mu_ExitPath[mu_n1] );
mu_ProcessFwdRequest ( (int)mu_n2, mu_EntryPath[mu_n2], mu_ExitPath[mu_n2] );
  };

};
/******************** RuleBase115 ********************/
class RuleBase115
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_50 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_49 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_48 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Send request + Process response, n3:%s, n2:%s, n1:%s", mu_n3.Name(), mu_n2.Name(), mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_50 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_49 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_48 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr2774;
bool mu__boolexpr2775;
bool mu__boolexpr2776;
bool mu__boolexpr2777;
bool mu__boolexpr2778;
bool mu__boolexpr2779;
  if (!((mu_n1) != (mu_n2))) mu__boolexpr2779 = FALSE ;
  else {
  mu__boolexpr2779 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2779)) mu__boolexpr2778 = FALSE ;
  else {
  mu__boolexpr2778 = ((mu_Routers[mu_n1]) == (0)) ; 
}
  if (!(mu__boolexpr2778)) mu__boolexpr2777 = FALSE ;
  else {
  mu__boolexpr2777 = ((mu_Routers[mu_n2]) == (0)) ; 
}
  if (!(mu__boolexpr2777)) mu__boolexpr2776 = FALSE ;
  else {
  mu__boolexpr2776 = ((mu_Tokens[mu_n1]) > (0)) ; 
}
  if (!(mu__boolexpr2776)) mu__boolexpr2775 = FALSE ;
  else {
  mu__boolexpr2775 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr2775)) mu__boolexpr2774 = FALSE ;
  else {
  mu__boolexpr2774 = ((mu_n1) != (mu_n3)) ; 
}
    return mu__boolexpr2774;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 213664;
    static mu__subrange_50 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_49 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_48 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 213728 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr2780;
bool mu__boolexpr2781;
bool mu__boolexpr2782;
bool mu__boolexpr2783;
bool mu__boolexpr2784;
bool mu__boolexpr2785;
  if (!((mu_n1) != (mu_n2))) mu__boolexpr2785 = FALSE ;
  else {
  mu__boolexpr2785 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2785)) mu__boolexpr2784 = FALSE ;
  else {
  mu__boolexpr2784 = ((mu_Routers[mu_n1]) == (0)) ; 
}
  if (!(mu__boolexpr2784)) mu__boolexpr2783 = FALSE ;
  else {
  mu__boolexpr2783 = ((mu_Routers[mu_n2]) == (0)) ; 
}
  if (!(mu__boolexpr2783)) mu__boolexpr2782 = FALSE ;
  else {
  mu__boolexpr2782 = ((mu_Tokens[mu_n1]) > (0)) ; 
}
  if (!(mu__boolexpr2782)) mu__boolexpr2781 = FALSE ;
  else {
  mu__boolexpr2781 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_response)) ; 
}
  if (!(mu__boolexpr2781)) mu__boolexpr2780 = FALSE ;
  else {
  mu__boolexpr2780 = ((mu_n1) != (mu_n3)) ; 
}
	      if (mu__boolexpr2780) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 213664;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_50 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_49 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_48 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_SendRequest ( (int)mu_n1, mu_ExitPath[mu_n1], (int)mu_n2 );
mu_Tokens[mu_n1] = (mu_Tokens[mu_n1]) - (1);
mu_ProcessResponse ( (int)mu_n3, mu_EntryPath[mu_n3] );
mu_Tokens[mu_n3] = (mu_Tokens[mu_n3]) + (1);
  };

};
/******************** RuleBase116 ********************/
class RuleBase116
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_47 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_46 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_45 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Send request + Process fwd_response, n3:%s, n2:%s, n1:%s", mu_n3.Name(), mu_n2.Name(), mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_47 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_46 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_45 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr2786;
bool mu__boolexpr2787;
bool mu__boolexpr2788;
bool mu__boolexpr2789;
bool mu__boolexpr2790;
bool mu__boolexpr2791;
bool mu__boolexpr2792;
  if (!((mu_n1) != (mu_n2))) mu__boolexpr2792 = FALSE ;
  else {
  mu__boolexpr2792 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2792)) mu__boolexpr2791 = FALSE ;
  else {
  mu__boolexpr2791 = ((mu_Routers[mu_n1]) == (0)) ; 
}
  if (!(mu__boolexpr2791)) mu__boolexpr2790 = FALSE ;
  else {
  mu__boolexpr2790 = ((mu_Routers[mu_n2]) == (0)) ; 
}
  if (!(mu__boolexpr2790)) mu__boolexpr2789 = FALSE ;
  else {
  mu__boolexpr2789 = ((mu_Tokens[mu_n1]) > (0)) ; 
}
  if (!(mu__boolexpr2789)) mu__boolexpr2788 = FALSE ;
  else {
  mu__boolexpr2788 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr2788)) mu__boolexpr2787 = FALSE ;
  else {
  mu__boolexpr2787 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2787)) mu__boolexpr2786 = FALSE ;
  else {
  mu__boolexpr2786 = ((mu_n1) != (mu_n3)) ; 
}
    return mu__boolexpr2786;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 213728;
    static mu__subrange_47 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_46 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_45 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 213792 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr2793;
bool mu__boolexpr2794;
bool mu__boolexpr2795;
bool mu__boolexpr2796;
bool mu__boolexpr2797;
bool mu__boolexpr2798;
bool mu__boolexpr2799;
  if (!((mu_n1) != (mu_n2))) mu__boolexpr2799 = FALSE ;
  else {
  mu__boolexpr2799 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2799)) mu__boolexpr2798 = FALSE ;
  else {
  mu__boolexpr2798 = ((mu_Routers[mu_n1]) == (0)) ; 
}
  if (!(mu__boolexpr2798)) mu__boolexpr2797 = FALSE ;
  else {
  mu__boolexpr2797 = ((mu_Routers[mu_n2]) == (0)) ; 
}
  if (!(mu__boolexpr2797)) mu__boolexpr2796 = FALSE ;
  else {
  mu__boolexpr2796 = ((mu_Tokens[mu_n1]) > (0)) ; 
}
  if (!(mu__boolexpr2796)) mu__boolexpr2795 = FALSE ;
  else {
  mu__boolexpr2795 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_fwd_response)) ; 
}
  if (!(mu__boolexpr2795)) mu__boolexpr2794 = FALSE ;
  else {
  mu__boolexpr2794 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2794)) mu__boolexpr2793 = FALSE ;
  else {
  mu__boolexpr2793 = ((mu_n1) != (mu_n3)) ; 
}
	      if (mu__boolexpr2793) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 213728;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_47 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_46 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_45 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_SendRequest ( (int)mu_n1, mu_ExitPath[mu_n1], (int)mu_n2 );
mu_Tokens[mu_n1] = (mu_Tokens[mu_n1]) - (1);
mu_ProcessFwdResponse ( (int)mu_n3, mu_EntryPath[mu_n3], mu_ExitPath[mu_n3] );
  };

};
/******************** RuleBase117 ********************/
class RuleBase117
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_44 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_43 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_42 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Send request + Process request, n3:%s, n2:%s, n1:%s", mu_n3.Name(), mu_n2.Name(), mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_44 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_43 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_42 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr2800;
bool mu__boolexpr2801;
bool mu__boolexpr2802;
bool mu__boolexpr2803;
bool mu__boolexpr2804;
bool mu__boolexpr2805;
bool mu__boolexpr2806;
  if (!((mu_n1) != (mu_n2))) mu__boolexpr2806 = FALSE ;
  else {
  mu__boolexpr2806 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2806)) mu__boolexpr2805 = FALSE ;
  else {
  mu__boolexpr2805 = ((mu_Routers[mu_n1]) == (0)) ; 
}
  if (!(mu__boolexpr2805)) mu__boolexpr2804 = FALSE ;
  else {
  mu__boolexpr2804 = ((mu_Routers[mu_n2]) == (0)) ; 
}
  if (!(mu__boolexpr2804)) mu__boolexpr2803 = FALSE ;
  else {
  mu__boolexpr2803 = ((mu_Tokens[mu_n1]) > (0)) ; 
}
  if (!(mu__boolexpr2803)) mu__boolexpr2802 = FALSE ;
  else {
  mu__boolexpr2802 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr2802)) mu__boolexpr2801 = FALSE ;
  else {
  mu__boolexpr2801 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2801)) mu__boolexpr2800 = FALSE ;
  else {
  mu__boolexpr2800 = ((mu_n1) != (mu_n3)) ; 
}
    return mu__boolexpr2800;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 213792;
    static mu__subrange_44 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_43 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_42 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 213856 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr2807;
bool mu__boolexpr2808;
bool mu__boolexpr2809;
bool mu__boolexpr2810;
bool mu__boolexpr2811;
bool mu__boolexpr2812;
bool mu__boolexpr2813;
  if (!((mu_n1) != (mu_n2))) mu__boolexpr2813 = FALSE ;
  else {
  mu__boolexpr2813 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2813)) mu__boolexpr2812 = FALSE ;
  else {
  mu__boolexpr2812 = ((mu_Routers[mu_n1]) == (0)) ; 
}
  if (!(mu__boolexpr2812)) mu__boolexpr2811 = FALSE ;
  else {
  mu__boolexpr2811 = ((mu_Routers[mu_n2]) == (0)) ; 
}
  if (!(mu__boolexpr2811)) mu__boolexpr2810 = FALSE ;
  else {
  mu__boolexpr2810 = ((mu_Tokens[mu_n1]) > (0)) ; 
}
  if (!(mu__boolexpr2810)) mu__boolexpr2809 = FALSE ;
  else {
  mu__boolexpr2809 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_request)) ; 
}
  if (!(mu__boolexpr2809)) mu__boolexpr2808 = FALSE ;
  else {
  mu__boolexpr2808 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2808)) mu__boolexpr2807 = FALSE ;
  else {
  mu__boolexpr2807 = ((mu_n1) != (mu_n3)) ; 
}
	      if (mu__boolexpr2807) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 213792;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_44 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_43 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_42 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_SendRequest ( (int)mu_n1, mu_ExitPath[mu_n1], (int)mu_n2 );
mu_Tokens[mu_n1] = (mu_Tokens[mu_n1]) - (1);
mu_ProcessRequest ( (int)mu_n3, mu_EntryPath[mu_n3], mu_ExitPath[mu_n3] );
  };

};
/******************** RuleBase118 ********************/
class RuleBase118
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_41 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_40 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_39 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Send request + Process fwd_request, n3:%s, n2:%s, n1:%s", mu_n3.Name(), mu_n2.Name(), mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_41 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_40 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_39 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr2814;
bool mu__boolexpr2815;
bool mu__boolexpr2816;
bool mu__boolexpr2817;
bool mu__boolexpr2818;
bool mu__boolexpr2819;
bool mu__boolexpr2820;
  if (!((mu_n1) != (mu_n2))) mu__boolexpr2820 = FALSE ;
  else {
  mu__boolexpr2820 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2820)) mu__boolexpr2819 = FALSE ;
  else {
  mu__boolexpr2819 = ((mu_Routers[mu_n1]) == (0)) ; 
}
  if (!(mu__boolexpr2819)) mu__boolexpr2818 = FALSE ;
  else {
  mu__boolexpr2818 = ((mu_Routers[mu_n2]) == (0)) ; 
}
  if (!(mu__boolexpr2818)) mu__boolexpr2817 = FALSE ;
  else {
  mu__boolexpr2817 = ((mu_Tokens[mu_n1]) > (0)) ; 
}
  if (!(mu__boolexpr2817)) mu__boolexpr2816 = FALSE ;
  else {
  mu__boolexpr2816 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_fwd_request)) ; 
}
  if (!(mu__boolexpr2816)) mu__boolexpr2815 = FALSE ;
  else {
  mu__boolexpr2815 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2815)) mu__boolexpr2814 = FALSE ;
  else {
  mu__boolexpr2814 = ((mu_n1) != (mu_n3)) ; 
}
    return mu__boolexpr2814;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 213856;
    static mu__subrange_41 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_40 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_39 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 213920 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr2821;
bool mu__boolexpr2822;
bool mu__boolexpr2823;
bool mu__boolexpr2824;
bool mu__boolexpr2825;
bool mu__boolexpr2826;
bool mu__boolexpr2827;
  if (!((mu_n1) != (mu_n2))) mu__boolexpr2827 = FALSE ;
  else {
  mu__boolexpr2827 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2827)) mu__boolexpr2826 = FALSE ;
  else {
  mu__boolexpr2826 = ((mu_Routers[mu_n1]) == (0)) ; 
}
  if (!(mu__boolexpr2826)) mu__boolexpr2825 = FALSE ;
  else {
  mu__boolexpr2825 = ((mu_Routers[mu_n2]) == (0)) ; 
}
  if (!(mu__boolexpr2825)) mu__boolexpr2824 = FALSE ;
  else {
  mu__boolexpr2824 = ((mu_Tokens[mu_n1]) > (0)) ; 
}
  if (!(mu__boolexpr2824)) mu__boolexpr2823 = FALSE ;
  else {
  mu__boolexpr2823 = ((mu_IncomingQueue[mu_n3][mu_EntryPath[mu_n3]][0].mu_msg_type) == (mu_fwd_request)) ; 
}
  if (!(mu__boolexpr2823)) mu__boolexpr2822 = FALSE ;
  else {
  mu__boolexpr2822 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2822)) mu__boolexpr2821 = FALSE ;
  else {
  mu__boolexpr2821 = ((mu_n1) != (mu_n3)) ; 
}
	      if (mu__boolexpr2821) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 213856;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_41 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_40 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_39 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_SendRequest ( (int)mu_n1, mu_ExitPath[mu_n1], (int)mu_n2 );
mu_Tokens[mu_n1] = (mu_Tokens[mu_n1]) - (1);
mu_ProcessFwdRequest ( (int)mu_n3, mu_EntryPath[mu_n3], mu_ExitPath[mu_n3] );
  };

};
/******************** RuleBase119 ********************/
class RuleBase119
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_38 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_37 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_36 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_35 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Send request + Send request, n4:%s, n3:%s, n2:%s, n1:%s", mu_n4.Name(), mu_n3.Name(), mu_n2.Name(), mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_38 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_37 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_36 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_35 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr2828;
bool mu__boolexpr2829;
bool mu__boolexpr2830;
bool mu__boolexpr2831;
bool mu__boolexpr2832;
bool mu__boolexpr2833;
bool mu__boolexpr2834;
bool mu__boolexpr2835;
bool mu__boolexpr2836;
bool mu__boolexpr2837;
  if (!((mu_n1) != (mu_n2))) mu__boolexpr2837 = FALSE ;
  else {
  mu__boolexpr2837 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2837)) mu__boolexpr2836 = FALSE ;
  else {
  mu__boolexpr2836 = ((mu_Routers[mu_n1]) == (0)) ; 
}
  if (!(mu__boolexpr2836)) mu__boolexpr2835 = FALSE ;
  else {
  mu__boolexpr2835 = ((mu_Routers[mu_n2]) == (0)) ; 
}
  if (!(mu__boolexpr2835)) mu__boolexpr2834 = FALSE ;
  else {
  mu__boolexpr2834 = ((mu_Tokens[mu_n1]) > (0)) ; 
}
  if (!(mu__boolexpr2834)) mu__boolexpr2833 = FALSE ;
  else {
  mu__boolexpr2833 = ((mu_n3) != (mu_n4)) ; 
}
  if (!(mu__boolexpr2833)) mu__boolexpr2832 = FALSE ;
  else {
  mu__boolexpr2832 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2832)) mu__boolexpr2831 = FALSE ;
  else {
  mu__boolexpr2831 = ((mu_Routers[mu_n3]) == (0)) ; 
}
  if (!(mu__boolexpr2831)) mu__boolexpr2830 = FALSE ;
  else {
  mu__boolexpr2830 = ((mu_Routers[mu_n4]) == (0)) ; 
}
  if (!(mu__boolexpr2830)) mu__boolexpr2829 = FALSE ;
  else {
  mu__boolexpr2829 = ((mu_Tokens[mu_n3]) > (0)) ; 
}
  if (!(mu__boolexpr2829)) mu__boolexpr2828 = FALSE ;
  else {
  mu__boolexpr2828 = ((mu_n1) != (mu_n3)) ; 
}
    return mu__boolexpr2828;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 213920;
    static mu__subrange_38 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_37 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_36 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_35 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 214176 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr2838;
bool mu__boolexpr2839;
bool mu__boolexpr2840;
bool mu__boolexpr2841;
bool mu__boolexpr2842;
bool mu__boolexpr2843;
bool mu__boolexpr2844;
bool mu__boolexpr2845;
bool mu__boolexpr2846;
bool mu__boolexpr2847;
  if (!((mu_n1) != (mu_n2))) mu__boolexpr2847 = FALSE ;
  else {
  mu__boolexpr2847 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2847)) mu__boolexpr2846 = FALSE ;
  else {
  mu__boolexpr2846 = ((mu_Routers[mu_n1]) == (0)) ; 
}
  if (!(mu__boolexpr2846)) mu__boolexpr2845 = FALSE ;
  else {
  mu__boolexpr2845 = ((mu_Routers[mu_n2]) == (0)) ; 
}
  if (!(mu__boolexpr2845)) mu__boolexpr2844 = FALSE ;
  else {
  mu__boolexpr2844 = ((mu_Tokens[mu_n1]) > (0)) ; 
}
  if (!(mu__boolexpr2844)) mu__boolexpr2843 = FALSE ;
  else {
  mu__boolexpr2843 = ((mu_n3) != (mu_n4)) ; 
}
  if (!(mu__boolexpr2843)) mu__boolexpr2842 = FALSE ;
  else {
  mu__boolexpr2842 = ((mu_TailPointers[mu_ExitPath[mu_n3]][mu_n3]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2842)) mu__boolexpr2841 = FALSE ;
  else {
  mu__boolexpr2841 = ((mu_Routers[mu_n3]) == (0)) ; 
}
  if (!(mu__boolexpr2841)) mu__boolexpr2840 = FALSE ;
  else {
  mu__boolexpr2840 = ((mu_Routers[mu_n4]) == (0)) ; 
}
  if (!(mu__boolexpr2840)) mu__boolexpr2839 = FALSE ;
  else {
  mu__boolexpr2839 = ((mu_Tokens[mu_n3]) > (0)) ; 
}
  if (!(mu__boolexpr2839)) mu__boolexpr2838 = FALSE ;
  else {
  mu__boolexpr2838 = ((mu_n1) != (mu_n3)) ; 
}
	      if (mu__boolexpr2838) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 213920;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_38 mu_n4;
    mu_n4.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_37 mu_n3;
    mu_n3.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_36 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_35 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_SendRequest ( (int)mu_n1, mu_ExitPath[mu_n1], (int)mu_n2 );
mu_Tokens[mu_n1] = (mu_Tokens[mu_n1]) - (1);
mu_SendRequest ( (int)mu_n3, mu_ExitPath[mu_n3], (int)mu_n4 );
mu_Tokens[mu_n3] = (mu_Tokens[mu_n3]) - (1);
  };

};
/******************** RuleBase120 ********************/
class RuleBase120
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_34 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Process response, n1:%s", mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_34 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return (mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_response);
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 214176;
    static mu__subrange_34 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 214180 )
      {
	if ( ( TRUE  ) ) {
	      if ((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_response)) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 214176;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_34 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_ProcessResponse ( (int)mu_n1, mu_EntryPath[mu_n1] );
mu_Tokens[mu_n1] = (mu_Tokens[mu_n1]) + (1);
  };

};
/******************** RuleBase121 ********************/
class RuleBase121
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_33 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Process fwd_response, n1:%s", mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_33 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr2848;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_fwd_response))) mu__boolexpr2848 = FALSE ;
  else {
  mu__boolexpr2848 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
    return mu__boolexpr2848;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 214180;
    static mu__subrange_33 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 214184 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr2849;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_fwd_response))) mu__boolexpr2849 = FALSE ;
  else {
  mu__boolexpr2849 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
	      if (mu__boolexpr2849) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 214180;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_33 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_ProcessFwdResponse ( (int)mu_n1, mu_EntryPath[mu_n1], mu_ExitPath[mu_n1] );
  };

};
/******************** RuleBase122 ********************/
class RuleBase122
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_32 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Process request, n1:%s", mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_32 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr2850;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_request))) mu__boolexpr2850 = FALSE ;
  else {
  mu__boolexpr2850 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
    return mu__boolexpr2850;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 214184;
    static mu__subrange_32 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 214188 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr2851;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_request))) mu__boolexpr2851 = FALSE ;
  else {
  mu__boolexpr2851 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
	      if (mu__boolexpr2851) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 214184;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_32 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_ProcessRequest ( (int)mu_n1, mu_EntryPath[mu_n1], mu_ExitPath[mu_n1] );
  };

};
/******************** RuleBase123 ********************/
class RuleBase123
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_31 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Process fwd_request, n1:%s", mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_31 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr2852;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_fwd_request))) mu__boolexpr2852 = FALSE ;
  else {
  mu__boolexpr2852 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
    return mu__boolexpr2852;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 214188;
    static mu__subrange_31 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 214192 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr2853;
  if (!((mu_IncomingQueue[mu_n1][mu_EntryPath[mu_n1]][0].mu_msg_type) == (mu_fwd_request))) mu__boolexpr2853 = FALSE ;
  else {
  mu__boolexpr2853 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
	      if (mu__boolexpr2853) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 214188;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_31 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_ProcessFwdRequest ( (int)mu_n1, mu_EntryPath[mu_n1], mu_ExitPath[mu_n1] );
  };

};
/******************** RuleBase124 ********************/
class RuleBase124
{
public:
  int Priority()
  {
    return 0;
  }
  char * Name(unsigned r)
  {
    static mu__subrange_30 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_29 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    return tsprintf("Rule --> Send request, n2:%s, n1:%s", mu_n2.Name(), mu_n1.Name());
  }
  bool Condition(unsigned r)
  {
    static mu__subrange_30 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_29 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
bool mu__boolexpr2854;
bool mu__boolexpr2855;
bool mu__boolexpr2856;
bool mu__boolexpr2857;
  if (!((mu_n1) != (mu_n2))) mu__boolexpr2857 = FALSE ;
  else {
  mu__boolexpr2857 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2857)) mu__boolexpr2856 = FALSE ;
  else {
  mu__boolexpr2856 = ((mu_Routers[mu_n1]) == (0)) ; 
}
  if (!(mu__boolexpr2856)) mu__boolexpr2855 = FALSE ;
  else {
  mu__boolexpr2855 = ((mu_Routers[mu_n2]) == (0)) ; 
}
  if (!(mu__boolexpr2855)) mu__boolexpr2854 = FALSE ;
  else {
  mu__boolexpr2854 = ((mu_Tokens[mu_n1]) > (0)) ; 
}
    return mu__boolexpr2854;
  }

  void NextRule(unsigned & what_rule)
  {
    unsigned r = what_rule - 214192;
    static mu__subrange_30 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_29 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    while (what_rule < 214208 )
      {
	if ( ( TRUE  ) ) {
bool mu__boolexpr2858;
bool mu__boolexpr2859;
bool mu__boolexpr2860;
bool mu__boolexpr2861;
  if (!((mu_n1) != (mu_n2))) mu__boolexpr2861 = FALSE ;
  else {
  mu__boolexpr2861 = ((mu_TailPointers[mu_ExitPath[mu_n1]][mu_n1]) < (mu_BufferSpace)) ; 
}
  if (!(mu__boolexpr2861)) mu__boolexpr2860 = FALSE ;
  else {
  mu__boolexpr2860 = ((mu_Routers[mu_n1]) == (0)) ; 
}
  if (!(mu__boolexpr2860)) mu__boolexpr2859 = FALSE ;
  else {
  mu__boolexpr2859 = ((mu_Routers[mu_n2]) == (0)) ; 
}
  if (!(mu__boolexpr2859)) mu__boolexpr2858 = FALSE ;
  else {
  mu__boolexpr2858 = ((mu_Tokens[mu_n1]) > (0)) ; 
}
	      if (mu__boolexpr2858) {
		if ( ( TRUE  ) )
		  return;
		else
		  what_rule++;
	      }
	      else
		what_rule += 1;
	}
	else
	  what_rule += 1;
    r = what_rule - 214192;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
    }
  }

  void Code(unsigned r)
  {
    static mu__subrange_30 mu_n2;
    mu_n2.value((r % 4) + 0);
    r = r / 4;
    static mu__subrange_29 mu_n1;
    mu_n1.value((r % 4) + 0);
    r = r / 4;
mu_SendRequest ( (int)mu_n1, mu_ExitPath[mu_n1], (int)mu_n2 );
mu_Tokens[mu_n1] = (mu_Tokens[mu_n1]) - (1);
  };

};
class NextStateGenerator
{
  RuleBase0 R0;
  RuleBase1 R1;
  RuleBase2 R2;
  RuleBase3 R3;
  RuleBase4 R4;
  RuleBase5 R5;
  RuleBase6 R6;
  RuleBase7 R7;
  RuleBase8 R8;
  RuleBase9 R9;
  RuleBase10 R10;
  RuleBase11 R11;
  RuleBase12 R12;
  RuleBase13 R13;
  RuleBase14 R14;
  RuleBase15 R15;
  RuleBase16 R16;
  RuleBase17 R17;
  RuleBase18 R18;
  RuleBase19 R19;
  RuleBase20 R20;
  RuleBase21 R21;
  RuleBase22 R22;
  RuleBase23 R23;
  RuleBase24 R24;
  RuleBase25 R25;
  RuleBase26 R26;
  RuleBase27 R27;
  RuleBase28 R28;
  RuleBase29 R29;
  RuleBase30 R30;
  RuleBase31 R31;
  RuleBase32 R32;
  RuleBase33 R33;
  RuleBase34 R34;
  RuleBase35 R35;
  RuleBase36 R36;
  RuleBase37 R37;
  RuleBase38 R38;
  RuleBase39 R39;
  RuleBase40 R40;
  RuleBase41 R41;
  RuleBase42 R42;
  RuleBase43 R43;
  RuleBase44 R44;
  RuleBase45 R45;
  RuleBase46 R46;
  RuleBase47 R47;
  RuleBase48 R48;
  RuleBase49 R49;
  RuleBase50 R50;
  RuleBase51 R51;
  RuleBase52 R52;
  RuleBase53 R53;
  RuleBase54 R54;
  RuleBase55 R55;
  RuleBase56 R56;
  RuleBase57 R57;
  RuleBase58 R58;
  RuleBase59 R59;
  RuleBase60 R60;
  RuleBase61 R61;
  RuleBase62 R62;
  RuleBase63 R63;
  RuleBase64 R64;
  RuleBase65 R65;
  RuleBase66 R66;
  RuleBase67 R67;
  RuleBase68 R68;
  RuleBase69 R69;
  RuleBase70 R70;
  RuleBase71 R71;
  RuleBase72 R72;
  RuleBase73 R73;
  RuleBase74 R74;
  RuleBase75 R75;
  RuleBase76 R76;
  RuleBase77 R77;
  RuleBase78 R78;
  RuleBase79 R79;
  RuleBase80 R80;
  RuleBase81 R81;
  RuleBase82 R82;
  RuleBase83 R83;
  RuleBase84 R84;
  RuleBase85 R85;
  RuleBase86 R86;
  RuleBase87 R87;
  RuleBase88 R88;
  RuleBase89 R89;
  RuleBase90 R90;
  RuleBase91 R91;
  RuleBase92 R92;
  RuleBase93 R93;
  RuleBase94 R94;
  RuleBase95 R95;
  RuleBase96 R96;
  RuleBase97 R97;
  RuleBase98 R98;
  RuleBase99 R99;
  RuleBase100 R100;
  RuleBase101 R101;
  RuleBase102 R102;
  RuleBase103 R103;
  RuleBase104 R104;
  RuleBase105 R105;
  RuleBase106 R106;
  RuleBase107 R107;
  RuleBase108 R108;
  RuleBase109 R109;
  RuleBase110 R110;
  RuleBase111 R111;
  RuleBase112 R112;
  RuleBase113 R113;
  RuleBase114 R114;
  RuleBase115 R115;
  RuleBase116 R116;
  RuleBase117 R117;
  RuleBase118 R118;
  RuleBase119 R119;
  RuleBase120 R120;
  RuleBase121 R121;
  RuleBase122 R122;
  RuleBase123 R123;
  RuleBase124 R124;
public:
void SetNextEnabledRule(unsigned & what_rule)
{
  category = CONDITION;
  if (what_rule<256)
    { R0.NextRule(what_rule);
      if (what_rule<256) return; }
  if (what_rule>=256 && what_rule<512)
    { R1.NextRule(what_rule);
      if (what_rule<512) return; }
  if (what_rule>=512 && what_rule<768)
    { R2.NextRule(what_rule);
      if (what_rule<768) return; }
  if (what_rule>=768 && what_rule<1024)
    { R3.NextRule(what_rule);
      if (what_rule<1024) return; }
  if (what_rule>=1024 && what_rule<1280)
    { R4.NextRule(what_rule);
      if (what_rule<1280) return; }
  if (what_rule>=1280 && what_rule<1536)
    { R5.NextRule(what_rule);
      if (what_rule<1536) return; }
  if (what_rule>=1536 && what_rule<1792)
    { R6.NextRule(what_rule);
      if (what_rule<1792) return; }
  if (what_rule>=1792 && what_rule<2048)
    { R7.NextRule(what_rule);
      if (what_rule<2048) return; }
  if (what_rule>=2048 && what_rule<2304)
    { R8.NextRule(what_rule);
      if (what_rule<2304) return; }
  if (what_rule>=2304 && what_rule<2560)
    { R9.NextRule(what_rule);
      if (what_rule<2560) return; }
  if (what_rule>=2560 && what_rule<2816)
    { R10.NextRule(what_rule);
      if (what_rule<2816) return; }
  if (what_rule>=2816 && what_rule<3072)
    { R11.NextRule(what_rule);
      if (what_rule<3072) return; }
  if (what_rule>=3072 && what_rule<3328)
    { R12.NextRule(what_rule);
      if (what_rule<3328) return; }
  if (what_rule>=3328 && what_rule<3584)
    { R13.NextRule(what_rule);
      if (what_rule<3584) return; }
  if (what_rule>=3584 && what_rule<3840)
    { R14.NextRule(what_rule);
      if (what_rule<3840) return; }
  if (what_rule>=3840 && what_rule<4096)
    { R15.NextRule(what_rule);
      if (what_rule<4096) return; }
  if (what_rule>=4096 && what_rule<4352)
    { R16.NextRule(what_rule);
      if (what_rule<4352) return; }
  if (what_rule>=4352 && what_rule<4608)
    { R17.NextRule(what_rule);
      if (what_rule<4608) return; }
  if (what_rule>=4608 && what_rule<4864)
    { R18.NextRule(what_rule);
      if (what_rule<4864) return; }
  if (what_rule>=4864 && what_rule<5120)
    { R19.NextRule(what_rule);
      if (what_rule<5120) return; }
  if (what_rule>=5120 && what_rule<5376)
    { R20.NextRule(what_rule);
      if (what_rule<5376) return; }
  if (what_rule>=5376 && what_rule<5632)
    { R21.NextRule(what_rule);
      if (what_rule<5632) return; }
  if (what_rule>=5632 && what_rule<5888)
    { R22.NextRule(what_rule);
      if (what_rule<5888) return; }
  if (what_rule>=5888 && what_rule<6144)
    { R23.NextRule(what_rule);
      if (what_rule<6144) return; }
  if (what_rule>=6144 && what_rule<6400)
    { R24.NextRule(what_rule);
      if (what_rule<6400) return; }
  if (what_rule>=6400 && what_rule<6656)
    { R25.NextRule(what_rule);
      if (what_rule<6656) return; }
  if (what_rule>=6656 && what_rule<6912)
    { R26.NextRule(what_rule);
      if (what_rule<6912) return; }
  if (what_rule>=6912 && what_rule<7168)
    { R27.NextRule(what_rule);
      if (what_rule<7168) return; }
  if (what_rule>=7168 && what_rule<7424)
    { R28.NextRule(what_rule);
      if (what_rule<7424) return; }
  if (what_rule>=7424 && what_rule<7680)
    { R29.NextRule(what_rule);
      if (what_rule<7680) return; }
  if (what_rule>=7680 && what_rule<7936)
    { R30.NextRule(what_rule);
      if (what_rule<7936) return; }
  if (what_rule>=7936 && what_rule<8192)
    { R31.NextRule(what_rule);
      if (what_rule<8192) return; }
  if (what_rule>=8192 && what_rule<8448)
    { R32.NextRule(what_rule);
      if (what_rule<8448) return; }
  if (what_rule>=8448 && what_rule<8704)
    { R33.NextRule(what_rule);
      if (what_rule<8704) return; }
  if (what_rule>=8704 && what_rule<8960)
    { R34.NextRule(what_rule);
      if (what_rule<8960) return; }
  if (what_rule>=8960 && what_rule<9984)
    { R35.NextRule(what_rule);
      if (what_rule<9984) return; }
  if (what_rule>=9984 && what_rule<11008)
    { R36.NextRule(what_rule);
      if (what_rule<11008) return; }
  if (what_rule>=11008 && what_rule<12032)
    { R37.NextRule(what_rule);
      if (what_rule<12032) return; }
  if (what_rule>=12032 && what_rule<13056)
    { R38.NextRule(what_rule);
      if (what_rule<13056) return; }
  if (what_rule>=13056 && what_rule<14080)
    { R39.NextRule(what_rule);
      if (what_rule<14080) return; }
  if (what_rule>=14080 && what_rule<15104)
    { R40.NextRule(what_rule);
      if (what_rule<15104) return; }
  if (what_rule>=15104 && what_rule<16128)
    { R41.NextRule(what_rule);
      if (what_rule<16128) return; }
  if (what_rule>=16128 && what_rule<17152)
    { R42.NextRule(what_rule);
      if (what_rule<17152) return; }
  if (what_rule>=17152 && what_rule<18176)
    { R43.NextRule(what_rule);
      if (what_rule<18176) return; }
  if (what_rule>=18176 && what_rule<19200)
    { R44.NextRule(what_rule);
      if (what_rule<19200) return; }
  if (what_rule>=19200 && what_rule<20224)
    { R45.NextRule(what_rule);
      if (what_rule<20224) return; }
  if (what_rule>=20224 && what_rule<21248)
    { R46.NextRule(what_rule);
      if (what_rule<21248) return; }
  if (what_rule>=21248 && what_rule<22272)
    { R47.NextRule(what_rule);
      if (what_rule<22272) return; }
  if (what_rule>=22272 && what_rule<23296)
    { R48.NextRule(what_rule);
      if (what_rule<23296) return; }
  if (what_rule>=23296 && what_rule<24320)
    { R49.NextRule(what_rule);
      if (what_rule<24320) return; }
  if (what_rule>=24320 && what_rule<25344)
    { R50.NextRule(what_rule);
      if (what_rule<25344) return; }
  if (what_rule>=25344 && what_rule<26368)
    { R51.NextRule(what_rule);
      if (what_rule<26368) return; }
  if (what_rule>=26368 && what_rule<27392)
    { R52.NextRule(what_rule);
      if (what_rule<27392) return; }
  if (what_rule>=27392 && what_rule<28416)
    { R53.NextRule(what_rule);
      if (what_rule<28416) return; }
  if (what_rule>=28416 && what_rule<29440)
    { R54.NextRule(what_rule);
      if (what_rule<29440) return; }
  if (what_rule>=29440 && what_rule<33536)
    { R55.NextRule(what_rule);
      if (what_rule<33536) return; }
  if (what_rule>=33536 && what_rule<37632)
    { R56.NextRule(what_rule);
      if (what_rule<37632) return; }
  if (what_rule>=37632 && what_rule<41728)
    { R57.NextRule(what_rule);
      if (what_rule<41728) return; }
  if (what_rule>=41728 && what_rule<45824)
    { R58.NextRule(what_rule);
      if (what_rule<45824) return; }
  if (what_rule>=45824 && what_rule<49920)
    { R59.NextRule(what_rule);
      if (what_rule<49920) return; }
  if (what_rule>=49920 && what_rule<54016)
    { R60.NextRule(what_rule);
      if (what_rule<54016) return; }
  if (what_rule>=54016 && what_rule<58112)
    { R61.NextRule(what_rule);
      if (what_rule<58112) return; }
  if (what_rule>=58112 && what_rule<62208)
    { R62.NextRule(what_rule);
      if (what_rule<62208) return; }
  if (what_rule>=62208 && what_rule<66304)
    { R63.NextRule(what_rule);
      if (what_rule<66304) return; }
  if (what_rule>=66304 && what_rule<70400)
    { R64.NextRule(what_rule);
      if (what_rule<70400) return; }
  if (what_rule>=70400 && what_rule<86784)
    { R65.NextRule(what_rule);
      if (what_rule<86784) return; }
  if (what_rule>=86784 && what_rule<103168)
    { R66.NextRule(what_rule);
      if (what_rule<103168) return; }
  if (what_rule>=103168 && what_rule<119552)
    { R67.NextRule(what_rule);
      if (what_rule<119552) return; }
  if (what_rule>=119552 && what_rule<135936)
    { R68.NextRule(what_rule);
      if (what_rule<135936) return; }
  if (what_rule>=135936 && what_rule<201472)
    { R69.NextRule(what_rule);
      if (what_rule<201472) return; }
  if (what_rule>=201472 && what_rule<201536)
    { R70.NextRule(what_rule);
      if (what_rule<201536) return; }
  if (what_rule>=201536 && what_rule<201600)
    { R71.NextRule(what_rule);
      if (what_rule<201600) return; }
  if (what_rule>=201600 && what_rule<201664)
    { R72.NextRule(what_rule);
      if (what_rule<201664) return; }
  if (what_rule>=201664 && what_rule<201728)
    { R73.NextRule(what_rule);
      if (what_rule<201728) return; }
  if (what_rule>=201728 && what_rule<201792)
    { R74.NextRule(what_rule);
      if (what_rule<201792) return; }
  if (what_rule>=201792 && what_rule<201856)
    { R75.NextRule(what_rule);
      if (what_rule<201856) return; }
  if (what_rule>=201856 && what_rule<201920)
    { R76.NextRule(what_rule);
      if (what_rule<201920) return; }
  if (what_rule>=201920 && what_rule<201984)
    { R77.NextRule(what_rule);
      if (what_rule<201984) return; }
  if (what_rule>=201984 && what_rule<202048)
    { R78.NextRule(what_rule);
      if (what_rule<202048) return; }
  if (what_rule>=202048 && what_rule<202112)
    { R79.NextRule(what_rule);
      if (what_rule<202112) return; }
  if (what_rule>=202112 && what_rule<202176)
    { R80.NextRule(what_rule);
      if (what_rule<202176) return; }
  if (what_rule>=202176 && what_rule<202240)
    { R81.NextRule(what_rule);
      if (what_rule<202240) return; }
  if (what_rule>=202240 && what_rule<202304)
    { R82.NextRule(what_rule);
      if (what_rule<202304) return; }
  if (what_rule>=202304 && what_rule<202368)
    { R83.NextRule(what_rule);
      if (what_rule<202368) return; }
  if (what_rule>=202368 && what_rule<202432)
    { R84.NextRule(what_rule);
      if (what_rule<202432) return; }
  if (what_rule>=202432 && what_rule<202496)
    { R85.NextRule(what_rule);
      if (what_rule<202496) return; }
  if (what_rule>=202496 && what_rule<202560)
    { R86.NextRule(what_rule);
      if (what_rule<202560) return; }
  if (what_rule>=202560 && what_rule<202624)
    { R87.NextRule(what_rule);
      if (what_rule<202624) return; }
  if (what_rule>=202624 && what_rule<202688)
    { R88.NextRule(what_rule);
      if (what_rule<202688) return; }
  if (what_rule>=202688 && what_rule<202752)
    { R89.NextRule(what_rule);
      if (what_rule<202752) return; }
  if (what_rule>=202752 && what_rule<203008)
    { R90.NextRule(what_rule);
      if (what_rule<203008) return; }
  if (what_rule>=203008 && what_rule<203264)
    { R91.NextRule(what_rule);
      if (what_rule<203264) return; }
  if (what_rule>=203264 && what_rule<203520)
    { R92.NextRule(what_rule);
      if (what_rule<203520) return; }
  if (what_rule>=203520 && what_rule<203776)
    { R93.NextRule(what_rule);
      if (what_rule<203776) return; }
  if (what_rule>=203776 && what_rule<204032)
    { R94.NextRule(what_rule);
      if (what_rule<204032) return; }
  if (what_rule>=204032 && what_rule<204288)
    { R95.NextRule(what_rule);
      if (what_rule<204288) return; }
  if (what_rule>=204288 && what_rule<204544)
    { R96.NextRule(what_rule);
      if (what_rule<204544) return; }
  if (what_rule>=204544 && what_rule<204800)
    { R97.NextRule(what_rule);
      if (what_rule<204800) return; }
  if (what_rule>=204800 && what_rule<205056)
    { R98.NextRule(what_rule);
      if (what_rule<205056) return; }
  if (what_rule>=205056 && what_rule<205312)
    { R99.NextRule(what_rule);
      if (what_rule<205312) return; }
  if (what_rule>=205312 && what_rule<206336)
    { R100.NextRule(what_rule);
      if (what_rule<206336) return; }
  if (what_rule>=206336 && what_rule<207360)
    { R101.NextRule(what_rule);
      if (what_rule<207360) return; }
  if (what_rule>=207360 && what_rule<208384)
    { R102.NextRule(what_rule);
      if (what_rule<208384) return; }
  if (what_rule>=208384 && what_rule<209408)
    { R103.NextRule(what_rule);
      if (what_rule<209408) return; }
  if (what_rule>=209408 && what_rule<213504)
    { R104.NextRule(what_rule);
      if (what_rule<213504) return; }
  if (what_rule>=213504 && what_rule<213520)
    { R105.NextRule(what_rule);
      if (what_rule<213520) return; }
  if (what_rule>=213520 && what_rule<213536)
    { R106.NextRule(what_rule);
      if (what_rule<213536) return; }
  if (what_rule>=213536 && what_rule<213552)
    { R107.NextRule(what_rule);
      if (what_rule<213552) return; }
  if (what_rule>=213552 && what_rule<213568)
    { R108.NextRule(what_rule);
      if (what_rule<213568) return; }
  if (what_rule>=213568 && what_rule<213584)
    { R109.NextRule(what_rule);
      if (what_rule<213584) return; }
  if (what_rule>=213584 && what_rule<213600)
    { R110.NextRule(what_rule);
      if (what_rule<213600) return; }
  if (what_rule>=213600 && what_rule<213616)
    { R111.NextRule(what_rule);
      if (what_rule<213616) return; }
  if (what_rule>=213616 && what_rule<213632)
    { R112.NextRule(what_rule);
      if (what_rule<213632) return; }
  if (what_rule>=213632 && what_rule<213648)
    { R113.NextRule(what_rule);
      if (what_rule<213648) return; }
  if (what_rule>=213648 && what_rule<213664)
    { R114.NextRule(what_rule);
      if (what_rule<213664) return; }
  if (what_rule>=213664 && what_rule<213728)
    { R115.NextRule(what_rule);
      if (what_rule<213728) return; }
  if (what_rule>=213728 && what_rule<213792)
    { R116.NextRule(what_rule);
      if (what_rule<213792) return; }
  if (what_rule>=213792 && what_rule<213856)
    { R117.NextRule(what_rule);
      if (what_rule<213856) return; }
  if (what_rule>=213856 && what_rule<213920)
    { R118.NextRule(what_rule);
      if (what_rule<213920) return; }
  if (what_rule>=213920 && what_rule<214176)
    { R119.NextRule(what_rule);
      if (what_rule<214176) return; }
  if (what_rule>=214176 && what_rule<214180)
    { R120.NextRule(what_rule);
      if (what_rule<214180) return; }
  if (what_rule>=214180 && what_rule<214184)
    { R121.NextRule(what_rule);
      if (what_rule<214184) return; }
  if (what_rule>=214184 && what_rule<214188)
    { R122.NextRule(what_rule);
      if (what_rule<214188) return; }
  if (what_rule>=214188 && what_rule<214192)
    { R123.NextRule(what_rule);
      if (what_rule<214192) return; }
  if (what_rule>=214192 && what_rule<214208)
    { R124.NextRule(what_rule);
      if (what_rule<214208) return; }
}
bool Condition(unsigned r)
{
  category = CONDITION;
  if (r<=255) return R0.Condition(r-0);
  if (r>=256 && r<=511) return R1.Condition(r-256);
  if (r>=512 && r<=767) return R2.Condition(r-512);
  if (r>=768 && r<=1023) return R3.Condition(r-768);
  if (r>=1024 && r<=1279) return R4.Condition(r-1024);
  if (r>=1280 && r<=1535) return R5.Condition(r-1280);
  if (r>=1536 && r<=1791) return R6.Condition(r-1536);
  if (r>=1792 && r<=2047) return R7.Condition(r-1792);
  if (r>=2048 && r<=2303) return R8.Condition(r-2048);
  if (r>=2304 && r<=2559) return R9.Condition(r-2304);
  if (r>=2560 && r<=2815) return R10.Condition(r-2560);
  if (r>=2816 && r<=3071) return R11.Condition(r-2816);
  if (r>=3072 && r<=3327) return R12.Condition(r-3072);
  if (r>=3328 && r<=3583) return R13.Condition(r-3328);
  if (r>=3584 && r<=3839) return R14.Condition(r-3584);
  if (r>=3840 && r<=4095) return R15.Condition(r-3840);
  if (r>=4096 && r<=4351) return R16.Condition(r-4096);
  if (r>=4352 && r<=4607) return R17.Condition(r-4352);
  if (r>=4608 && r<=4863) return R18.Condition(r-4608);
  if (r>=4864 && r<=5119) return R19.Condition(r-4864);
  if (r>=5120 && r<=5375) return R20.Condition(r-5120);
  if (r>=5376 && r<=5631) return R21.Condition(r-5376);
  if (r>=5632 && r<=5887) return R22.Condition(r-5632);
  if (r>=5888 && r<=6143) return R23.Condition(r-5888);
  if (r>=6144 && r<=6399) return R24.Condition(r-6144);
  if (r>=6400 && r<=6655) return R25.Condition(r-6400);
  if (r>=6656 && r<=6911) return R26.Condition(r-6656);
  if (r>=6912 && r<=7167) return R27.Condition(r-6912);
  if (r>=7168 && r<=7423) return R28.Condition(r-7168);
  if (r>=7424 && r<=7679) return R29.Condition(r-7424);
  if (r>=7680 && r<=7935) return R30.Condition(r-7680);
  if (r>=7936 && r<=8191) return R31.Condition(r-7936);
  if (r>=8192 && r<=8447) return R32.Condition(r-8192);
  if (r>=8448 && r<=8703) return R33.Condition(r-8448);
  if (r>=8704 && r<=8959) return R34.Condition(r-8704);
  if (r>=8960 && r<=9983) return R35.Condition(r-8960);
  if (r>=9984 && r<=11007) return R36.Condition(r-9984);
  if (r>=11008 && r<=12031) return R37.Condition(r-11008);
  if (r>=12032 && r<=13055) return R38.Condition(r-12032);
  if (r>=13056 && r<=14079) return R39.Condition(r-13056);
  if (r>=14080 && r<=15103) return R40.Condition(r-14080);
  if (r>=15104 && r<=16127) return R41.Condition(r-15104);
  if (r>=16128 && r<=17151) return R42.Condition(r-16128);
  if (r>=17152 && r<=18175) return R43.Condition(r-17152);
  if (r>=18176 && r<=19199) return R44.Condition(r-18176);
  if (r>=19200 && r<=20223) return R45.Condition(r-19200);
  if (r>=20224 && r<=21247) return R46.Condition(r-20224);
  if (r>=21248 && r<=22271) return R47.Condition(r-21248);
  if (r>=22272 && r<=23295) return R48.Condition(r-22272);
  if (r>=23296 && r<=24319) return R49.Condition(r-23296);
  if (r>=24320 && r<=25343) return R50.Condition(r-24320);
  if (r>=25344 && r<=26367) return R51.Condition(r-25344);
  if (r>=26368 && r<=27391) return R52.Condition(r-26368);
  if (r>=27392 && r<=28415) return R53.Condition(r-27392);
  if (r>=28416 && r<=29439) return R54.Condition(r-28416);
  if (r>=29440 && r<=33535) return R55.Condition(r-29440);
  if (r>=33536 && r<=37631) return R56.Condition(r-33536);
  if (r>=37632 && r<=41727) return R57.Condition(r-37632);
  if (r>=41728 && r<=45823) return R58.Condition(r-41728);
  if (r>=45824 && r<=49919) return R59.Condition(r-45824);
  if (r>=49920 && r<=54015) return R60.Condition(r-49920);
  if (r>=54016 && r<=58111) return R61.Condition(r-54016);
  if (r>=58112 && r<=62207) return R62.Condition(r-58112);
  if (r>=62208 && r<=66303) return R63.Condition(r-62208);
  if (r>=66304 && r<=70399) return R64.Condition(r-66304);
  if (r>=70400 && r<=86783) return R65.Condition(r-70400);
  if (r>=86784 && r<=103167) return R66.Condition(r-86784);
  if (r>=103168 && r<=119551) return R67.Condition(r-103168);
  if (r>=119552 && r<=135935) return R68.Condition(r-119552);
  if (r>=135936 && r<=201471) return R69.Condition(r-135936);
  if (r>=201472 && r<=201535) return R70.Condition(r-201472);
  if (r>=201536 && r<=201599) return R71.Condition(r-201536);
  if (r>=201600 && r<=201663) return R72.Condition(r-201600);
  if (r>=201664 && r<=201727) return R73.Condition(r-201664);
  if (r>=201728 && r<=201791) return R74.Condition(r-201728);
  if (r>=201792 && r<=201855) return R75.Condition(r-201792);
  if (r>=201856 && r<=201919) return R76.Condition(r-201856);
  if (r>=201920 && r<=201983) return R77.Condition(r-201920);
  if (r>=201984 && r<=202047) return R78.Condition(r-201984);
  if (r>=202048 && r<=202111) return R79.Condition(r-202048);
  if (r>=202112 && r<=202175) return R80.Condition(r-202112);
  if (r>=202176 && r<=202239) return R81.Condition(r-202176);
  if (r>=202240 && r<=202303) return R82.Condition(r-202240);
  if (r>=202304 && r<=202367) return R83.Condition(r-202304);
  if (r>=202368 && r<=202431) return R84.Condition(r-202368);
  if (r>=202432 && r<=202495) return R85.Condition(r-202432);
  if (r>=202496 && r<=202559) return R86.Condition(r-202496);
  if (r>=202560 && r<=202623) return R87.Condition(r-202560);
  if (r>=202624 && r<=202687) return R88.Condition(r-202624);
  if (r>=202688 && r<=202751) return R89.Condition(r-202688);
  if (r>=202752 && r<=203007) return R90.Condition(r-202752);
  if (r>=203008 && r<=203263) return R91.Condition(r-203008);
  if (r>=203264 && r<=203519) return R92.Condition(r-203264);
  if (r>=203520 && r<=203775) return R93.Condition(r-203520);
  if (r>=203776 && r<=204031) return R94.Condition(r-203776);
  if (r>=204032 && r<=204287) return R95.Condition(r-204032);
  if (r>=204288 && r<=204543) return R96.Condition(r-204288);
  if (r>=204544 && r<=204799) return R97.Condition(r-204544);
  if (r>=204800 && r<=205055) return R98.Condition(r-204800);
  if (r>=205056 && r<=205311) return R99.Condition(r-205056);
  if (r>=205312 && r<=206335) return R100.Condition(r-205312);
  if (r>=206336 && r<=207359) return R101.Condition(r-206336);
  if (r>=207360 && r<=208383) return R102.Condition(r-207360);
  if (r>=208384 && r<=209407) return R103.Condition(r-208384);
  if (r>=209408 && r<=213503) return R104.Condition(r-209408);
  if (r>=213504 && r<=213519) return R105.Condition(r-213504);
  if (r>=213520 && r<=213535) return R106.Condition(r-213520);
  if (r>=213536 && r<=213551) return R107.Condition(r-213536);
  if (r>=213552 && r<=213567) return R108.Condition(r-213552);
  if (r>=213568 && r<=213583) return R109.Condition(r-213568);
  if (r>=213584 && r<=213599) return R110.Condition(r-213584);
  if (r>=213600 && r<=213615) return R111.Condition(r-213600);
  if (r>=213616 && r<=213631) return R112.Condition(r-213616);
  if (r>=213632 && r<=213647) return R113.Condition(r-213632);
  if (r>=213648 && r<=213663) return R114.Condition(r-213648);
  if (r>=213664 && r<=213727) return R115.Condition(r-213664);
  if (r>=213728 && r<=213791) return R116.Condition(r-213728);
  if (r>=213792 && r<=213855) return R117.Condition(r-213792);
  if (r>=213856 && r<=213919) return R118.Condition(r-213856);
  if (r>=213920 && r<=214175) return R119.Condition(r-213920);
  if (r>=214176 && r<=214179) return R120.Condition(r-214176);
  if (r>=214180 && r<=214183) return R121.Condition(r-214180);
  if (r>=214184 && r<=214187) return R122.Condition(r-214184);
  if (r>=214188 && r<=214191) return R123.Condition(r-214188);
  if (r>=214192 && r<=214207) return R124.Condition(r-214192);
Error.Notrace("Internal: NextStateGenerator -- checking condition for nonexisting rule.");
return 0;}
void Code(unsigned r)
{
  if (r<=255) { R0.Code(r-0); return; } 
  if (r>=256 && r<=511) { R1.Code(r-256); return; } 
  if (r>=512 && r<=767) { R2.Code(r-512); return; } 
  if (r>=768 && r<=1023) { R3.Code(r-768); return; } 
  if (r>=1024 && r<=1279) { R4.Code(r-1024); return; } 
  if (r>=1280 && r<=1535) { R5.Code(r-1280); return; } 
  if (r>=1536 && r<=1791) { R6.Code(r-1536); return; } 
  if (r>=1792 && r<=2047) { R7.Code(r-1792); return; } 
  if (r>=2048 && r<=2303) { R8.Code(r-2048); return; } 
  if (r>=2304 && r<=2559) { R9.Code(r-2304); return; } 
  if (r>=2560 && r<=2815) { R10.Code(r-2560); return; } 
  if (r>=2816 && r<=3071) { R11.Code(r-2816); return; } 
  if (r>=3072 && r<=3327) { R12.Code(r-3072); return; } 
  if (r>=3328 && r<=3583) { R13.Code(r-3328); return; } 
  if (r>=3584 && r<=3839) { R14.Code(r-3584); return; } 
  if (r>=3840 && r<=4095) { R15.Code(r-3840); return; } 
  if (r>=4096 && r<=4351) { R16.Code(r-4096); return; } 
  if (r>=4352 && r<=4607) { R17.Code(r-4352); return; } 
  if (r>=4608 && r<=4863) { R18.Code(r-4608); return; } 
  if (r>=4864 && r<=5119) { R19.Code(r-4864); return; } 
  if (r>=5120 && r<=5375) { R20.Code(r-5120); return; } 
  if (r>=5376 && r<=5631) { R21.Code(r-5376); return; } 
  if (r>=5632 && r<=5887) { R22.Code(r-5632); return; } 
  if (r>=5888 && r<=6143) { R23.Code(r-5888); return; } 
  if (r>=6144 && r<=6399) { R24.Code(r-6144); return; } 
  if (r>=6400 && r<=6655) { R25.Code(r-6400); return; } 
  if (r>=6656 && r<=6911) { R26.Code(r-6656); return; } 
  if (r>=6912 && r<=7167) { R27.Code(r-6912); return; } 
  if (r>=7168 && r<=7423) { R28.Code(r-7168); return; } 
  if (r>=7424 && r<=7679) { R29.Code(r-7424); return; } 
  if (r>=7680 && r<=7935) { R30.Code(r-7680); return; } 
  if (r>=7936 && r<=8191) { R31.Code(r-7936); return; } 
  if (r>=8192 && r<=8447) { R32.Code(r-8192); return; } 
  if (r>=8448 && r<=8703) { R33.Code(r-8448); return; } 
  if (r>=8704 && r<=8959) { R34.Code(r-8704); return; } 
  if (r>=8960 && r<=9983) { R35.Code(r-8960); return; } 
  if (r>=9984 && r<=11007) { R36.Code(r-9984); return; } 
  if (r>=11008 && r<=12031) { R37.Code(r-11008); return; } 
  if (r>=12032 && r<=13055) { R38.Code(r-12032); return; } 
  if (r>=13056 && r<=14079) { R39.Code(r-13056); return; } 
  if (r>=14080 && r<=15103) { R40.Code(r-14080); return; } 
  if (r>=15104 && r<=16127) { R41.Code(r-15104); return; } 
  if (r>=16128 && r<=17151) { R42.Code(r-16128); return; } 
  if (r>=17152 && r<=18175) { R43.Code(r-17152); return; } 
  if (r>=18176 && r<=19199) { R44.Code(r-18176); return; } 
  if (r>=19200 && r<=20223) { R45.Code(r-19200); return; } 
  if (r>=20224 && r<=21247) { R46.Code(r-20224); return; } 
  if (r>=21248 && r<=22271) { R47.Code(r-21248); return; } 
  if (r>=22272 && r<=23295) { R48.Code(r-22272); return; } 
  if (r>=23296 && r<=24319) { R49.Code(r-23296); return; } 
  if (r>=24320 && r<=25343) { R50.Code(r-24320); return; } 
  if (r>=25344 && r<=26367) { R51.Code(r-25344); return; } 
  if (r>=26368 && r<=27391) { R52.Code(r-26368); return; } 
  if (r>=27392 && r<=28415) { R53.Code(r-27392); return; } 
  if (r>=28416 && r<=29439) { R54.Code(r-28416); return; } 
  if (r>=29440 && r<=33535) { R55.Code(r-29440); return; } 
  if (r>=33536 && r<=37631) { R56.Code(r-33536); return; } 
  if (r>=37632 && r<=41727) { R57.Code(r-37632); return; } 
  if (r>=41728 && r<=45823) { R58.Code(r-41728); return; } 
  if (r>=45824 && r<=49919) { R59.Code(r-45824); return; } 
  if (r>=49920 && r<=54015) { R60.Code(r-49920); return; } 
  if (r>=54016 && r<=58111) { R61.Code(r-54016); return; } 
  if (r>=58112 && r<=62207) { R62.Code(r-58112); return; } 
  if (r>=62208 && r<=66303) { R63.Code(r-62208); return; } 
  if (r>=66304 && r<=70399) { R64.Code(r-66304); return; } 
  if (r>=70400 && r<=86783) { R65.Code(r-70400); return; } 
  if (r>=86784 && r<=103167) { R66.Code(r-86784); return; } 
  if (r>=103168 && r<=119551) { R67.Code(r-103168); return; } 
  if (r>=119552 && r<=135935) { R68.Code(r-119552); return; } 
  if (r>=135936 && r<=201471) { R69.Code(r-135936); return; } 
  if (r>=201472 && r<=201535) { R70.Code(r-201472); return; } 
  if (r>=201536 && r<=201599) { R71.Code(r-201536); return; } 
  if (r>=201600 && r<=201663) { R72.Code(r-201600); return; } 
  if (r>=201664 && r<=201727) { R73.Code(r-201664); return; } 
  if (r>=201728 && r<=201791) { R74.Code(r-201728); return; } 
  if (r>=201792 && r<=201855) { R75.Code(r-201792); return; } 
  if (r>=201856 && r<=201919) { R76.Code(r-201856); return; } 
  if (r>=201920 && r<=201983) { R77.Code(r-201920); return; } 
  if (r>=201984 && r<=202047) { R78.Code(r-201984); return; } 
  if (r>=202048 && r<=202111) { R79.Code(r-202048); return; } 
  if (r>=202112 && r<=202175) { R80.Code(r-202112); return; } 
  if (r>=202176 && r<=202239) { R81.Code(r-202176); return; } 
  if (r>=202240 && r<=202303) { R82.Code(r-202240); return; } 
  if (r>=202304 && r<=202367) { R83.Code(r-202304); return; } 
  if (r>=202368 && r<=202431) { R84.Code(r-202368); return; } 
  if (r>=202432 && r<=202495) { R85.Code(r-202432); return; } 
  if (r>=202496 && r<=202559) { R86.Code(r-202496); return; } 
  if (r>=202560 && r<=202623) { R87.Code(r-202560); return; } 
  if (r>=202624 && r<=202687) { R88.Code(r-202624); return; } 
  if (r>=202688 && r<=202751) { R89.Code(r-202688); return; } 
  if (r>=202752 && r<=203007) { R90.Code(r-202752); return; } 
  if (r>=203008 && r<=203263) { R91.Code(r-203008); return; } 
  if (r>=203264 && r<=203519) { R92.Code(r-203264); return; } 
  if (r>=203520 && r<=203775) { R93.Code(r-203520); return; } 
  if (r>=203776 && r<=204031) { R94.Code(r-203776); return; } 
  if (r>=204032 && r<=204287) { R95.Code(r-204032); return; } 
  if (r>=204288 && r<=204543) { R96.Code(r-204288); return; } 
  if (r>=204544 && r<=204799) { R97.Code(r-204544); return; } 
  if (r>=204800 && r<=205055) { R98.Code(r-204800); return; } 
  if (r>=205056 && r<=205311) { R99.Code(r-205056); return; } 
  if (r>=205312 && r<=206335) { R100.Code(r-205312); return; } 
  if (r>=206336 && r<=207359) { R101.Code(r-206336); return; } 
  if (r>=207360 && r<=208383) { R102.Code(r-207360); return; } 
  if (r>=208384 && r<=209407) { R103.Code(r-208384); return; } 
  if (r>=209408 && r<=213503) { R104.Code(r-209408); return; } 
  if (r>=213504 && r<=213519) { R105.Code(r-213504); return; } 
  if (r>=213520 && r<=213535) { R106.Code(r-213520); return; } 
  if (r>=213536 && r<=213551) { R107.Code(r-213536); return; } 
  if (r>=213552 && r<=213567) { R108.Code(r-213552); return; } 
  if (r>=213568 && r<=213583) { R109.Code(r-213568); return; } 
  if (r>=213584 && r<=213599) { R110.Code(r-213584); return; } 
  if (r>=213600 && r<=213615) { R111.Code(r-213600); return; } 
  if (r>=213616 && r<=213631) { R112.Code(r-213616); return; } 
  if (r>=213632 && r<=213647) { R113.Code(r-213632); return; } 
  if (r>=213648 && r<=213663) { R114.Code(r-213648); return; } 
  if (r>=213664 && r<=213727) { R115.Code(r-213664); return; } 
  if (r>=213728 && r<=213791) { R116.Code(r-213728); return; } 
  if (r>=213792 && r<=213855) { R117.Code(r-213792); return; } 
  if (r>=213856 && r<=213919) { R118.Code(r-213856); return; } 
  if (r>=213920 && r<=214175) { R119.Code(r-213920); return; } 
  if (r>=214176 && r<=214179) { R120.Code(r-214176); return; } 
  if (r>=214180 && r<=214183) { R121.Code(r-214180); return; } 
  if (r>=214184 && r<=214187) { R122.Code(r-214184); return; } 
  if (r>=214188 && r<=214191) { R123.Code(r-214188); return; } 
  if (r>=214192 && r<=214207) { R124.Code(r-214192); return; } 
}
int Priority(unsigned short r)
{
  if (r<=255) { return R0.Priority(); } 
  if (r>=256 && r<=511) { return R1.Priority(); } 
  if (r>=512 && r<=767) { return R2.Priority(); } 
  if (r>=768 && r<=1023) { return R3.Priority(); } 
  if (r>=1024 && r<=1279) { return R4.Priority(); } 
  if (r>=1280 && r<=1535) { return R5.Priority(); } 
  if (r>=1536 && r<=1791) { return R6.Priority(); } 
  if (r>=1792 && r<=2047) { return R7.Priority(); } 
  if (r>=2048 && r<=2303) { return R8.Priority(); } 
  if (r>=2304 && r<=2559) { return R9.Priority(); } 
  if (r>=2560 && r<=2815) { return R10.Priority(); } 
  if (r>=2816 && r<=3071) { return R11.Priority(); } 
  if (r>=3072 && r<=3327) { return R12.Priority(); } 
  if (r>=3328 && r<=3583) { return R13.Priority(); } 
  if (r>=3584 && r<=3839) { return R14.Priority(); } 
  if (r>=3840 && r<=4095) { return R15.Priority(); } 
  if (r>=4096 && r<=4351) { return R16.Priority(); } 
  if (r>=4352 && r<=4607) { return R17.Priority(); } 
  if (r>=4608 && r<=4863) { return R18.Priority(); } 
  if (r>=4864 && r<=5119) { return R19.Priority(); } 
  if (r>=5120 && r<=5375) { return R20.Priority(); } 
  if (r>=5376 && r<=5631) { return R21.Priority(); } 
  if (r>=5632 && r<=5887) { return R22.Priority(); } 
  if (r>=5888 && r<=6143) { return R23.Priority(); } 
  if (r>=6144 && r<=6399) { return R24.Priority(); } 
  if (r>=6400 && r<=6655) { return R25.Priority(); } 
  if (r>=6656 && r<=6911) { return R26.Priority(); } 
  if (r>=6912 && r<=7167) { return R27.Priority(); } 
  if (r>=7168 && r<=7423) { return R28.Priority(); } 
  if (r>=7424 && r<=7679) { return R29.Priority(); } 
  if (r>=7680 && r<=7935) { return R30.Priority(); } 
  if (r>=7936 && r<=8191) { return R31.Priority(); } 
  if (r>=8192 && r<=8447) { return R32.Priority(); } 
  if (r>=8448 && r<=8703) { return R33.Priority(); } 
  if (r>=8704 && r<=8959) { return R34.Priority(); } 
  if (r>=8960 && r<=9983) { return R35.Priority(); } 
  if (r>=9984 && r<=11007) { return R36.Priority(); } 
  if (r>=11008 && r<=12031) { return R37.Priority(); } 
  if (r>=12032 && r<=13055) { return R38.Priority(); } 
  if (r>=13056 && r<=14079) { return R39.Priority(); } 
  if (r>=14080 && r<=15103) { return R40.Priority(); } 
  if (r>=15104 && r<=16127) { return R41.Priority(); } 
  if (r>=16128 && r<=17151) { return R42.Priority(); } 
  if (r>=17152 && r<=18175) { return R43.Priority(); } 
  if (r>=18176 && r<=19199) { return R44.Priority(); } 
  if (r>=19200 && r<=20223) { return R45.Priority(); } 
  if (r>=20224 && r<=21247) { return R46.Priority(); } 
  if (r>=21248 && r<=22271) { return R47.Priority(); } 
  if (r>=22272 && r<=23295) { return R48.Priority(); } 
  if (r>=23296 && r<=24319) { return R49.Priority(); } 
  if (r>=24320 && r<=25343) { return R50.Priority(); } 
  if (r>=25344 && r<=26367) { return R51.Priority(); } 
  if (r>=26368 && r<=27391) { return R52.Priority(); } 
  if (r>=27392 && r<=28415) { return R53.Priority(); } 
  if (r>=28416 && r<=29439) { return R54.Priority(); } 
  if (r>=29440 && r<=33535) { return R55.Priority(); } 
  if (r>=33536 && r<=37631) { return R56.Priority(); } 
  if (r>=37632 && r<=41727) { return R57.Priority(); } 
  if (r>=41728 && r<=45823) { return R58.Priority(); } 
  if (r>=45824 && r<=49919) { return R59.Priority(); } 
  if (r>=49920 && r<=54015) { return R60.Priority(); } 
  if (r>=54016 && r<=58111) { return R61.Priority(); } 
  if (r>=58112 && r<=62207) { return R62.Priority(); } 
  if (r>=62208 && r<=66303) { return R63.Priority(); } 
  if (r>=66304 && r<=70399) { return R64.Priority(); } 
  if (r>=70400 && r<=86783) { return R65.Priority(); } 
  if (r>=86784 && r<=103167) { return R66.Priority(); } 
  if (r>=103168 && r<=119551) { return R67.Priority(); } 
  if (r>=119552 && r<=135935) { return R68.Priority(); } 
  if (r>=135936 && r<=201471) { return R69.Priority(); } 
  if (r>=201472 && r<=201535) { return R70.Priority(); } 
  if (r>=201536 && r<=201599) { return R71.Priority(); } 
  if (r>=201600 && r<=201663) { return R72.Priority(); } 
  if (r>=201664 && r<=201727) { return R73.Priority(); } 
  if (r>=201728 && r<=201791) { return R74.Priority(); } 
  if (r>=201792 && r<=201855) { return R75.Priority(); } 
  if (r>=201856 && r<=201919) { return R76.Priority(); } 
  if (r>=201920 && r<=201983) { return R77.Priority(); } 
  if (r>=201984 && r<=202047) { return R78.Priority(); } 
  if (r>=202048 && r<=202111) { return R79.Priority(); } 
  if (r>=202112 && r<=202175) { return R80.Priority(); } 
  if (r>=202176 && r<=202239) { return R81.Priority(); } 
  if (r>=202240 && r<=202303) { return R82.Priority(); } 
  if (r>=202304 && r<=202367) { return R83.Priority(); } 
  if (r>=202368 && r<=202431) { return R84.Priority(); } 
  if (r>=202432 && r<=202495) { return R85.Priority(); } 
  if (r>=202496 && r<=202559) { return R86.Priority(); } 
  if (r>=202560 && r<=202623) { return R87.Priority(); } 
  if (r>=202624 && r<=202687) { return R88.Priority(); } 
  if (r>=202688 && r<=202751) { return R89.Priority(); } 
  if (r>=202752 && r<=203007) { return R90.Priority(); } 
  if (r>=203008 && r<=203263) { return R91.Priority(); } 
  if (r>=203264 && r<=203519) { return R92.Priority(); } 
  if (r>=203520 && r<=203775) { return R93.Priority(); } 
  if (r>=203776 && r<=204031) { return R94.Priority(); } 
  if (r>=204032 && r<=204287) { return R95.Priority(); } 
  if (r>=204288 && r<=204543) { return R96.Priority(); } 
  if (r>=204544 && r<=204799) { return R97.Priority(); } 
  if (r>=204800 && r<=205055) { return R98.Priority(); } 
  if (r>=205056 && r<=205311) { return R99.Priority(); } 
  if (r>=205312 && r<=206335) { return R100.Priority(); } 
  if (r>=206336 && r<=207359) { return R101.Priority(); } 
  if (r>=207360 && r<=208383) { return R102.Priority(); } 
  if (r>=208384 && r<=209407) { return R103.Priority(); } 
  if (r>=209408 && r<=213503) { return R104.Priority(); } 
  if (r>=213504 && r<=213519) { return R105.Priority(); } 
  if (r>=213520 && r<=213535) { return R106.Priority(); } 
  if (r>=213536 && r<=213551) { return R107.Priority(); } 
  if (r>=213552 && r<=213567) { return R108.Priority(); } 
  if (r>=213568 && r<=213583) { return R109.Priority(); } 
  if (r>=213584 && r<=213599) { return R110.Priority(); } 
  if (r>=213600 && r<=213615) { return R111.Priority(); } 
  if (r>=213616 && r<=213631) { return R112.Priority(); } 
  if (r>=213632 && r<=213647) { return R113.Priority(); } 
  if (r>=213648 && r<=213663) { return R114.Priority(); } 
  if (r>=213664 && r<=213727) { return R115.Priority(); } 
  if (r>=213728 && r<=213791) { return R116.Priority(); } 
  if (r>=213792 && r<=213855) { return R117.Priority(); } 
  if (r>=213856 && r<=213919) { return R118.Priority(); } 
  if (r>=213920 && r<=214175) { return R119.Priority(); } 
  if (r>=214176 && r<=214179) { return R120.Priority(); } 
  if (r>=214180 && r<=214183) { return R121.Priority(); } 
  if (r>=214184 && r<=214187) { return R122.Priority(); } 
  if (r>=214188 && r<=214191) { return R123.Priority(); } 
  if (r>=214192 && r<=214207) { return R124.Priority(); } 
return 0;}
char * Name(unsigned r)
{
  if (r<=255) return R0.Name(r-0);
  if (r>=256 && r<=511) return R1.Name(r-256);
  if (r>=512 && r<=767) return R2.Name(r-512);
  if (r>=768 && r<=1023) return R3.Name(r-768);
  if (r>=1024 && r<=1279) return R4.Name(r-1024);
  if (r>=1280 && r<=1535) return R5.Name(r-1280);
  if (r>=1536 && r<=1791) return R6.Name(r-1536);
  if (r>=1792 && r<=2047) return R7.Name(r-1792);
  if (r>=2048 && r<=2303) return R8.Name(r-2048);
  if (r>=2304 && r<=2559) return R9.Name(r-2304);
  if (r>=2560 && r<=2815) return R10.Name(r-2560);
  if (r>=2816 && r<=3071) return R11.Name(r-2816);
  if (r>=3072 && r<=3327) return R12.Name(r-3072);
  if (r>=3328 && r<=3583) return R13.Name(r-3328);
  if (r>=3584 && r<=3839) return R14.Name(r-3584);
  if (r>=3840 && r<=4095) return R15.Name(r-3840);
  if (r>=4096 && r<=4351) return R16.Name(r-4096);
  if (r>=4352 && r<=4607) return R17.Name(r-4352);
  if (r>=4608 && r<=4863) return R18.Name(r-4608);
  if (r>=4864 && r<=5119) return R19.Name(r-4864);
  if (r>=5120 && r<=5375) return R20.Name(r-5120);
  if (r>=5376 && r<=5631) return R21.Name(r-5376);
  if (r>=5632 && r<=5887) return R22.Name(r-5632);
  if (r>=5888 && r<=6143) return R23.Name(r-5888);
  if (r>=6144 && r<=6399) return R24.Name(r-6144);
  if (r>=6400 && r<=6655) return R25.Name(r-6400);
  if (r>=6656 && r<=6911) return R26.Name(r-6656);
  if (r>=6912 && r<=7167) return R27.Name(r-6912);
  if (r>=7168 && r<=7423) return R28.Name(r-7168);
  if (r>=7424 && r<=7679) return R29.Name(r-7424);
  if (r>=7680 && r<=7935) return R30.Name(r-7680);
  if (r>=7936 && r<=8191) return R31.Name(r-7936);
  if (r>=8192 && r<=8447) return R32.Name(r-8192);
  if (r>=8448 && r<=8703) return R33.Name(r-8448);
  if (r>=8704 && r<=8959) return R34.Name(r-8704);
  if (r>=8960 && r<=9983) return R35.Name(r-8960);
  if (r>=9984 && r<=11007) return R36.Name(r-9984);
  if (r>=11008 && r<=12031) return R37.Name(r-11008);
  if (r>=12032 && r<=13055) return R38.Name(r-12032);
  if (r>=13056 && r<=14079) return R39.Name(r-13056);
  if (r>=14080 && r<=15103) return R40.Name(r-14080);
  if (r>=15104 && r<=16127) return R41.Name(r-15104);
  if (r>=16128 && r<=17151) return R42.Name(r-16128);
  if (r>=17152 && r<=18175) return R43.Name(r-17152);
  if (r>=18176 && r<=19199) return R44.Name(r-18176);
  if (r>=19200 && r<=20223) return R45.Name(r-19200);
  if (r>=20224 && r<=21247) return R46.Name(r-20224);
  if (r>=21248 && r<=22271) return R47.Name(r-21248);
  if (r>=22272 && r<=23295) return R48.Name(r-22272);
  if (r>=23296 && r<=24319) return R49.Name(r-23296);
  if (r>=24320 && r<=25343) return R50.Name(r-24320);
  if (r>=25344 && r<=26367) return R51.Name(r-25344);
  if (r>=26368 && r<=27391) return R52.Name(r-26368);
  if (r>=27392 && r<=28415) return R53.Name(r-27392);
  if (r>=28416 && r<=29439) return R54.Name(r-28416);
  if (r>=29440 && r<=33535) return R55.Name(r-29440);
  if (r>=33536 && r<=37631) return R56.Name(r-33536);
  if (r>=37632 && r<=41727) return R57.Name(r-37632);
  if (r>=41728 && r<=45823) return R58.Name(r-41728);
  if (r>=45824 && r<=49919) return R59.Name(r-45824);
  if (r>=49920 && r<=54015) return R60.Name(r-49920);
  if (r>=54016 && r<=58111) return R61.Name(r-54016);
  if (r>=58112 && r<=62207) return R62.Name(r-58112);
  if (r>=62208 && r<=66303) return R63.Name(r-62208);
  if (r>=66304 && r<=70399) return R64.Name(r-66304);
  if (r>=70400 && r<=86783) return R65.Name(r-70400);
  if (r>=86784 && r<=103167) return R66.Name(r-86784);
  if (r>=103168 && r<=119551) return R67.Name(r-103168);
  if (r>=119552 && r<=135935) return R68.Name(r-119552);
  if (r>=135936 && r<=201471) return R69.Name(r-135936);
  if (r>=201472 && r<=201535) return R70.Name(r-201472);
  if (r>=201536 && r<=201599) return R71.Name(r-201536);
  if (r>=201600 && r<=201663) return R72.Name(r-201600);
  if (r>=201664 && r<=201727) return R73.Name(r-201664);
  if (r>=201728 && r<=201791) return R74.Name(r-201728);
  if (r>=201792 && r<=201855) return R75.Name(r-201792);
  if (r>=201856 && r<=201919) return R76.Name(r-201856);
  if (r>=201920 && r<=201983) return R77.Name(r-201920);
  if (r>=201984 && r<=202047) return R78.Name(r-201984);
  if (r>=202048 && r<=202111) return R79.Name(r-202048);
  if (r>=202112 && r<=202175) return R80.Name(r-202112);
  if (r>=202176 && r<=202239) return R81.Name(r-202176);
  if (r>=202240 && r<=202303) return R82.Name(r-202240);
  if (r>=202304 && r<=202367) return R83.Name(r-202304);
  if (r>=202368 && r<=202431) return R84.Name(r-202368);
  if (r>=202432 && r<=202495) return R85.Name(r-202432);
  if (r>=202496 && r<=202559) return R86.Name(r-202496);
  if (r>=202560 && r<=202623) return R87.Name(r-202560);
  if (r>=202624 && r<=202687) return R88.Name(r-202624);
  if (r>=202688 && r<=202751) return R89.Name(r-202688);
  if (r>=202752 && r<=203007) return R90.Name(r-202752);
  if (r>=203008 && r<=203263) return R91.Name(r-203008);
  if (r>=203264 && r<=203519) return R92.Name(r-203264);
  if (r>=203520 && r<=203775) return R93.Name(r-203520);
  if (r>=203776 && r<=204031) return R94.Name(r-203776);
  if (r>=204032 && r<=204287) return R95.Name(r-204032);
  if (r>=204288 && r<=204543) return R96.Name(r-204288);
  if (r>=204544 && r<=204799) return R97.Name(r-204544);
  if (r>=204800 && r<=205055) return R98.Name(r-204800);
  if (r>=205056 && r<=205311) return R99.Name(r-205056);
  if (r>=205312 && r<=206335) return R100.Name(r-205312);
  if (r>=206336 && r<=207359) return R101.Name(r-206336);
  if (r>=207360 && r<=208383) return R102.Name(r-207360);
  if (r>=208384 && r<=209407) return R103.Name(r-208384);
  if (r>=209408 && r<=213503) return R104.Name(r-209408);
  if (r>=213504 && r<=213519) return R105.Name(r-213504);
  if (r>=213520 && r<=213535) return R106.Name(r-213520);
  if (r>=213536 && r<=213551) return R107.Name(r-213536);
  if (r>=213552 && r<=213567) return R108.Name(r-213552);
  if (r>=213568 && r<=213583) return R109.Name(r-213568);
  if (r>=213584 && r<=213599) return R110.Name(r-213584);
  if (r>=213600 && r<=213615) return R111.Name(r-213600);
  if (r>=213616 && r<=213631) return R112.Name(r-213616);
  if (r>=213632 && r<=213647) return R113.Name(r-213632);
  if (r>=213648 && r<=213663) return R114.Name(r-213648);
  if (r>=213664 && r<=213727) return R115.Name(r-213664);
  if (r>=213728 && r<=213791) return R116.Name(r-213728);
  if (r>=213792 && r<=213855) return R117.Name(r-213792);
  if (r>=213856 && r<=213919) return R118.Name(r-213856);
  if (r>=213920 && r<=214175) return R119.Name(r-213920);
  if (r>=214176 && r<=214179) return R120.Name(r-214176);
  if (r>=214180 && r<=214183) return R121.Name(r-214180);
  if (r>=214184 && r<=214187) return R122.Name(r-214184);
  if (r>=214188 && r<=214191) return R123.Name(r-214188);
  if (r>=214192 && r<=214207) return R124.Name(r-214192);
  return NULL;
}
};
const unsigned numrules = 214208;

/********************
  parameter
 ********************/
#define RULES_IN_WORLD 214208


/********************
  Startstate records
 ********************/
/******************** StartStateBase0 ********************/
class StartStateBase0
{
public:
  char * Name(unsigned short r)
  {
    return tsprintf("Startstate 0");
  }
  void Code(unsigned short r)
  {
{
for(int mu_nid1 = 0; mu_nid1 <= 3; mu_nid1++) {
{
for(int mu_nid2 = 0; mu_nid2 <= 3; mu_nid2++) {
{
for(int mu_s = 0; mu_s <= 2; mu_s++) {
mu_IncomingQueue[mu_nid1][mu_nid2][mu_s].mu_msg_type = mu_empty;
};
};
mu_TailPointers[mu_nid1][mu_nid2] = 0;
};
};
};
};
{
for(int mu_nid = 0; mu_nid <= 3; mu_nid++) {
if ( (mu_nid) != (3) )
{
mu_ExitPath[mu_nid] = (mu_nid) + (1);
if ( (mu_nid) == (0) )
{
mu_EntryPath[mu_nid] = 3;
}
else
{
mu_EntryPath[mu_nid] = (mu_nid) - (1);
}
}
else
{
mu_ExitPath[mu_nid] = 0;
mu_EntryPath[mu_nid] = (mu_nid) - (1);
}
};
};
{
for(int mu_n1 = 0; mu_n1 <= 3; mu_n1++) {
mu_Tokens[mu_n1] = mu_NumberTokens;
};
};
{
for(int mu_nid = 0; mu_nid <= 3; mu_nid++) {
mu_Routers[mu_nid] = 0;
};
};
mu_Routers[1] = 1;
  };

};
class StartStateGenerator
{
  StartStateBase0 S0;
public:
void Code(unsigned short r)
{
  if (r<=0) { S0.Code(r-0); return; }
}
char * Name(unsigned short r)
{
  if (r<=0) return S0.Name(r-0);
  return NULL;
}
};
const rulerec startstates[] = {
{ NULL, NULL, NULL, FALSE},
};
unsigned short StartStateManager::numstartstates = 1;

/********************
  Invariant records
 ********************/
const rulerec invariants[] = {
{ NULL, NULL, NULL, FALSE }};
const unsigned short numinvariants = 0;

/********************
  Normal/Canonicalization for scalarset
 ********************/
/*
Tokens:NoScalarset
TailPointers:NoScalarset
IncomingQueue:NoScalarset
RouterStatus:NoScalarset
Routers:NoScalarset
ExitPath:NoScalarset
EntryPath:NoScalarset
*/

/********************
Code for symmetry
 ********************/

/********************
 Permutation Set Class
 ********************/
class PermSet
{
public:
  // book keeping
  enum PresentationType {Simple, Explicit};
  PresentationType Presentation;

  void ResetToSimple();
  void ResetToExplicit();
  void SimpleToExplicit();
  void SimpleToOne();
  bool NextPermutation();

  void Print_in_size()
  { int ret=0; for (int i=0; i<count; i++) if (in[i]) ret++; cout << "in_size:" << ret << "\n"; }


  /********************
   Simple and efficient representation
   ********************/
  bool AlreadyOnlyOneRemain;
  bool MoreThanOneRemain();


  /********************
   Explicit representation
  ********************/
  unsigned long size;
  unsigned long count;
  // in will be of product of factorial sizes for fast canonicalize
  // in will be of size 1 for reduced local memory canonicalize
  bool * in;

  // auxiliary for explicit representation

  // in/perm/revperm will be of factorial size for fast canonicalize
  // they will be of size 1 for reduced local memory canonicalize
  // second range will be size of the scalarset
  // procedure for explicit representation
  // General procedure
  PermSet();
  bool In(int i) const { return in[i]; };
  void Add(int i) { for (int j=0; j<i; j++) in[j] = FALSE;};
  void Remove(int i) { in[i] = FALSE; };
};
bool PermSet::MoreThanOneRemain()
{
  int i,j;
  if (AlreadyOnlyOneRemain)
    return FALSE;
  else {
  }
  AlreadyOnlyOneRemain = TRUE;
  return FALSE;
}
PermSet::PermSet()
: Presentation(Simple)
{
  int i,j,k;
  if (  args->sym_alg.mode == argsym_alg::Exhaustive_Fast_Canonicalize) {

  /********************
   declaration of class variables
  ********************/
  in = new bool[1];

    // Set perm and revperm

    // setting up combination of permutations
    // for different scalarset
    int carry;
    size = 1;
    count = 1;
    for (i=0; i<1; i++)
      {
        carry = 1;
        in[i]= TRUE;
    }
  }
  else
  {

  /********************
   declaration of class variables
  ********************/
  in = new bool[1];
  in[0] = TRUE;
  }
}
void PermSet::ResetToSimple()
{
  int i;

  AlreadyOnlyOneRemain = FALSE;
  Presentation = Simple;
}
void PermSet::ResetToExplicit()
{
  for (int i=0; i<1; i++) in[i] = TRUE;
  Presentation = Explicit;
}
void PermSet::SimpleToExplicit()
{
  int i,j,k;
  int start, class_size;

  // Setup range for mapping

  // To be In or not to be

  // setup explicit representation 
  // Set perm and revperm
  for (i=0; i<1; i++)
    {
      in[i] = TRUE;
    }
  Presentation = Explicit;
  if (args->test_parameter1.value==0) Print_in_size();
}
void PermSet::SimpleToOne()
{
  int i,j,k;
  int class_size;
  int start;


  // Setup range for mapping
  Presentation = Explicit;
}
bool PermSet::NextPermutation()
{
  bool nexted = FALSE;
  int start, end; 
  int class_size;
  int temp;
  int j,k;

  // algorithm
  // for each class
  //   if forall in the same class reverse_sorted, 
  //     { sort again; goto next class }
  //   else
  //     {
  //       nexted = TRUE;
  //       for (j from l to r)
  // 	       if (for all j+ are reversed sorted)
  // 	         {
  // 	           swap j, j+1
  // 	           sort all j+ again
  // 	           break;
  // 	         }
  //     }
if (!nexted) return FALSE;
  return TRUE;
}

/********************
 Symmetry Class
 ********************/
class SymmetryClass
{
  PermSet Perm;
  bool BestInitialized;
  state BestPermutedState;

  // utilities
  void SetBestResult(int i, state* temp);
  void ResetBestResult() {BestInitialized = FALSE;};

public:
  // initializer
  SymmetryClass() : Perm(), BestInitialized(FALSE) {};
  ~SymmetryClass() {};

  void Normalize(state* s);

  void Exhaustive_Fast_Canonicalize(state *s);
  void Heuristic_Fast_Canonicalize(state *s);
  void Heuristic_Small_Mem_Canonicalize(state *s);
  void Heuristic_Fast_Normalize(state *s);

  void MultisetSort(state* s);
};


/********************
 Symmetry Class Members
 ********************/
void SymmetryClass::MultisetSort(state* s)
{
        mu_Tokens.MultisetSort();
        mu_TailPointers.MultisetSort();
        mu_IncomingQueue.MultisetSort();
        mu_RouterStatus.MultisetSort();
        mu_Routers.MultisetSort();
        mu_ExitPath.MultisetSort();
        mu_EntryPath.MultisetSort();
}
void SymmetryClass::Normalize(state* s)
{
  switch (args->sym_alg.mode) {
  case argsym_alg::Exhaustive_Fast_Canonicalize:
    Exhaustive_Fast_Canonicalize(s);
    break;
  case argsym_alg::Heuristic_Fast_Canonicalize:
    Heuristic_Fast_Canonicalize(s);
    break;
  case argsym_alg::Heuristic_Small_Mem_Canonicalize:
    Heuristic_Small_Mem_Canonicalize(s);
    break;
  case argsym_alg::Heuristic_Fast_Normalize:
    Heuristic_Fast_Normalize(s);
    break;
  default:
    Heuristic_Fast_Canonicalize(s);
  }
}

/********************
 Permute and Canonicalize function for different types
 ********************/
void mu_1_MessageState::Permute(PermSet& Perm, int i) {};
void mu_1_MessageState::SimpleCanonicalize(PermSet& Perm) {};
void mu_1_MessageState::Canonicalize(PermSet& Perm) {};
void mu_1_MessageState::SimpleLimit(PermSet& Perm) {};
void mu_1_MessageState::ArrayLimit(PermSet& Perm) {};
void mu_1_MessageState::Limit(PermSet& Perm) {};
void mu_1_MessageState::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for enum type.\n"); };
void mu_1_NodeIDs::Permute(PermSet& Perm, int i) {};
void mu_1_NodeIDs::SimpleCanonicalize(PermSet& Perm) {};
void mu_1_NodeIDs::Canonicalize(PermSet& Perm) {};
void mu_1_NodeIDs::SimpleLimit(PermSet& Perm) {};
void mu_1_NodeIDs::ArrayLimit(PermSet& Perm) {};
void mu_1_NodeIDs::Limit(PermSet& Perm) {};
void mu_1_NodeIDs::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu_1_Message::Permute(PermSet& Perm, int i)
{
};
void mu_1_Message::SimpleCanonicalize(PermSet& Perm)
{ Error.Error("Internal: Simple Canonicalization of Record with no scalarset variable\n"); };
void mu_1_Message::Canonicalize(PermSet& Perm)
{
};
void mu_1_Message::SimpleLimit(PermSet& Perm){}
void mu_1_Message::ArrayLimit(PermSet& Perm){}
void mu_1_Message::Limit(PermSet& Perm)
{
};
void mu_1_Message::MultisetLimit(PermSet& Perm)
{
};
void mu__subrange_6::Permute(PermSet& Perm, int i) {};
void mu__subrange_6::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_6::Canonicalize(PermSet& Perm) {};
void mu__subrange_6::SimpleLimit(PermSet& Perm) {};
void mu__subrange_6::ArrayLimit(PermSet& Perm) {};
void mu__subrange_6::Limit(PermSet& Perm) {};
void mu__subrange_6::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu_1_Queue::Permute(PermSet& Perm, int i)
{
  static mu_1_Queue temp("Permute_mu_1_Queue",-1);
  int j;
  for (j=0; j<3; j++)
    array[j].Permute(Perm, i);
};
void mu_1_Queue::SimpleCanonicalize(PermSet& Perm)
{ Error.Error("Internal: Simple Canonicalization of Scalarset Array\n"); };
void mu_1_Queue::Canonicalize(PermSet& Perm){};
void mu_1_Queue::SimpleLimit(PermSet& Perm){}
void mu_1_Queue::ArrayLimit(PermSet& Perm) {}
void mu_1_Queue::Limit(PermSet& Perm){}
void mu_1_Queue::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for scalarset array.\n"); };
void mu_1__type_0::Permute(PermSet& Perm, int i)
{
  static mu_1__type_0 temp("Permute_mu_1__type_0",-1);
  int j;
  for (j=0; j<4; j++)
    array[j].Permute(Perm, i);
};
void mu_1__type_0::SimpleCanonicalize(PermSet& Perm)
{ Error.Error("Internal: Simple Canonicalization of Scalarset Array\n"); };
void mu_1__type_0::Canonicalize(PermSet& Perm){};
void mu_1__type_0::SimpleLimit(PermSet& Perm){}
void mu_1__type_0::ArrayLimit(PermSet& Perm) {}
void mu_1__type_0::Limit(PermSet& Perm){}
void mu_1__type_0::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for scalarset array.\n"); };
void mu_1__type_1::Permute(PermSet& Perm, int i)
{
  static mu_1__type_1 temp("Permute_mu_1__type_1",-1);
  int j;
  for (j=0; j<4; j++)
    array[j].Permute(Perm, i);
};
void mu_1__type_1::SimpleCanonicalize(PermSet& Perm)
{ Error.Error("Internal: Simple Canonicalization of Scalarset Array\n"); };
void mu_1__type_1::Canonicalize(PermSet& Perm){};
void mu_1__type_1::SimpleLimit(PermSet& Perm){}
void mu_1__type_1::ArrayLimit(PermSet& Perm) {}
void mu_1__type_1::Limit(PermSet& Perm){}
void mu_1__type_1::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for scalarset array.\n"); };
void mu_1__type_2::Permute(PermSet& Perm, int i) {};
void mu_1__type_2::SimpleCanonicalize(PermSet& Perm) {};
void mu_1__type_2::Canonicalize(PermSet& Perm) {};
void mu_1__type_2::SimpleLimit(PermSet& Perm) {};
void mu_1__type_2::ArrayLimit(PermSet& Perm) {};
void mu_1__type_2::Limit(PermSet& Perm) {};
void mu_1__type_2::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu_1__type_3::Permute(PermSet& Perm, int i)
{
  static mu_1__type_3 temp("Permute_mu_1__type_3",-1);
  int j;
  for (j=0; j<4; j++)
    array[j].Permute(Perm, i);
};
void mu_1__type_3::SimpleCanonicalize(PermSet& Perm)
{ Error.Error("Internal: Simple Canonicalization of Scalarset Array\n"); };
void mu_1__type_3::Canonicalize(PermSet& Perm){};
void mu_1__type_3::SimpleLimit(PermSet& Perm){}
void mu_1__type_3::ArrayLimit(PermSet& Perm) {}
void mu_1__type_3::Limit(PermSet& Perm){}
void mu_1__type_3::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for scalarset array.\n"); };
void mu_1__type_4::Permute(PermSet& Perm, int i)
{
  static mu_1__type_4 temp("Permute_mu_1__type_4",-1);
  int j;
  for (j=0; j<4; j++)
    array[j].Permute(Perm, i);
};
void mu_1__type_4::SimpleCanonicalize(PermSet& Perm)
{ Error.Error("Internal: Simple Canonicalization of Scalarset Array\n"); };
void mu_1__type_4::Canonicalize(PermSet& Perm){};
void mu_1__type_4::SimpleLimit(PermSet& Perm){}
void mu_1__type_4::ArrayLimit(PermSet& Perm) {}
void mu_1__type_4::Limit(PermSet& Perm){}
void mu_1__type_4::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for scalarset array.\n"); };
void mu__subrange_13::Permute(PermSet& Perm, int i) {};
void mu__subrange_13::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_13::Canonicalize(PermSet& Perm) {};
void mu__subrange_13::SimpleLimit(PermSet& Perm) {};
void mu__subrange_13::ArrayLimit(PermSet& Perm) {};
void mu__subrange_13::Limit(PermSet& Perm) {};
void mu__subrange_13::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu_1__type_5::Permute(PermSet& Perm, int i) {};
void mu_1__type_5::SimpleCanonicalize(PermSet& Perm) {};
void mu_1__type_5::Canonicalize(PermSet& Perm) {};
void mu_1__type_5::SimpleLimit(PermSet& Perm) {};
void mu_1__type_5::ArrayLimit(PermSet& Perm) {};
void mu_1__type_5::Limit(PermSet& Perm) {};
void mu_1__type_5::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu_1__type_6::Permute(PermSet& Perm, int i)
{
  static mu_1__type_6 temp("Permute_mu_1__type_6",-1);
  int j;
  for (j=0; j<5; j++)
    array[j].Permute(Perm, i);
};
void mu_1__type_6::SimpleCanonicalize(PermSet& Perm)
{ Error.Error("Internal: Simple Canonicalization of Scalarset Array\n"); };
void mu_1__type_6::Canonicalize(PermSet& Perm){};
void mu_1__type_6::SimpleLimit(PermSet& Perm){}
void mu_1__type_6::ArrayLimit(PermSet& Perm) {}
void mu_1__type_6::Limit(PermSet& Perm){}
void mu_1__type_6::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for scalarset array.\n"); };
void mu_1__type_7::Permute(PermSet& Perm, int i) {};
void mu_1__type_7::SimpleCanonicalize(PermSet& Perm) {};
void mu_1__type_7::Canonicalize(PermSet& Perm) {};
void mu_1__type_7::SimpleLimit(PermSet& Perm) {};
void mu_1__type_7::ArrayLimit(PermSet& Perm) {};
void mu_1__type_7::Limit(PermSet& Perm) {};
void mu_1__type_7::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu_1__type_8::Permute(PermSet& Perm, int i)
{
  static mu_1__type_8 temp("Permute_mu_1__type_8",-1);
  int j;
  for (j=0; j<4; j++)
    array[j].Permute(Perm, i);
};
void mu_1__type_8::SimpleCanonicalize(PermSet& Perm)
{ Error.Error("Internal: Simple Canonicalization of Scalarset Array\n"); };
void mu_1__type_8::Canonicalize(PermSet& Perm){};
void mu_1__type_8::SimpleLimit(PermSet& Perm){}
void mu_1__type_8::ArrayLimit(PermSet& Perm) {}
void mu_1__type_8::Limit(PermSet& Perm){}
void mu_1__type_8::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for scalarset array.\n"); };
void mu_1__type_9::Permute(PermSet& Perm, int i) {};
void mu_1__type_9::SimpleCanonicalize(PermSet& Perm) {};
void mu_1__type_9::Canonicalize(PermSet& Perm) {};
void mu_1__type_9::SimpleLimit(PermSet& Perm) {};
void mu_1__type_9::ArrayLimit(PermSet& Perm) {};
void mu_1__type_9::Limit(PermSet& Perm) {};
void mu_1__type_9::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu_1__type_10::Permute(PermSet& Perm, int i)
{
  static mu_1__type_10 temp("Permute_mu_1__type_10",-1);
  int j;
  for (j=0; j<4; j++)
    array[j].Permute(Perm, i);
};
void mu_1__type_10::SimpleCanonicalize(PermSet& Perm)
{ Error.Error("Internal: Simple Canonicalization of Scalarset Array\n"); };
void mu_1__type_10::Canonicalize(PermSet& Perm){};
void mu_1__type_10::SimpleLimit(PermSet& Perm){}
void mu_1__type_10::ArrayLimit(PermSet& Perm) {}
void mu_1__type_10::Limit(PermSet& Perm){}
void mu_1__type_10::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for scalarset array.\n"); };
void mu_1__type_11::Permute(PermSet& Perm, int i)
{
  static mu_1__type_11 temp("Permute_mu_1__type_11",-1);
  int j;
  for (j=0; j<4; j++)
    array[j].Permute(Perm, i);
};
void mu_1__type_11::SimpleCanonicalize(PermSet& Perm)
{ Error.Error("Internal: Simple Canonicalization of Scalarset Array\n"); };
void mu_1__type_11::Canonicalize(PermSet& Perm){};
void mu_1__type_11::SimpleLimit(PermSet& Perm){}
void mu_1__type_11::ArrayLimit(PermSet& Perm) {}
void mu_1__type_11::Limit(PermSet& Perm){}
void mu_1__type_11::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for scalarset array.\n"); };
void mu_1__type_12::Permute(PermSet& Perm, int i)
{
  static mu_1__type_12 temp("Permute_mu_1__type_12",-1);
  int j;
  for (j=0; j<4; j++)
    array[j].Permute(Perm, i);
};
void mu_1__type_12::SimpleCanonicalize(PermSet& Perm)
{ Error.Error("Internal: Simple Canonicalization of Scalarset Array\n"); };
void mu_1__type_12::Canonicalize(PermSet& Perm){};
void mu_1__type_12::SimpleLimit(PermSet& Perm){}
void mu_1__type_12::ArrayLimit(PermSet& Perm) {}
void mu_1__type_12::Limit(PermSet& Perm){}
void mu_1__type_12::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for scalarset array.\n"); };
void mu__subrange_22::Permute(PermSet& Perm, int i) {};
void mu__subrange_22::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_22::Canonicalize(PermSet& Perm) {};
void mu__subrange_22::SimpleLimit(PermSet& Perm) {};
void mu__subrange_22::ArrayLimit(PermSet& Perm) {};
void mu__subrange_22::Limit(PermSet& Perm) {};
void mu__subrange_22::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_23::Permute(PermSet& Perm, int i) {};
void mu__subrange_23::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_23::Canonicalize(PermSet& Perm) {};
void mu__subrange_23::SimpleLimit(PermSet& Perm) {};
void mu__subrange_23::ArrayLimit(PermSet& Perm) {};
void mu__subrange_23::Limit(PermSet& Perm) {};
void mu__subrange_23::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_24::Permute(PermSet& Perm, int i) {};
void mu__subrange_24::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_24::Canonicalize(PermSet& Perm) {};
void mu__subrange_24::SimpleLimit(PermSet& Perm) {};
void mu__subrange_24::ArrayLimit(PermSet& Perm) {};
void mu__subrange_24::Limit(PermSet& Perm) {};
void mu__subrange_24::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_25::Permute(PermSet& Perm, int i) {};
void mu__subrange_25::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_25::Canonicalize(PermSet& Perm) {};
void mu__subrange_25::SimpleLimit(PermSet& Perm) {};
void mu__subrange_25::ArrayLimit(PermSet& Perm) {};
void mu__subrange_25::Limit(PermSet& Perm) {};
void mu__subrange_25::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_26::Permute(PermSet& Perm, int i) {};
void mu__subrange_26::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_26::Canonicalize(PermSet& Perm) {};
void mu__subrange_26::SimpleLimit(PermSet& Perm) {};
void mu__subrange_26::ArrayLimit(PermSet& Perm) {};
void mu__subrange_26::Limit(PermSet& Perm) {};
void mu__subrange_26::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_27::Permute(PermSet& Perm, int i) {};
void mu__subrange_27::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_27::Canonicalize(PermSet& Perm) {};
void mu__subrange_27::SimpleLimit(PermSet& Perm) {};
void mu__subrange_27::ArrayLimit(PermSet& Perm) {};
void mu__subrange_27::Limit(PermSet& Perm) {};
void mu__subrange_27::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_28::Permute(PermSet& Perm, int i) {};
void mu__subrange_28::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_28::Canonicalize(PermSet& Perm) {};
void mu__subrange_28::SimpleLimit(PermSet& Perm) {};
void mu__subrange_28::ArrayLimit(PermSet& Perm) {};
void mu__subrange_28::Limit(PermSet& Perm) {};
void mu__subrange_28::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_29::Permute(PermSet& Perm, int i) {};
void mu__subrange_29::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_29::Canonicalize(PermSet& Perm) {};
void mu__subrange_29::SimpleLimit(PermSet& Perm) {};
void mu__subrange_29::ArrayLimit(PermSet& Perm) {};
void mu__subrange_29::Limit(PermSet& Perm) {};
void mu__subrange_29::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_30::Permute(PermSet& Perm, int i) {};
void mu__subrange_30::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_30::Canonicalize(PermSet& Perm) {};
void mu__subrange_30::SimpleLimit(PermSet& Perm) {};
void mu__subrange_30::ArrayLimit(PermSet& Perm) {};
void mu__subrange_30::Limit(PermSet& Perm) {};
void mu__subrange_30::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_31::Permute(PermSet& Perm, int i) {};
void mu__subrange_31::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_31::Canonicalize(PermSet& Perm) {};
void mu__subrange_31::SimpleLimit(PermSet& Perm) {};
void mu__subrange_31::ArrayLimit(PermSet& Perm) {};
void mu__subrange_31::Limit(PermSet& Perm) {};
void mu__subrange_31::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_32::Permute(PermSet& Perm, int i) {};
void mu__subrange_32::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_32::Canonicalize(PermSet& Perm) {};
void mu__subrange_32::SimpleLimit(PermSet& Perm) {};
void mu__subrange_32::ArrayLimit(PermSet& Perm) {};
void mu__subrange_32::Limit(PermSet& Perm) {};
void mu__subrange_32::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_33::Permute(PermSet& Perm, int i) {};
void mu__subrange_33::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_33::Canonicalize(PermSet& Perm) {};
void mu__subrange_33::SimpleLimit(PermSet& Perm) {};
void mu__subrange_33::ArrayLimit(PermSet& Perm) {};
void mu__subrange_33::Limit(PermSet& Perm) {};
void mu__subrange_33::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_34::Permute(PermSet& Perm, int i) {};
void mu__subrange_34::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_34::Canonicalize(PermSet& Perm) {};
void mu__subrange_34::SimpleLimit(PermSet& Perm) {};
void mu__subrange_34::ArrayLimit(PermSet& Perm) {};
void mu__subrange_34::Limit(PermSet& Perm) {};
void mu__subrange_34::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_35::Permute(PermSet& Perm, int i) {};
void mu__subrange_35::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_35::Canonicalize(PermSet& Perm) {};
void mu__subrange_35::SimpleLimit(PermSet& Perm) {};
void mu__subrange_35::ArrayLimit(PermSet& Perm) {};
void mu__subrange_35::Limit(PermSet& Perm) {};
void mu__subrange_35::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_36::Permute(PermSet& Perm, int i) {};
void mu__subrange_36::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_36::Canonicalize(PermSet& Perm) {};
void mu__subrange_36::SimpleLimit(PermSet& Perm) {};
void mu__subrange_36::ArrayLimit(PermSet& Perm) {};
void mu__subrange_36::Limit(PermSet& Perm) {};
void mu__subrange_36::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_37::Permute(PermSet& Perm, int i) {};
void mu__subrange_37::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_37::Canonicalize(PermSet& Perm) {};
void mu__subrange_37::SimpleLimit(PermSet& Perm) {};
void mu__subrange_37::ArrayLimit(PermSet& Perm) {};
void mu__subrange_37::Limit(PermSet& Perm) {};
void mu__subrange_37::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_38::Permute(PermSet& Perm, int i) {};
void mu__subrange_38::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_38::Canonicalize(PermSet& Perm) {};
void mu__subrange_38::SimpleLimit(PermSet& Perm) {};
void mu__subrange_38::ArrayLimit(PermSet& Perm) {};
void mu__subrange_38::Limit(PermSet& Perm) {};
void mu__subrange_38::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_39::Permute(PermSet& Perm, int i) {};
void mu__subrange_39::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_39::Canonicalize(PermSet& Perm) {};
void mu__subrange_39::SimpleLimit(PermSet& Perm) {};
void mu__subrange_39::ArrayLimit(PermSet& Perm) {};
void mu__subrange_39::Limit(PermSet& Perm) {};
void mu__subrange_39::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_40::Permute(PermSet& Perm, int i) {};
void mu__subrange_40::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_40::Canonicalize(PermSet& Perm) {};
void mu__subrange_40::SimpleLimit(PermSet& Perm) {};
void mu__subrange_40::ArrayLimit(PermSet& Perm) {};
void mu__subrange_40::Limit(PermSet& Perm) {};
void mu__subrange_40::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_41::Permute(PermSet& Perm, int i) {};
void mu__subrange_41::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_41::Canonicalize(PermSet& Perm) {};
void mu__subrange_41::SimpleLimit(PermSet& Perm) {};
void mu__subrange_41::ArrayLimit(PermSet& Perm) {};
void mu__subrange_41::Limit(PermSet& Perm) {};
void mu__subrange_41::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_42::Permute(PermSet& Perm, int i) {};
void mu__subrange_42::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_42::Canonicalize(PermSet& Perm) {};
void mu__subrange_42::SimpleLimit(PermSet& Perm) {};
void mu__subrange_42::ArrayLimit(PermSet& Perm) {};
void mu__subrange_42::Limit(PermSet& Perm) {};
void mu__subrange_42::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_43::Permute(PermSet& Perm, int i) {};
void mu__subrange_43::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_43::Canonicalize(PermSet& Perm) {};
void mu__subrange_43::SimpleLimit(PermSet& Perm) {};
void mu__subrange_43::ArrayLimit(PermSet& Perm) {};
void mu__subrange_43::Limit(PermSet& Perm) {};
void mu__subrange_43::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_44::Permute(PermSet& Perm, int i) {};
void mu__subrange_44::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_44::Canonicalize(PermSet& Perm) {};
void mu__subrange_44::SimpleLimit(PermSet& Perm) {};
void mu__subrange_44::ArrayLimit(PermSet& Perm) {};
void mu__subrange_44::Limit(PermSet& Perm) {};
void mu__subrange_44::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_45::Permute(PermSet& Perm, int i) {};
void mu__subrange_45::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_45::Canonicalize(PermSet& Perm) {};
void mu__subrange_45::SimpleLimit(PermSet& Perm) {};
void mu__subrange_45::ArrayLimit(PermSet& Perm) {};
void mu__subrange_45::Limit(PermSet& Perm) {};
void mu__subrange_45::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_46::Permute(PermSet& Perm, int i) {};
void mu__subrange_46::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_46::Canonicalize(PermSet& Perm) {};
void mu__subrange_46::SimpleLimit(PermSet& Perm) {};
void mu__subrange_46::ArrayLimit(PermSet& Perm) {};
void mu__subrange_46::Limit(PermSet& Perm) {};
void mu__subrange_46::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_47::Permute(PermSet& Perm, int i) {};
void mu__subrange_47::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_47::Canonicalize(PermSet& Perm) {};
void mu__subrange_47::SimpleLimit(PermSet& Perm) {};
void mu__subrange_47::ArrayLimit(PermSet& Perm) {};
void mu__subrange_47::Limit(PermSet& Perm) {};
void mu__subrange_47::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_48::Permute(PermSet& Perm, int i) {};
void mu__subrange_48::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_48::Canonicalize(PermSet& Perm) {};
void mu__subrange_48::SimpleLimit(PermSet& Perm) {};
void mu__subrange_48::ArrayLimit(PermSet& Perm) {};
void mu__subrange_48::Limit(PermSet& Perm) {};
void mu__subrange_48::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_49::Permute(PermSet& Perm, int i) {};
void mu__subrange_49::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_49::Canonicalize(PermSet& Perm) {};
void mu__subrange_49::SimpleLimit(PermSet& Perm) {};
void mu__subrange_49::ArrayLimit(PermSet& Perm) {};
void mu__subrange_49::Limit(PermSet& Perm) {};
void mu__subrange_49::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_50::Permute(PermSet& Perm, int i) {};
void mu__subrange_50::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_50::Canonicalize(PermSet& Perm) {};
void mu__subrange_50::SimpleLimit(PermSet& Perm) {};
void mu__subrange_50::ArrayLimit(PermSet& Perm) {};
void mu__subrange_50::Limit(PermSet& Perm) {};
void mu__subrange_50::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_51::Permute(PermSet& Perm, int i) {};
void mu__subrange_51::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_51::Canonicalize(PermSet& Perm) {};
void mu__subrange_51::SimpleLimit(PermSet& Perm) {};
void mu__subrange_51::ArrayLimit(PermSet& Perm) {};
void mu__subrange_51::Limit(PermSet& Perm) {};
void mu__subrange_51::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_52::Permute(PermSet& Perm, int i) {};
void mu__subrange_52::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_52::Canonicalize(PermSet& Perm) {};
void mu__subrange_52::SimpleLimit(PermSet& Perm) {};
void mu__subrange_52::ArrayLimit(PermSet& Perm) {};
void mu__subrange_52::Limit(PermSet& Perm) {};
void mu__subrange_52::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_53::Permute(PermSet& Perm, int i) {};
void mu__subrange_53::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_53::Canonicalize(PermSet& Perm) {};
void mu__subrange_53::SimpleLimit(PermSet& Perm) {};
void mu__subrange_53::ArrayLimit(PermSet& Perm) {};
void mu__subrange_53::Limit(PermSet& Perm) {};
void mu__subrange_53::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_54::Permute(PermSet& Perm, int i) {};
void mu__subrange_54::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_54::Canonicalize(PermSet& Perm) {};
void mu__subrange_54::SimpleLimit(PermSet& Perm) {};
void mu__subrange_54::ArrayLimit(PermSet& Perm) {};
void mu__subrange_54::Limit(PermSet& Perm) {};
void mu__subrange_54::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_55::Permute(PermSet& Perm, int i) {};
void mu__subrange_55::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_55::Canonicalize(PermSet& Perm) {};
void mu__subrange_55::SimpleLimit(PermSet& Perm) {};
void mu__subrange_55::ArrayLimit(PermSet& Perm) {};
void mu__subrange_55::Limit(PermSet& Perm) {};
void mu__subrange_55::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_56::Permute(PermSet& Perm, int i) {};
void mu__subrange_56::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_56::Canonicalize(PermSet& Perm) {};
void mu__subrange_56::SimpleLimit(PermSet& Perm) {};
void mu__subrange_56::ArrayLimit(PermSet& Perm) {};
void mu__subrange_56::Limit(PermSet& Perm) {};
void mu__subrange_56::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_57::Permute(PermSet& Perm, int i) {};
void mu__subrange_57::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_57::Canonicalize(PermSet& Perm) {};
void mu__subrange_57::SimpleLimit(PermSet& Perm) {};
void mu__subrange_57::ArrayLimit(PermSet& Perm) {};
void mu__subrange_57::Limit(PermSet& Perm) {};
void mu__subrange_57::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_58::Permute(PermSet& Perm, int i) {};
void mu__subrange_58::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_58::Canonicalize(PermSet& Perm) {};
void mu__subrange_58::SimpleLimit(PermSet& Perm) {};
void mu__subrange_58::ArrayLimit(PermSet& Perm) {};
void mu__subrange_58::Limit(PermSet& Perm) {};
void mu__subrange_58::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_59::Permute(PermSet& Perm, int i) {};
void mu__subrange_59::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_59::Canonicalize(PermSet& Perm) {};
void mu__subrange_59::SimpleLimit(PermSet& Perm) {};
void mu__subrange_59::ArrayLimit(PermSet& Perm) {};
void mu__subrange_59::Limit(PermSet& Perm) {};
void mu__subrange_59::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_60::Permute(PermSet& Perm, int i) {};
void mu__subrange_60::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_60::Canonicalize(PermSet& Perm) {};
void mu__subrange_60::SimpleLimit(PermSet& Perm) {};
void mu__subrange_60::ArrayLimit(PermSet& Perm) {};
void mu__subrange_60::Limit(PermSet& Perm) {};
void mu__subrange_60::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_61::Permute(PermSet& Perm, int i) {};
void mu__subrange_61::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_61::Canonicalize(PermSet& Perm) {};
void mu__subrange_61::SimpleLimit(PermSet& Perm) {};
void mu__subrange_61::ArrayLimit(PermSet& Perm) {};
void mu__subrange_61::Limit(PermSet& Perm) {};
void mu__subrange_61::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_62::Permute(PermSet& Perm, int i) {};
void mu__subrange_62::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_62::Canonicalize(PermSet& Perm) {};
void mu__subrange_62::SimpleLimit(PermSet& Perm) {};
void mu__subrange_62::ArrayLimit(PermSet& Perm) {};
void mu__subrange_62::Limit(PermSet& Perm) {};
void mu__subrange_62::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_63::Permute(PermSet& Perm, int i) {};
void mu__subrange_63::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_63::Canonicalize(PermSet& Perm) {};
void mu__subrange_63::SimpleLimit(PermSet& Perm) {};
void mu__subrange_63::ArrayLimit(PermSet& Perm) {};
void mu__subrange_63::Limit(PermSet& Perm) {};
void mu__subrange_63::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_64::Permute(PermSet& Perm, int i) {};
void mu__subrange_64::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_64::Canonicalize(PermSet& Perm) {};
void mu__subrange_64::SimpleLimit(PermSet& Perm) {};
void mu__subrange_64::ArrayLimit(PermSet& Perm) {};
void mu__subrange_64::Limit(PermSet& Perm) {};
void mu__subrange_64::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_65::Permute(PermSet& Perm, int i) {};
void mu__subrange_65::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_65::Canonicalize(PermSet& Perm) {};
void mu__subrange_65::SimpleLimit(PermSet& Perm) {};
void mu__subrange_65::ArrayLimit(PermSet& Perm) {};
void mu__subrange_65::Limit(PermSet& Perm) {};
void mu__subrange_65::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_66::Permute(PermSet& Perm, int i) {};
void mu__subrange_66::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_66::Canonicalize(PermSet& Perm) {};
void mu__subrange_66::SimpleLimit(PermSet& Perm) {};
void mu__subrange_66::ArrayLimit(PermSet& Perm) {};
void mu__subrange_66::Limit(PermSet& Perm) {};
void mu__subrange_66::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_67::Permute(PermSet& Perm, int i) {};
void mu__subrange_67::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_67::Canonicalize(PermSet& Perm) {};
void mu__subrange_67::SimpleLimit(PermSet& Perm) {};
void mu__subrange_67::ArrayLimit(PermSet& Perm) {};
void mu__subrange_67::Limit(PermSet& Perm) {};
void mu__subrange_67::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_68::Permute(PermSet& Perm, int i) {};
void mu__subrange_68::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_68::Canonicalize(PermSet& Perm) {};
void mu__subrange_68::SimpleLimit(PermSet& Perm) {};
void mu__subrange_68::ArrayLimit(PermSet& Perm) {};
void mu__subrange_68::Limit(PermSet& Perm) {};
void mu__subrange_68::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_69::Permute(PermSet& Perm, int i) {};
void mu__subrange_69::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_69::Canonicalize(PermSet& Perm) {};
void mu__subrange_69::SimpleLimit(PermSet& Perm) {};
void mu__subrange_69::ArrayLimit(PermSet& Perm) {};
void mu__subrange_69::Limit(PermSet& Perm) {};
void mu__subrange_69::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_70::Permute(PermSet& Perm, int i) {};
void mu__subrange_70::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_70::Canonicalize(PermSet& Perm) {};
void mu__subrange_70::SimpleLimit(PermSet& Perm) {};
void mu__subrange_70::ArrayLimit(PermSet& Perm) {};
void mu__subrange_70::Limit(PermSet& Perm) {};
void mu__subrange_70::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_71::Permute(PermSet& Perm, int i) {};
void mu__subrange_71::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_71::Canonicalize(PermSet& Perm) {};
void mu__subrange_71::SimpleLimit(PermSet& Perm) {};
void mu__subrange_71::ArrayLimit(PermSet& Perm) {};
void mu__subrange_71::Limit(PermSet& Perm) {};
void mu__subrange_71::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_72::Permute(PermSet& Perm, int i) {};
void mu__subrange_72::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_72::Canonicalize(PermSet& Perm) {};
void mu__subrange_72::SimpleLimit(PermSet& Perm) {};
void mu__subrange_72::ArrayLimit(PermSet& Perm) {};
void mu__subrange_72::Limit(PermSet& Perm) {};
void mu__subrange_72::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_73::Permute(PermSet& Perm, int i) {};
void mu__subrange_73::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_73::Canonicalize(PermSet& Perm) {};
void mu__subrange_73::SimpleLimit(PermSet& Perm) {};
void mu__subrange_73::ArrayLimit(PermSet& Perm) {};
void mu__subrange_73::Limit(PermSet& Perm) {};
void mu__subrange_73::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_74::Permute(PermSet& Perm, int i) {};
void mu__subrange_74::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_74::Canonicalize(PermSet& Perm) {};
void mu__subrange_74::SimpleLimit(PermSet& Perm) {};
void mu__subrange_74::ArrayLimit(PermSet& Perm) {};
void mu__subrange_74::Limit(PermSet& Perm) {};
void mu__subrange_74::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_75::Permute(PermSet& Perm, int i) {};
void mu__subrange_75::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_75::Canonicalize(PermSet& Perm) {};
void mu__subrange_75::SimpleLimit(PermSet& Perm) {};
void mu__subrange_75::ArrayLimit(PermSet& Perm) {};
void mu__subrange_75::Limit(PermSet& Perm) {};
void mu__subrange_75::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_76::Permute(PermSet& Perm, int i) {};
void mu__subrange_76::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_76::Canonicalize(PermSet& Perm) {};
void mu__subrange_76::SimpleLimit(PermSet& Perm) {};
void mu__subrange_76::ArrayLimit(PermSet& Perm) {};
void mu__subrange_76::Limit(PermSet& Perm) {};
void mu__subrange_76::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_77::Permute(PermSet& Perm, int i) {};
void mu__subrange_77::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_77::Canonicalize(PermSet& Perm) {};
void mu__subrange_77::SimpleLimit(PermSet& Perm) {};
void mu__subrange_77::ArrayLimit(PermSet& Perm) {};
void mu__subrange_77::Limit(PermSet& Perm) {};
void mu__subrange_77::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_78::Permute(PermSet& Perm, int i) {};
void mu__subrange_78::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_78::Canonicalize(PermSet& Perm) {};
void mu__subrange_78::SimpleLimit(PermSet& Perm) {};
void mu__subrange_78::ArrayLimit(PermSet& Perm) {};
void mu__subrange_78::Limit(PermSet& Perm) {};
void mu__subrange_78::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_79::Permute(PermSet& Perm, int i) {};
void mu__subrange_79::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_79::Canonicalize(PermSet& Perm) {};
void mu__subrange_79::SimpleLimit(PermSet& Perm) {};
void mu__subrange_79::ArrayLimit(PermSet& Perm) {};
void mu__subrange_79::Limit(PermSet& Perm) {};
void mu__subrange_79::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_80::Permute(PermSet& Perm, int i) {};
void mu__subrange_80::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_80::Canonicalize(PermSet& Perm) {};
void mu__subrange_80::SimpleLimit(PermSet& Perm) {};
void mu__subrange_80::ArrayLimit(PermSet& Perm) {};
void mu__subrange_80::Limit(PermSet& Perm) {};
void mu__subrange_80::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_81::Permute(PermSet& Perm, int i) {};
void mu__subrange_81::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_81::Canonicalize(PermSet& Perm) {};
void mu__subrange_81::SimpleLimit(PermSet& Perm) {};
void mu__subrange_81::ArrayLimit(PermSet& Perm) {};
void mu__subrange_81::Limit(PermSet& Perm) {};
void mu__subrange_81::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_82::Permute(PermSet& Perm, int i) {};
void mu__subrange_82::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_82::Canonicalize(PermSet& Perm) {};
void mu__subrange_82::SimpleLimit(PermSet& Perm) {};
void mu__subrange_82::ArrayLimit(PermSet& Perm) {};
void mu__subrange_82::Limit(PermSet& Perm) {};
void mu__subrange_82::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_83::Permute(PermSet& Perm, int i) {};
void mu__subrange_83::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_83::Canonicalize(PermSet& Perm) {};
void mu__subrange_83::SimpleLimit(PermSet& Perm) {};
void mu__subrange_83::ArrayLimit(PermSet& Perm) {};
void mu__subrange_83::Limit(PermSet& Perm) {};
void mu__subrange_83::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_84::Permute(PermSet& Perm, int i) {};
void mu__subrange_84::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_84::Canonicalize(PermSet& Perm) {};
void mu__subrange_84::SimpleLimit(PermSet& Perm) {};
void mu__subrange_84::ArrayLimit(PermSet& Perm) {};
void mu__subrange_84::Limit(PermSet& Perm) {};
void mu__subrange_84::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_85::Permute(PermSet& Perm, int i) {};
void mu__subrange_85::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_85::Canonicalize(PermSet& Perm) {};
void mu__subrange_85::SimpleLimit(PermSet& Perm) {};
void mu__subrange_85::ArrayLimit(PermSet& Perm) {};
void mu__subrange_85::Limit(PermSet& Perm) {};
void mu__subrange_85::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_86::Permute(PermSet& Perm, int i) {};
void mu__subrange_86::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_86::Canonicalize(PermSet& Perm) {};
void mu__subrange_86::SimpleLimit(PermSet& Perm) {};
void mu__subrange_86::ArrayLimit(PermSet& Perm) {};
void mu__subrange_86::Limit(PermSet& Perm) {};
void mu__subrange_86::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_87::Permute(PermSet& Perm, int i) {};
void mu__subrange_87::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_87::Canonicalize(PermSet& Perm) {};
void mu__subrange_87::SimpleLimit(PermSet& Perm) {};
void mu__subrange_87::ArrayLimit(PermSet& Perm) {};
void mu__subrange_87::Limit(PermSet& Perm) {};
void mu__subrange_87::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_88::Permute(PermSet& Perm, int i) {};
void mu__subrange_88::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_88::Canonicalize(PermSet& Perm) {};
void mu__subrange_88::SimpleLimit(PermSet& Perm) {};
void mu__subrange_88::ArrayLimit(PermSet& Perm) {};
void mu__subrange_88::Limit(PermSet& Perm) {};
void mu__subrange_88::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_89::Permute(PermSet& Perm, int i) {};
void mu__subrange_89::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_89::Canonicalize(PermSet& Perm) {};
void mu__subrange_89::SimpleLimit(PermSet& Perm) {};
void mu__subrange_89::ArrayLimit(PermSet& Perm) {};
void mu__subrange_89::Limit(PermSet& Perm) {};
void mu__subrange_89::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_90::Permute(PermSet& Perm, int i) {};
void mu__subrange_90::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_90::Canonicalize(PermSet& Perm) {};
void mu__subrange_90::SimpleLimit(PermSet& Perm) {};
void mu__subrange_90::ArrayLimit(PermSet& Perm) {};
void mu__subrange_90::Limit(PermSet& Perm) {};
void mu__subrange_90::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_91::Permute(PermSet& Perm, int i) {};
void mu__subrange_91::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_91::Canonicalize(PermSet& Perm) {};
void mu__subrange_91::SimpleLimit(PermSet& Perm) {};
void mu__subrange_91::ArrayLimit(PermSet& Perm) {};
void mu__subrange_91::Limit(PermSet& Perm) {};
void mu__subrange_91::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_92::Permute(PermSet& Perm, int i) {};
void mu__subrange_92::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_92::Canonicalize(PermSet& Perm) {};
void mu__subrange_92::SimpleLimit(PermSet& Perm) {};
void mu__subrange_92::ArrayLimit(PermSet& Perm) {};
void mu__subrange_92::Limit(PermSet& Perm) {};
void mu__subrange_92::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_93::Permute(PermSet& Perm, int i) {};
void mu__subrange_93::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_93::Canonicalize(PermSet& Perm) {};
void mu__subrange_93::SimpleLimit(PermSet& Perm) {};
void mu__subrange_93::ArrayLimit(PermSet& Perm) {};
void mu__subrange_93::Limit(PermSet& Perm) {};
void mu__subrange_93::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_94::Permute(PermSet& Perm, int i) {};
void mu__subrange_94::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_94::Canonicalize(PermSet& Perm) {};
void mu__subrange_94::SimpleLimit(PermSet& Perm) {};
void mu__subrange_94::ArrayLimit(PermSet& Perm) {};
void mu__subrange_94::Limit(PermSet& Perm) {};
void mu__subrange_94::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_95::Permute(PermSet& Perm, int i) {};
void mu__subrange_95::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_95::Canonicalize(PermSet& Perm) {};
void mu__subrange_95::SimpleLimit(PermSet& Perm) {};
void mu__subrange_95::ArrayLimit(PermSet& Perm) {};
void mu__subrange_95::Limit(PermSet& Perm) {};
void mu__subrange_95::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_96::Permute(PermSet& Perm, int i) {};
void mu__subrange_96::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_96::Canonicalize(PermSet& Perm) {};
void mu__subrange_96::SimpleLimit(PermSet& Perm) {};
void mu__subrange_96::ArrayLimit(PermSet& Perm) {};
void mu__subrange_96::Limit(PermSet& Perm) {};
void mu__subrange_96::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_97::Permute(PermSet& Perm, int i) {};
void mu__subrange_97::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_97::Canonicalize(PermSet& Perm) {};
void mu__subrange_97::SimpleLimit(PermSet& Perm) {};
void mu__subrange_97::ArrayLimit(PermSet& Perm) {};
void mu__subrange_97::Limit(PermSet& Perm) {};
void mu__subrange_97::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_98::Permute(PermSet& Perm, int i) {};
void mu__subrange_98::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_98::Canonicalize(PermSet& Perm) {};
void mu__subrange_98::SimpleLimit(PermSet& Perm) {};
void mu__subrange_98::ArrayLimit(PermSet& Perm) {};
void mu__subrange_98::Limit(PermSet& Perm) {};
void mu__subrange_98::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_99::Permute(PermSet& Perm, int i) {};
void mu__subrange_99::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_99::Canonicalize(PermSet& Perm) {};
void mu__subrange_99::SimpleLimit(PermSet& Perm) {};
void mu__subrange_99::ArrayLimit(PermSet& Perm) {};
void mu__subrange_99::Limit(PermSet& Perm) {};
void mu__subrange_99::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_100::Permute(PermSet& Perm, int i) {};
void mu__subrange_100::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_100::Canonicalize(PermSet& Perm) {};
void mu__subrange_100::SimpleLimit(PermSet& Perm) {};
void mu__subrange_100::ArrayLimit(PermSet& Perm) {};
void mu__subrange_100::Limit(PermSet& Perm) {};
void mu__subrange_100::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_101::Permute(PermSet& Perm, int i) {};
void mu__subrange_101::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_101::Canonicalize(PermSet& Perm) {};
void mu__subrange_101::SimpleLimit(PermSet& Perm) {};
void mu__subrange_101::ArrayLimit(PermSet& Perm) {};
void mu__subrange_101::Limit(PermSet& Perm) {};
void mu__subrange_101::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_102::Permute(PermSet& Perm, int i) {};
void mu__subrange_102::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_102::Canonicalize(PermSet& Perm) {};
void mu__subrange_102::SimpleLimit(PermSet& Perm) {};
void mu__subrange_102::ArrayLimit(PermSet& Perm) {};
void mu__subrange_102::Limit(PermSet& Perm) {};
void mu__subrange_102::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_103::Permute(PermSet& Perm, int i) {};
void mu__subrange_103::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_103::Canonicalize(PermSet& Perm) {};
void mu__subrange_103::SimpleLimit(PermSet& Perm) {};
void mu__subrange_103::ArrayLimit(PermSet& Perm) {};
void mu__subrange_103::Limit(PermSet& Perm) {};
void mu__subrange_103::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_104::Permute(PermSet& Perm, int i) {};
void mu__subrange_104::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_104::Canonicalize(PermSet& Perm) {};
void mu__subrange_104::SimpleLimit(PermSet& Perm) {};
void mu__subrange_104::ArrayLimit(PermSet& Perm) {};
void mu__subrange_104::Limit(PermSet& Perm) {};
void mu__subrange_104::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_105::Permute(PermSet& Perm, int i) {};
void mu__subrange_105::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_105::Canonicalize(PermSet& Perm) {};
void mu__subrange_105::SimpleLimit(PermSet& Perm) {};
void mu__subrange_105::ArrayLimit(PermSet& Perm) {};
void mu__subrange_105::Limit(PermSet& Perm) {};
void mu__subrange_105::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_106::Permute(PermSet& Perm, int i) {};
void mu__subrange_106::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_106::Canonicalize(PermSet& Perm) {};
void mu__subrange_106::SimpleLimit(PermSet& Perm) {};
void mu__subrange_106::ArrayLimit(PermSet& Perm) {};
void mu__subrange_106::Limit(PermSet& Perm) {};
void mu__subrange_106::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_107::Permute(PermSet& Perm, int i) {};
void mu__subrange_107::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_107::Canonicalize(PermSet& Perm) {};
void mu__subrange_107::SimpleLimit(PermSet& Perm) {};
void mu__subrange_107::ArrayLimit(PermSet& Perm) {};
void mu__subrange_107::Limit(PermSet& Perm) {};
void mu__subrange_107::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_108::Permute(PermSet& Perm, int i) {};
void mu__subrange_108::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_108::Canonicalize(PermSet& Perm) {};
void mu__subrange_108::SimpleLimit(PermSet& Perm) {};
void mu__subrange_108::ArrayLimit(PermSet& Perm) {};
void mu__subrange_108::Limit(PermSet& Perm) {};
void mu__subrange_108::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_109::Permute(PermSet& Perm, int i) {};
void mu__subrange_109::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_109::Canonicalize(PermSet& Perm) {};
void mu__subrange_109::SimpleLimit(PermSet& Perm) {};
void mu__subrange_109::ArrayLimit(PermSet& Perm) {};
void mu__subrange_109::Limit(PermSet& Perm) {};
void mu__subrange_109::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_110::Permute(PermSet& Perm, int i) {};
void mu__subrange_110::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_110::Canonicalize(PermSet& Perm) {};
void mu__subrange_110::SimpleLimit(PermSet& Perm) {};
void mu__subrange_110::ArrayLimit(PermSet& Perm) {};
void mu__subrange_110::Limit(PermSet& Perm) {};
void mu__subrange_110::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_111::Permute(PermSet& Perm, int i) {};
void mu__subrange_111::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_111::Canonicalize(PermSet& Perm) {};
void mu__subrange_111::SimpleLimit(PermSet& Perm) {};
void mu__subrange_111::ArrayLimit(PermSet& Perm) {};
void mu__subrange_111::Limit(PermSet& Perm) {};
void mu__subrange_111::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_112::Permute(PermSet& Perm, int i) {};
void mu__subrange_112::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_112::Canonicalize(PermSet& Perm) {};
void mu__subrange_112::SimpleLimit(PermSet& Perm) {};
void mu__subrange_112::ArrayLimit(PermSet& Perm) {};
void mu__subrange_112::Limit(PermSet& Perm) {};
void mu__subrange_112::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_113::Permute(PermSet& Perm, int i) {};
void mu__subrange_113::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_113::Canonicalize(PermSet& Perm) {};
void mu__subrange_113::SimpleLimit(PermSet& Perm) {};
void mu__subrange_113::ArrayLimit(PermSet& Perm) {};
void mu__subrange_113::Limit(PermSet& Perm) {};
void mu__subrange_113::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_114::Permute(PermSet& Perm, int i) {};
void mu__subrange_114::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_114::Canonicalize(PermSet& Perm) {};
void mu__subrange_114::SimpleLimit(PermSet& Perm) {};
void mu__subrange_114::ArrayLimit(PermSet& Perm) {};
void mu__subrange_114::Limit(PermSet& Perm) {};
void mu__subrange_114::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_115::Permute(PermSet& Perm, int i) {};
void mu__subrange_115::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_115::Canonicalize(PermSet& Perm) {};
void mu__subrange_115::SimpleLimit(PermSet& Perm) {};
void mu__subrange_115::ArrayLimit(PermSet& Perm) {};
void mu__subrange_115::Limit(PermSet& Perm) {};
void mu__subrange_115::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_116::Permute(PermSet& Perm, int i) {};
void mu__subrange_116::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_116::Canonicalize(PermSet& Perm) {};
void mu__subrange_116::SimpleLimit(PermSet& Perm) {};
void mu__subrange_116::ArrayLimit(PermSet& Perm) {};
void mu__subrange_116::Limit(PermSet& Perm) {};
void mu__subrange_116::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_117::Permute(PermSet& Perm, int i) {};
void mu__subrange_117::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_117::Canonicalize(PermSet& Perm) {};
void mu__subrange_117::SimpleLimit(PermSet& Perm) {};
void mu__subrange_117::ArrayLimit(PermSet& Perm) {};
void mu__subrange_117::Limit(PermSet& Perm) {};
void mu__subrange_117::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_118::Permute(PermSet& Perm, int i) {};
void mu__subrange_118::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_118::Canonicalize(PermSet& Perm) {};
void mu__subrange_118::SimpleLimit(PermSet& Perm) {};
void mu__subrange_118::ArrayLimit(PermSet& Perm) {};
void mu__subrange_118::Limit(PermSet& Perm) {};
void mu__subrange_118::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_119::Permute(PermSet& Perm, int i) {};
void mu__subrange_119::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_119::Canonicalize(PermSet& Perm) {};
void mu__subrange_119::SimpleLimit(PermSet& Perm) {};
void mu__subrange_119::ArrayLimit(PermSet& Perm) {};
void mu__subrange_119::Limit(PermSet& Perm) {};
void mu__subrange_119::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_120::Permute(PermSet& Perm, int i) {};
void mu__subrange_120::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_120::Canonicalize(PermSet& Perm) {};
void mu__subrange_120::SimpleLimit(PermSet& Perm) {};
void mu__subrange_120::ArrayLimit(PermSet& Perm) {};
void mu__subrange_120::Limit(PermSet& Perm) {};
void mu__subrange_120::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_121::Permute(PermSet& Perm, int i) {};
void mu__subrange_121::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_121::Canonicalize(PermSet& Perm) {};
void mu__subrange_121::SimpleLimit(PermSet& Perm) {};
void mu__subrange_121::ArrayLimit(PermSet& Perm) {};
void mu__subrange_121::Limit(PermSet& Perm) {};
void mu__subrange_121::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_122::Permute(PermSet& Perm, int i) {};
void mu__subrange_122::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_122::Canonicalize(PermSet& Perm) {};
void mu__subrange_122::SimpleLimit(PermSet& Perm) {};
void mu__subrange_122::ArrayLimit(PermSet& Perm) {};
void mu__subrange_122::Limit(PermSet& Perm) {};
void mu__subrange_122::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_123::Permute(PermSet& Perm, int i) {};
void mu__subrange_123::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_123::Canonicalize(PermSet& Perm) {};
void mu__subrange_123::SimpleLimit(PermSet& Perm) {};
void mu__subrange_123::ArrayLimit(PermSet& Perm) {};
void mu__subrange_123::Limit(PermSet& Perm) {};
void mu__subrange_123::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_124::Permute(PermSet& Perm, int i) {};
void mu__subrange_124::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_124::Canonicalize(PermSet& Perm) {};
void mu__subrange_124::SimpleLimit(PermSet& Perm) {};
void mu__subrange_124::ArrayLimit(PermSet& Perm) {};
void mu__subrange_124::Limit(PermSet& Perm) {};
void mu__subrange_124::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_125::Permute(PermSet& Perm, int i) {};
void mu__subrange_125::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_125::Canonicalize(PermSet& Perm) {};
void mu__subrange_125::SimpleLimit(PermSet& Perm) {};
void mu__subrange_125::ArrayLimit(PermSet& Perm) {};
void mu__subrange_125::Limit(PermSet& Perm) {};
void mu__subrange_125::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_126::Permute(PermSet& Perm, int i) {};
void mu__subrange_126::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_126::Canonicalize(PermSet& Perm) {};
void mu__subrange_126::SimpleLimit(PermSet& Perm) {};
void mu__subrange_126::ArrayLimit(PermSet& Perm) {};
void mu__subrange_126::Limit(PermSet& Perm) {};
void mu__subrange_126::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_127::Permute(PermSet& Perm, int i) {};
void mu__subrange_127::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_127::Canonicalize(PermSet& Perm) {};
void mu__subrange_127::SimpleLimit(PermSet& Perm) {};
void mu__subrange_127::ArrayLimit(PermSet& Perm) {};
void mu__subrange_127::Limit(PermSet& Perm) {};
void mu__subrange_127::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_128::Permute(PermSet& Perm, int i) {};
void mu__subrange_128::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_128::Canonicalize(PermSet& Perm) {};
void mu__subrange_128::SimpleLimit(PermSet& Perm) {};
void mu__subrange_128::ArrayLimit(PermSet& Perm) {};
void mu__subrange_128::Limit(PermSet& Perm) {};
void mu__subrange_128::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_129::Permute(PermSet& Perm, int i) {};
void mu__subrange_129::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_129::Canonicalize(PermSet& Perm) {};
void mu__subrange_129::SimpleLimit(PermSet& Perm) {};
void mu__subrange_129::ArrayLimit(PermSet& Perm) {};
void mu__subrange_129::Limit(PermSet& Perm) {};
void mu__subrange_129::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_130::Permute(PermSet& Perm, int i) {};
void mu__subrange_130::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_130::Canonicalize(PermSet& Perm) {};
void mu__subrange_130::SimpleLimit(PermSet& Perm) {};
void mu__subrange_130::ArrayLimit(PermSet& Perm) {};
void mu__subrange_130::Limit(PermSet& Perm) {};
void mu__subrange_130::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_131::Permute(PermSet& Perm, int i) {};
void mu__subrange_131::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_131::Canonicalize(PermSet& Perm) {};
void mu__subrange_131::SimpleLimit(PermSet& Perm) {};
void mu__subrange_131::ArrayLimit(PermSet& Perm) {};
void mu__subrange_131::Limit(PermSet& Perm) {};
void mu__subrange_131::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_132::Permute(PermSet& Perm, int i) {};
void mu__subrange_132::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_132::Canonicalize(PermSet& Perm) {};
void mu__subrange_132::SimpleLimit(PermSet& Perm) {};
void mu__subrange_132::ArrayLimit(PermSet& Perm) {};
void mu__subrange_132::Limit(PermSet& Perm) {};
void mu__subrange_132::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_133::Permute(PermSet& Perm, int i) {};
void mu__subrange_133::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_133::Canonicalize(PermSet& Perm) {};
void mu__subrange_133::SimpleLimit(PermSet& Perm) {};
void mu__subrange_133::ArrayLimit(PermSet& Perm) {};
void mu__subrange_133::Limit(PermSet& Perm) {};
void mu__subrange_133::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_134::Permute(PermSet& Perm, int i) {};
void mu__subrange_134::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_134::Canonicalize(PermSet& Perm) {};
void mu__subrange_134::SimpleLimit(PermSet& Perm) {};
void mu__subrange_134::ArrayLimit(PermSet& Perm) {};
void mu__subrange_134::Limit(PermSet& Perm) {};
void mu__subrange_134::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_135::Permute(PermSet& Perm, int i) {};
void mu__subrange_135::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_135::Canonicalize(PermSet& Perm) {};
void mu__subrange_135::SimpleLimit(PermSet& Perm) {};
void mu__subrange_135::ArrayLimit(PermSet& Perm) {};
void mu__subrange_135::Limit(PermSet& Perm) {};
void mu__subrange_135::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_136::Permute(PermSet& Perm, int i) {};
void mu__subrange_136::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_136::Canonicalize(PermSet& Perm) {};
void mu__subrange_136::SimpleLimit(PermSet& Perm) {};
void mu__subrange_136::ArrayLimit(PermSet& Perm) {};
void mu__subrange_136::Limit(PermSet& Perm) {};
void mu__subrange_136::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_137::Permute(PermSet& Perm, int i) {};
void mu__subrange_137::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_137::Canonicalize(PermSet& Perm) {};
void mu__subrange_137::SimpleLimit(PermSet& Perm) {};
void mu__subrange_137::ArrayLimit(PermSet& Perm) {};
void mu__subrange_137::Limit(PermSet& Perm) {};
void mu__subrange_137::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_138::Permute(PermSet& Perm, int i) {};
void mu__subrange_138::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_138::Canonicalize(PermSet& Perm) {};
void mu__subrange_138::SimpleLimit(PermSet& Perm) {};
void mu__subrange_138::ArrayLimit(PermSet& Perm) {};
void mu__subrange_138::Limit(PermSet& Perm) {};
void mu__subrange_138::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_139::Permute(PermSet& Perm, int i) {};
void mu__subrange_139::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_139::Canonicalize(PermSet& Perm) {};
void mu__subrange_139::SimpleLimit(PermSet& Perm) {};
void mu__subrange_139::ArrayLimit(PermSet& Perm) {};
void mu__subrange_139::Limit(PermSet& Perm) {};
void mu__subrange_139::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_140::Permute(PermSet& Perm, int i) {};
void mu__subrange_140::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_140::Canonicalize(PermSet& Perm) {};
void mu__subrange_140::SimpleLimit(PermSet& Perm) {};
void mu__subrange_140::ArrayLimit(PermSet& Perm) {};
void mu__subrange_140::Limit(PermSet& Perm) {};
void mu__subrange_140::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_141::Permute(PermSet& Perm, int i) {};
void mu__subrange_141::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_141::Canonicalize(PermSet& Perm) {};
void mu__subrange_141::SimpleLimit(PermSet& Perm) {};
void mu__subrange_141::ArrayLimit(PermSet& Perm) {};
void mu__subrange_141::Limit(PermSet& Perm) {};
void mu__subrange_141::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_142::Permute(PermSet& Perm, int i) {};
void mu__subrange_142::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_142::Canonicalize(PermSet& Perm) {};
void mu__subrange_142::SimpleLimit(PermSet& Perm) {};
void mu__subrange_142::ArrayLimit(PermSet& Perm) {};
void mu__subrange_142::Limit(PermSet& Perm) {};
void mu__subrange_142::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_143::Permute(PermSet& Perm, int i) {};
void mu__subrange_143::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_143::Canonicalize(PermSet& Perm) {};
void mu__subrange_143::SimpleLimit(PermSet& Perm) {};
void mu__subrange_143::ArrayLimit(PermSet& Perm) {};
void mu__subrange_143::Limit(PermSet& Perm) {};
void mu__subrange_143::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_144::Permute(PermSet& Perm, int i) {};
void mu__subrange_144::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_144::Canonicalize(PermSet& Perm) {};
void mu__subrange_144::SimpleLimit(PermSet& Perm) {};
void mu__subrange_144::ArrayLimit(PermSet& Perm) {};
void mu__subrange_144::Limit(PermSet& Perm) {};
void mu__subrange_144::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_145::Permute(PermSet& Perm, int i) {};
void mu__subrange_145::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_145::Canonicalize(PermSet& Perm) {};
void mu__subrange_145::SimpleLimit(PermSet& Perm) {};
void mu__subrange_145::ArrayLimit(PermSet& Perm) {};
void mu__subrange_145::Limit(PermSet& Perm) {};
void mu__subrange_145::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_146::Permute(PermSet& Perm, int i) {};
void mu__subrange_146::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_146::Canonicalize(PermSet& Perm) {};
void mu__subrange_146::SimpleLimit(PermSet& Perm) {};
void mu__subrange_146::ArrayLimit(PermSet& Perm) {};
void mu__subrange_146::Limit(PermSet& Perm) {};
void mu__subrange_146::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_147::Permute(PermSet& Perm, int i) {};
void mu__subrange_147::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_147::Canonicalize(PermSet& Perm) {};
void mu__subrange_147::SimpleLimit(PermSet& Perm) {};
void mu__subrange_147::ArrayLimit(PermSet& Perm) {};
void mu__subrange_147::Limit(PermSet& Perm) {};
void mu__subrange_147::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_148::Permute(PermSet& Perm, int i) {};
void mu__subrange_148::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_148::Canonicalize(PermSet& Perm) {};
void mu__subrange_148::SimpleLimit(PermSet& Perm) {};
void mu__subrange_148::ArrayLimit(PermSet& Perm) {};
void mu__subrange_148::Limit(PermSet& Perm) {};
void mu__subrange_148::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_149::Permute(PermSet& Perm, int i) {};
void mu__subrange_149::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_149::Canonicalize(PermSet& Perm) {};
void mu__subrange_149::SimpleLimit(PermSet& Perm) {};
void mu__subrange_149::ArrayLimit(PermSet& Perm) {};
void mu__subrange_149::Limit(PermSet& Perm) {};
void mu__subrange_149::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_150::Permute(PermSet& Perm, int i) {};
void mu__subrange_150::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_150::Canonicalize(PermSet& Perm) {};
void mu__subrange_150::SimpleLimit(PermSet& Perm) {};
void mu__subrange_150::ArrayLimit(PermSet& Perm) {};
void mu__subrange_150::Limit(PermSet& Perm) {};
void mu__subrange_150::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_151::Permute(PermSet& Perm, int i) {};
void mu__subrange_151::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_151::Canonicalize(PermSet& Perm) {};
void mu__subrange_151::SimpleLimit(PermSet& Perm) {};
void mu__subrange_151::ArrayLimit(PermSet& Perm) {};
void mu__subrange_151::Limit(PermSet& Perm) {};
void mu__subrange_151::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_152::Permute(PermSet& Perm, int i) {};
void mu__subrange_152::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_152::Canonicalize(PermSet& Perm) {};
void mu__subrange_152::SimpleLimit(PermSet& Perm) {};
void mu__subrange_152::ArrayLimit(PermSet& Perm) {};
void mu__subrange_152::Limit(PermSet& Perm) {};
void mu__subrange_152::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_153::Permute(PermSet& Perm, int i) {};
void mu__subrange_153::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_153::Canonicalize(PermSet& Perm) {};
void mu__subrange_153::SimpleLimit(PermSet& Perm) {};
void mu__subrange_153::ArrayLimit(PermSet& Perm) {};
void mu__subrange_153::Limit(PermSet& Perm) {};
void mu__subrange_153::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_154::Permute(PermSet& Perm, int i) {};
void mu__subrange_154::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_154::Canonicalize(PermSet& Perm) {};
void mu__subrange_154::SimpleLimit(PermSet& Perm) {};
void mu__subrange_154::ArrayLimit(PermSet& Perm) {};
void mu__subrange_154::Limit(PermSet& Perm) {};
void mu__subrange_154::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_155::Permute(PermSet& Perm, int i) {};
void mu__subrange_155::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_155::Canonicalize(PermSet& Perm) {};
void mu__subrange_155::SimpleLimit(PermSet& Perm) {};
void mu__subrange_155::ArrayLimit(PermSet& Perm) {};
void mu__subrange_155::Limit(PermSet& Perm) {};
void mu__subrange_155::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_156::Permute(PermSet& Perm, int i) {};
void mu__subrange_156::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_156::Canonicalize(PermSet& Perm) {};
void mu__subrange_156::SimpleLimit(PermSet& Perm) {};
void mu__subrange_156::ArrayLimit(PermSet& Perm) {};
void mu__subrange_156::Limit(PermSet& Perm) {};
void mu__subrange_156::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_157::Permute(PermSet& Perm, int i) {};
void mu__subrange_157::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_157::Canonicalize(PermSet& Perm) {};
void mu__subrange_157::SimpleLimit(PermSet& Perm) {};
void mu__subrange_157::ArrayLimit(PermSet& Perm) {};
void mu__subrange_157::Limit(PermSet& Perm) {};
void mu__subrange_157::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_158::Permute(PermSet& Perm, int i) {};
void mu__subrange_158::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_158::Canonicalize(PermSet& Perm) {};
void mu__subrange_158::SimpleLimit(PermSet& Perm) {};
void mu__subrange_158::ArrayLimit(PermSet& Perm) {};
void mu__subrange_158::Limit(PermSet& Perm) {};
void mu__subrange_158::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_159::Permute(PermSet& Perm, int i) {};
void mu__subrange_159::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_159::Canonicalize(PermSet& Perm) {};
void mu__subrange_159::SimpleLimit(PermSet& Perm) {};
void mu__subrange_159::ArrayLimit(PermSet& Perm) {};
void mu__subrange_159::Limit(PermSet& Perm) {};
void mu__subrange_159::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_160::Permute(PermSet& Perm, int i) {};
void mu__subrange_160::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_160::Canonicalize(PermSet& Perm) {};
void mu__subrange_160::SimpleLimit(PermSet& Perm) {};
void mu__subrange_160::ArrayLimit(PermSet& Perm) {};
void mu__subrange_160::Limit(PermSet& Perm) {};
void mu__subrange_160::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_161::Permute(PermSet& Perm, int i) {};
void mu__subrange_161::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_161::Canonicalize(PermSet& Perm) {};
void mu__subrange_161::SimpleLimit(PermSet& Perm) {};
void mu__subrange_161::ArrayLimit(PermSet& Perm) {};
void mu__subrange_161::Limit(PermSet& Perm) {};
void mu__subrange_161::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_162::Permute(PermSet& Perm, int i) {};
void mu__subrange_162::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_162::Canonicalize(PermSet& Perm) {};
void mu__subrange_162::SimpleLimit(PermSet& Perm) {};
void mu__subrange_162::ArrayLimit(PermSet& Perm) {};
void mu__subrange_162::Limit(PermSet& Perm) {};
void mu__subrange_162::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_163::Permute(PermSet& Perm, int i) {};
void mu__subrange_163::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_163::Canonicalize(PermSet& Perm) {};
void mu__subrange_163::SimpleLimit(PermSet& Perm) {};
void mu__subrange_163::ArrayLimit(PermSet& Perm) {};
void mu__subrange_163::Limit(PermSet& Perm) {};
void mu__subrange_163::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_164::Permute(PermSet& Perm, int i) {};
void mu__subrange_164::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_164::Canonicalize(PermSet& Perm) {};
void mu__subrange_164::SimpleLimit(PermSet& Perm) {};
void mu__subrange_164::ArrayLimit(PermSet& Perm) {};
void mu__subrange_164::Limit(PermSet& Perm) {};
void mu__subrange_164::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_165::Permute(PermSet& Perm, int i) {};
void mu__subrange_165::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_165::Canonicalize(PermSet& Perm) {};
void mu__subrange_165::SimpleLimit(PermSet& Perm) {};
void mu__subrange_165::ArrayLimit(PermSet& Perm) {};
void mu__subrange_165::Limit(PermSet& Perm) {};
void mu__subrange_165::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_166::Permute(PermSet& Perm, int i) {};
void mu__subrange_166::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_166::Canonicalize(PermSet& Perm) {};
void mu__subrange_166::SimpleLimit(PermSet& Perm) {};
void mu__subrange_166::ArrayLimit(PermSet& Perm) {};
void mu__subrange_166::Limit(PermSet& Perm) {};
void mu__subrange_166::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_167::Permute(PermSet& Perm, int i) {};
void mu__subrange_167::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_167::Canonicalize(PermSet& Perm) {};
void mu__subrange_167::SimpleLimit(PermSet& Perm) {};
void mu__subrange_167::ArrayLimit(PermSet& Perm) {};
void mu__subrange_167::Limit(PermSet& Perm) {};
void mu__subrange_167::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_168::Permute(PermSet& Perm, int i) {};
void mu__subrange_168::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_168::Canonicalize(PermSet& Perm) {};
void mu__subrange_168::SimpleLimit(PermSet& Perm) {};
void mu__subrange_168::ArrayLimit(PermSet& Perm) {};
void mu__subrange_168::Limit(PermSet& Perm) {};
void mu__subrange_168::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_169::Permute(PermSet& Perm, int i) {};
void mu__subrange_169::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_169::Canonicalize(PermSet& Perm) {};
void mu__subrange_169::SimpleLimit(PermSet& Perm) {};
void mu__subrange_169::ArrayLimit(PermSet& Perm) {};
void mu__subrange_169::Limit(PermSet& Perm) {};
void mu__subrange_169::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_170::Permute(PermSet& Perm, int i) {};
void mu__subrange_170::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_170::Canonicalize(PermSet& Perm) {};
void mu__subrange_170::SimpleLimit(PermSet& Perm) {};
void mu__subrange_170::ArrayLimit(PermSet& Perm) {};
void mu__subrange_170::Limit(PermSet& Perm) {};
void mu__subrange_170::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_171::Permute(PermSet& Perm, int i) {};
void mu__subrange_171::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_171::Canonicalize(PermSet& Perm) {};
void mu__subrange_171::SimpleLimit(PermSet& Perm) {};
void mu__subrange_171::ArrayLimit(PermSet& Perm) {};
void mu__subrange_171::Limit(PermSet& Perm) {};
void mu__subrange_171::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_172::Permute(PermSet& Perm, int i) {};
void mu__subrange_172::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_172::Canonicalize(PermSet& Perm) {};
void mu__subrange_172::SimpleLimit(PermSet& Perm) {};
void mu__subrange_172::ArrayLimit(PermSet& Perm) {};
void mu__subrange_172::Limit(PermSet& Perm) {};
void mu__subrange_172::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_173::Permute(PermSet& Perm, int i) {};
void mu__subrange_173::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_173::Canonicalize(PermSet& Perm) {};
void mu__subrange_173::SimpleLimit(PermSet& Perm) {};
void mu__subrange_173::ArrayLimit(PermSet& Perm) {};
void mu__subrange_173::Limit(PermSet& Perm) {};
void mu__subrange_173::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_174::Permute(PermSet& Perm, int i) {};
void mu__subrange_174::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_174::Canonicalize(PermSet& Perm) {};
void mu__subrange_174::SimpleLimit(PermSet& Perm) {};
void mu__subrange_174::ArrayLimit(PermSet& Perm) {};
void mu__subrange_174::Limit(PermSet& Perm) {};
void mu__subrange_174::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_175::Permute(PermSet& Perm, int i) {};
void mu__subrange_175::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_175::Canonicalize(PermSet& Perm) {};
void mu__subrange_175::SimpleLimit(PermSet& Perm) {};
void mu__subrange_175::ArrayLimit(PermSet& Perm) {};
void mu__subrange_175::Limit(PermSet& Perm) {};
void mu__subrange_175::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_176::Permute(PermSet& Perm, int i) {};
void mu__subrange_176::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_176::Canonicalize(PermSet& Perm) {};
void mu__subrange_176::SimpleLimit(PermSet& Perm) {};
void mu__subrange_176::ArrayLimit(PermSet& Perm) {};
void mu__subrange_176::Limit(PermSet& Perm) {};
void mu__subrange_176::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_177::Permute(PermSet& Perm, int i) {};
void mu__subrange_177::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_177::Canonicalize(PermSet& Perm) {};
void mu__subrange_177::SimpleLimit(PermSet& Perm) {};
void mu__subrange_177::ArrayLimit(PermSet& Perm) {};
void mu__subrange_177::Limit(PermSet& Perm) {};
void mu__subrange_177::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_178::Permute(PermSet& Perm, int i) {};
void mu__subrange_178::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_178::Canonicalize(PermSet& Perm) {};
void mu__subrange_178::SimpleLimit(PermSet& Perm) {};
void mu__subrange_178::ArrayLimit(PermSet& Perm) {};
void mu__subrange_178::Limit(PermSet& Perm) {};
void mu__subrange_178::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_179::Permute(PermSet& Perm, int i) {};
void mu__subrange_179::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_179::Canonicalize(PermSet& Perm) {};
void mu__subrange_179::SimpleLimit(PermSet& Perm) {};
void mu__subrange_179::ArrayLimit(PermSet& Perm) {};
void mu__subrange_179::Limit(PermSet& Perm) {};
void mu__subrange_179::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_180::Permute(PermSet& Perm, int i) {};
void mu__subrange_180::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_180::Canonicalize(PermSet& Perm) {};
void mu__subrange_180::SimpleLimit(PermSet& Perm) {};
void mu__subrange_180::ArrayLimit(PermSet& Perm) {};
void mu__subrange_180::Limit(PermSet& Perm) {};
void mu__subrange_180::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_181::Permute(PermSet& Perm, int i) {};
void mu__subrange_181::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_181::Canonicalize(PermSet& Perm) {};
void mu__subrange_181::SimpleLimit(PermSet& Perm) {};
void mu__subrange_181::ArrayLimit(PermSet& Perm) {};
void mu__subrange_181::Limit(PermSet& Perm) {};
void mu__subrange_181::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_182::Permute(PermSet& Perm, int i) {};
void mu__subrange_182::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_182::Canonicalize(PermSet& Perm) {};
void mu__subrange_182::SimpleLimit(PermSet& Perm) {};
void mu__subrange_182::ArrayLimit(PermSet& Perm) {};
void mu__subrange_182::Limit(PermSet& Perm) {};
void mu__subrange_182::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_183::Permute(PermSet& Perm, int i) {};
void mu__subrange_183::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_183::Canonicalize(PermSet& Perm) {};
void mu__subrange_183::SimpleLimit(PermSet& Perm) {};
void mu__subrange_183::ArrayLimit(PermSet& Perm) {};
void mu__subrange_183::Limit(PermSet& Perm) {};
void mu__subrange_183::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_184::Permute(PermSet& Perm, int i) {};
void mu__subrange_184::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_184::Canonicalize(PermSet& Perm) {};
void mu__subrange_184::SimpleLimit(PermSet& Perm) {};
void mu__subrange_184::ArrayLimit(PermSet& Perm) {};
void mu__subrange_184::Limit(PermSet& Perm) {};
void mu__subrange_184::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_185::Permute(PermSet& Perm, int i) {};
void mu__subrange_185::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_185::Canonicalize(PermSet& Perm) {};
void mu__subrange_185::SimpleLimit(PermSet& Perm) {};
void mu__subrange_185::ArrayLimit(PermSet& Perm) {};
void mu__subrange_185::Limit(PermSet& Perm) {};
void mu__subrange_185::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_186::Permute(PermSet& Perm, int i) {};
void mu__subrange_186::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_186::Canonicalize(PermSet& Perm) {};
void mu__subrange_186::SimpleLimit(PermSet& Perm) {};
void mu__subrange_186::ArrayLimit(PermSet& Perm) {};
void mu__subrange_186::Limit(PermSet& Perm) {};
void mu__subrange_186::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_187::Permute(PermSet& Perm, int i) {};
void mu__subrange_187::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_187::Canonicalize(PermSet& Perm) {};
void mu__subrange_187::SimpleLimit(PermSet& Perm) {};
void mu__subrange_187::ArrayLimit(PermSet& Perm) {};
void mu__subrange_187::Limit(PermSet& Perm) {};
void mu__subrange_187::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_188::Permute(PermSet& Perm, int i) {};
void mu__subrange_188::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_188::Canonicalize(PermSet& Perm) {};
void mu__subrange_188::SimpleLimit(PermSet& Perm) {};
void mu__subrange_188::ArrayLimit(PermSet& Perm) {};
void mu__subrange_188::Limit(PermSet& Perm) {};
void mu__subrange_188::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_189::Permute(PermSet& Perm, int i) {};
void mu__subrange_189::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_189::Canonicalize(PermSet& Perm) {};
void mu__subrange_189::SimpleLimit(PermSet& Perm) {};
void mu__subrange_189::ArrayLimit(PermSet& Perm) {};
void mu__subrange_189::Limit(PermSet& Perm) {};
void mu__subrange_189::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_190::Permute(PermSet& Perm, int i) {};
void mu__subrange_190::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_190::Canonicalize(PermSet& Perm) {};
void mu__subrange_190::SimpleLimit(PermSet& Perm) {};
void mu__subrange_190::ArrayLimit(PermSet& Perm) {};
void mu__subrange_190::Limit(PermSet& Perm) {};
void mu__subrange_190::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_191::Permute(PermSet& Perm, int i) {};
void mu__subrange_191::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_191::Canonicalize(PermSet& Perm) {};
void mu__subrange_191::SimpleLimit(PermSet& Perm) {};
void mu__subrange_191::ArrayLimit(PermSet& Perm) {};
void mu__subrange_191::Limit(PermSet& Perm) {};
void mu__subrange_191::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_192::Permute(PermSet& Perm, int i) {};
void mu__subrange_192::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_192::Canonicalize(PermSet& Perm) {};
void mu__subrange_192::SimpleLimit(PermSet& Perm) {};
void mu__subrange_192::ArrayLimit(PermSet& Perm) {};
void mu__subrange_192::Limit(PermSet& Perm) {};
void mu__subrange_192::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_193::Permute(PermSet& Perm, int i) {};
void mu__subrange_193::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_193::Canonicalize(PermSet& Perm) {};
void mu__subrange_193::SimpleLimit(PermSet& Perm) {};
void mu__subrange_193::ArrayLimit(PermSet& Perm) {};
void mu__subrange_193::Limit(PermSet& Perm) {};
void mu__subrange_193::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_194::Permute(PermSet& Perm, int i) {};
void mu__subrange_194::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_194::Canonicalize(PermSet& Perm) {};
void mu__subrange_194::SimpleLimit(PermSet& Perm) {};
void mu__subrange_194::ArrayLimit(PermSet& Perm) {};
void mu__subrange_194::Limit(PermSet& Perm) {};
void mu__subrange_194::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_195::Permute(PermSet& Perm, int i) {};
void mu__subrange_195::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_195::Canonicalize(PermSet& Perm) {};
void mu__subrange_195::SimpleLimit(PermSet& Perm) {};
void mu__subrange_195::ArrayLimit(PermSet& Perm) {};
void mu__subrange_195::Limit(PermSet& Perm) {};
void mu__subrange_195::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_196::Permute(PermSet& Perm, int i) {};
void mu__subrange_196::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_196::Canonicalize(PermSet& Perm) {};
void mu__subrange_196::SimpleLimit(PermSet& Perm) {};
void mu__subrange_196::ArrayLimit(PermSet& Perm) {};
void mu__subrange_196::Limit(PermSet& Perm) {};
void mu__subrange_196::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_197::Permute(PermSet& Perm, int i) {};
void mu__subrange_197::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_197::Canonicalize(PermSet& Perm) {};
void mu__subrange_197::SimpleLimit(PermSet& Perm) {};
void mu__subrange_197::ArrayLimit(PermSet& Perm) {};
void mu__subrange_197::Limit(PermSet& Perm) {};
void mu__subrange_197::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_198::Permute(PermSet& Perm, int i) {};
void mu__subrange_198::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_198::Canonicalize(PermSet& Perm) {};
void mu__subrange_198::SimpleLimit(PermSet& Perm) {};
void mu__subrange_198::ArrayLimit(PermSet& Perm) {};
void mu__subrange_198::Limit(PermSet& Perm) {};
void mu__subrange_198::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_199::Permute(PermSet& Perm, int i) {};
void mu__subrange_199::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_199::Canonicalize(PermSet& Perm) {};
void mu__subrange_199::SimpleLimit(PermSet& Perm) {};
void mu__subrange_199::ArrayLimit(PermSet& Perm) {};
void mu__subrange_199::Limit(PermSet& Perm) {};
void mu__subrange_199::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_200::Permute(PermSet& Perm, int i) {};
void mu__subrange_200::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_200::Canonicalize(PermSet& Perm) {};
void mu__subrange_200::SimpleLimit(PermSet& Perm) {};
void mu__subrange_200::ArrayLimit(PermSet& Perm) {};
void mu__subrange_200::Limit(PermSet& Perm) {};
void mu__subrange_200::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_201::Permute(PermSet& Perm, int i) {};
void mu__subrange_201::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_201::Canonicalize(PermSet& Perm) {};
void mu__subrange_201::SimpleLimit(PermSet& Perm) {};
void mu__subrange_201::ArrayLimit(PermSet& Perm) {};
void mu__subrange_201::Limit(PermSet& Perm) {};
void mu__subrange_201::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_202::Permute(PermSet& Perm, int i) {};
void mu__subrange_202::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_202::Canonicalize(PermSet& Perm) {};
void mu__subrange_202::SimpleLimit(PermSet& Perm) {};
void mu__subrange_202::ArrayLimit(PermSet& Perm) {};
void mu__subrange_202::Limit(PermSet& Perm) {};
void mu__subrange_202::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_203::Permute(PermSet& Perm, int i) {};
void mu__subrange_203::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_203::Canonicalize(PermSet& Perm) {};
void mu__subrange_203::SimpleLimit(PermSet& Perm) {};
void mu__subrange_203::ArrayLimit(PermSet& Perm) {};
void mu__subrange_203::Limit(PermSet& Perm) {};
void mu__subrange_203::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_204::Permute(PermSet& Perm, int i) {};
void mu__subrange_204::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_204::Canonicalize(PermSet& Perm) {};
void mu__subrange_204::SimpleLimit(PermSet& Perm) {};
void mu__subrange_204::ArrayLimit(PermSet& Perm) {};
void mu__subrange_204::Limit(PermSet& Perm) {};
void mu__subrange_204::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_205::Permute(PermSet& Perm, int i) {};
void mu__subrange_205::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_205::Canonicalize(PermSet& Perm) {};
void mu__subrange_205::SimpleLimit(PermSet& Perm) {};
void mu__subrange_205::ArrayLimit(PermSet& Perm) {};
void mu__subrange_205::Limit(PermSet& Perm) {};
void mu__subrange_205::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_206::Permute(PermSet& Perm, int i) {};
void mu__subrange_206::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_206::Canonicalize(PermSet& Perm) {};
void mu__subrange_206::SimpleLimit(PermSet& Perm) {};
void mu__subrange_206::ArrayLimit(PermSet& Perm) {};
void mu__subrange_206::Limit(PermSet& Perm) {};
void mu__subrange_206::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_207::Permute(PermSet& Perm, int i) {};
void mu__subrange_207::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_207::Canonicalize(PermSet& Perm) {};
void mu__subrange_207::SimpleLimit(PermSet& Perm) {};
void mu__subrange_207::ArrayLimit(PermSet& Perm) {};
void mu__subrange_207::Limit(PermSet& Perm) {};
void mu__subrange_207::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_208::Permute(PermSet& Perm, int i) {};
void mu__subrange_208::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_208::Canonicalize(PermSet& Perm) {};
void mu__subrange_208::SimpleLimit(PermSet& Perm) {};
void mu__subrange_208::ArrayLimit(PermSet& Perm) {};
void mu__subrange_208::Limit(PermSet& Perm) {};
void mu__subrange_208::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_209::Permute(PermSet& Perm, int i) {};
void mu__subrange_209::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_209::Canonicalize(PermSet& Perm) {};
void mu__subrange_209::SimpleLimit(PermSet& Perm) {};
void mu__subrange_209::ArrayLimit(PermSet& Perm) {};
void mu__subrange_209::Limit(PermSet& Perm) {};
void mu__subrange_209::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_210::Permute(PermSet& Perm, int i) {};
void mu__subrange_210::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_210::Canonicalize(PermSet& Perm) {};
void mu__subrange_210::SimpleLimit(PermSet& Perm) {};
void mu__subrange_210::ArrayLimit(PermSet& Perm) {};
void mu__subrange_210::Limit(PermSet& Perm) {};
void mu__subrange_210::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_211::Permute(PermSet& Perm, int i) {};
void mu__subrange_211::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_211::Canonicalize(PermSet& Perm) {};
void mu__subrange_211::SimpleLimit(PermSet& Perm) {};
void mu__subrange_211::ArrayLimit(PermSet& Perm) {};
void mu__subrange_211::Limit(PermSet& Perm) {};
void mu__subrange_211::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_212::Permute(PermSet& Perm, int i) {};
void mu__subrange_212::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_212::Canonicalize(PermSet& Perm) {};
void mu__subrange_212::SimpleLimit(PermSet& Perm) {};
void mu__subrange_212::ArrayLimit(PermSet& Perm) {};
void mu__subrange_212::Limit(PermSet& Perm) {};
void mu__subrange_212::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_213::Permute(PermSet& Perm, int i) {};
void mu__subrange_213::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_213::Canonicalize(PermSet& Perm) {};
void mu__subrange_213::SimpleLimit(PermSet& Perm) {};
void mu__subrange_213::ArrayLimit(PermSet& Perm) {};
void mu__subrange_213::Limit(PermSet& Perm) {};
void mu__subrange_213::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_214::Permute(PermSet& Perm, int i) {};
void mu__subrange_214::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_214::Canonicalize(PermSet& Perm) {};
void mu__subrange_214::SimpleLimit(PermSet& Perm) {};
void mu__subrange_214::ArrayLimit(PermSet& Perm) {};
void mu__subrange_214::Limit(PermSet& Perm) {};
void mu__subrange_214::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_215::Permute(PermSet& Perm, int i) {};
void mu__subrange_215::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_215::Canonicalize(PermSet& Perm) {};
void mu__subrange_215::SimpleLimit(PermSet& Perm) {};
void mu__subrange_215::ArrayLimit(PermSet& Perm) {};
void mu__subrange_215::Limit(PermSet& Perm) {};
void mu__subrange_215::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_216::Permute(PermSet& Perm, int i) {};
void mu__subrange_216::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_216::Canonicalize(PermSet& Perm) {};
void mu__subrange_216::SimpleLimit(PermSet& Perm) {};
void mu__subrange_216::ArrayLimit(PermSet& Perm) {};
void mu__subrange_216::Limit(PermSet& Perm) {};
void mu__subrange_216::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_217::Permute(PermSet& Perm, int i) {};
void mu__subrange_217::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_217::Canonicalize(PermSet& Perm) {};
void mu__subrange_217::SimpleLimit(PermSet& Perm) {};
void mu__subrange_217::ArrayLimit(PermSet& Perm) {};
void mu__subrange_217::Limit(PermSet& Perm) {};
void mu__subrange_217::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_218::Permute(PermSet& Perm, int i) {};
void mu__subrange_218::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_218::Canonicalize(PermSet& Perm) {};
void mu__subrange_218::SimpleLimit(PermSet& Perm) {};
void mu__subrange_218::ArrayLimit(PermSet& Perm) {};
void mu__subrange_218::Limit(PermSet& Perm) {};
void mu__subrange_218::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_219::Permute(PermSet& Perm, int i) {};
void mu__subrange_219::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_219::Canonicalize(PermSet& Perm) {};
void mu__subrange_219::SimpleLimit(PermSet& Perm) {};
void mu__subrange_219::ArrayLimit(PermSet& Perm) {};
void mu__subrange_219::Limit(PermSet& Perm) {};
void mu__subrange_219::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_220::Permute(PermSet& Perm, int i) {};
void mu__subrange_220::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_220::Canonicalize(PermSet& Perm) {};
void mu__subrange_220::SimpleLimit(PermSet& Perm) {};
void mu__subrange_220::ArrayLimit(PermSet& Perm) {};
void mu__subrange_220::Limit(PermSet& Perm) {};
void mu__subrange_220::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_221::Permute(PermSet& Perm, int i) {};
void mu__subrange_221::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_221::Canonicalize(PermSet& Perm) {};
void mu__subrange_221::SimpleLimit(PermSet& Perm) {};
void mu__subrange_221::ArrayLimit(PermSet& Perm) {};
void mu__subrange_221::Limit(PermSet& Perm) {};
void mu__subrange_221::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_222::Permute(PermSet& Perm, int i) {};
void mu__subrange_222::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_222::Canonicalize(PermSet& Perm) {};
void mu__subrange_222::SimpleLimit(PermSet& Perm) {};
void mu__subrange_222::ArrayLimit(PermSet& Perm) {};
void mu__subrange_222::Limit(PermSet& Perm) {};
void mu__subrange_222::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_223::Permute(PermSet& Perm, int i) {};
void mu__subrange_223::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_223::Canonicalize(PermSet& Perm) {};
void mu__subrange_223::SimpleLimit(PermSet& Perm) {};
void mu__subrange_223::ArrayLimit(PermSet& Perm) {};
void mu__subrange_223::Limit(PermSet& Perm) {};
void mu__subrange_223::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_224::Permute(PermSet& Perm, int i) {};
void mu__subrange_224::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_224::Canonicalize(PermSet& Perm) {};
void mu__subrange_224::SimpleLimit(PermSet& Perm) {};
void mu__subrange_224::ArrayLimit(PermSet& Perm) {};
void mu__subrange_224::Limit(PermSet& Perm) {};
void mu__subrange_224::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_225::Permute(PermSet& Perm, int i) {};
void mu__subrange_225::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_225::Canonicalize(PermSet& Perm) {};
void mu__subrange_225::SimpleLimit(PermSet& Perm) {};
void mu__subrange_225::ArrayLimit(PermSet& Perm) {};
void mu__subrange_225::Limit(PermSet& Perm) {};
void mu__subrange_225::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_226::Permute(PermSet& Perm, int i) {};
void mu__subrange_226::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_226::Canonicalize(PermSet& Perm) {};
void mu__subrange_226::SimpleLimit(PermSet& Perm) {};
void mu__subrange_226::ArrayLimit(PermSet& Perm) {};
void mu__subrange_226::Limit(PermSet& Perm) {};
void mu__subrange_226::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_227::Permute(PermSet& Perm, int i) {};
void mu__subrange_227::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_227::Canonicalize(PermSet& Perm) {};
void mu__subrange_227::SimpleLimit(PermSet& Perm) {};
void mu__subrange_227::ArrayLimit(PermSet& Perm) {};
void mu__subrange_227::Limit(PermSet& Perm) {};
void mu__subrange_227::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_228::Permute(PermSet& Perm, int i) {};
void mu__subrange_228::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_228::Canonicalize(PermSet& Perm) {};
void mu__subrange_228::SimpleLimit(PermSet& Perm) {};
void mu__subrange_228::ArrayLimit(PermSet& Perm) {};
void mu__subrange_228::Limit(PermSet& Perm) {};
void mu__subrange_228::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_229::Permute(PermSet& Perm, int i) {};
void mu__subrange_229::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_229::Canonicalize(PermSet& Perm) {};
void mu__subrange_229::SimpleLimit(PermSet& Perm) {};
void mu__subrange_229::ArrayLimit(PermSet& Perm) {};
void mu__subrange_229::Limit(PermSet& Perm) {};
void mu__subrange_229::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_230::Permute(PermSet& Perm, int i) {};
void mu__subrange_230::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_230::Canonicalize(PermSet& Perm) {};
void mu__subrange_230::SimpleLimit(PermSet& Perm) {};
void mu__subrange_230::ArrayLimit(PermSet& Perm) {};
void mu__subrange_230::Limit(PermSet& Perm) {};
void mu__subrange_230::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_231::Permute(PermSet& Perm, int i) {};
void mu__subrange_231::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_231::Canonicalize(PermSet& Perm) {};
void mu__subrange_231::SimpleLimit(PermSet& Perm) {};
void mu__subrange_231::ArrayLimit(PermSet& Perm) {};
void mu__subrange_231::Limit(PermSet& Perm) {};
void mu__subrange_231::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_232::Permute(PermSet& Perm, int i) {};
void mu__subrange_232::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_232::Canonicalize(PermSet& Perm) {};
void mu__subrange_232::SimpleLimit(PermSet& Perm) {};
void mu__subrange_232::ArrayLimit(PermSet& Perm) {};
void mu__subrange_232::Limit(PermSet& Perm) {};
void mu__subrange_232::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_233::Permute(PermSet& Perm, int i) {};
void mu__subrange_233::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_233::Canonicalize(PermSet& Perm) {};
void mu__subrange_233::SimpleLimit(PermSet& Perm) {};
void mu__subrange_233::ArrayLimit(PermSet& Perm) {};
void mu__subrange_233::Limit(PermSet& Perm) {};
void mu__subrange_233::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_234::Permute(PermSet& Perm, int i) {};
void mu__subrange_234::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_234::Canonicalize(PermSet& Perm) {};
void mu__subrange_234::SimpleLimit(PermSet& Perm) {};
void mu__subrange_234::ArrayLimit(PermSet& Perm) {};
void mu__subrange_234::Limit(PermSet& Perm) {};
void mu__subrange_234::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_235::Permute(PermSet& Perm, int i) {};
void mu__subrange_235::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_235::Canonicalize(PermSet& Perm) {};
void mu__subrange_235::SimpleLimit(PermSet& Perm) {};
void mu__subrange_235::ArrayLimit(PermSet& Perm) {};
void mu__subrange_235::Limit(PermSet& Perm) {};
void mu__subrange_235::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_236::Permute(PermSet& Perm, int i) {};
void mu__subrange_236::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_236::Canonicalize(PermSet& Perm) {};
void mu__subrange_236::SimpleLimit(PermSet& Perm) {};
void mu__subrange_236::ArrayLimit(PermSet& Perm) {};
void mu__subrange_236::Limit(PermSet& Perm) {};
void mu__subrange_236::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_237::Permute(PermSet& Perm, int i) {};
void mu__subrange_237::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_237::Canonicalize(PermSet& Perm) {};
void mu__subrange_237::SimpleLimit(PermSet& Perm) {};
void mu__subrange_237::ArrayLimit(PermSet& Perm) {};
void mu__subrange_237::Limit(PermSet& Perm) {};
void mu__subrange_237::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_238::Permute(PermSet& Perm, int i) {};
void mu__subrange_238::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_238::Canonicalize(PermSet& Perm) {};
void mu__subrange_238::SimpleLimit(PermSet& Perm) {};
void mu__subrange_238::ArrayLimit(PermSet& Perm) {};
void mu__subrange_238::Limit(PermSet& Perm) {};
void mu__subrange_238::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_239::Permute(PermSet& Perm, int i) {};
void mu__subrange_239::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_239::Canonicalize(PermSet& Perm) {};
void mu__subrange_239::SimpleLimit(PermSet& Perm) {};
void mu__subrange_239::ArrayLimit(PermSet& Perm) {};
void mu__subrange_239::Limit(PermSet& Perm) {};
void mu__subrange_239::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_240::Permute(PermSet& Perm, int i) {};
void mu__subrange_240::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_240::Canonicalize(PermSet& Perm) {};
void mu__subrange_240::SimpleLimit(PermSet& Perm) {};
void mu__subrange_240::ArrayLimit(PermSet& Perm) {};
void mu__subrange_240::Limit(PermSet& Perm) {};
void mu__subrange_240::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_241::Permute(PermSet& Perm, int i) {};
void mu__subrange_241::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_241::Canonicalize(PermSet& Perm) {};
void mu__subrange_241::SimpleLimit(PermSet& Perm) {};
void mu__subrange_241::ArrayLimit(PermSet& Perm) {};
void mu__subrange_241::Limit(PermSet& Perm) {};
void mu__subrange_241::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_242::Permute(PermSet& Perm, int i) {};
void mu__subrange_242::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_242::Canonicalize(PermSet& Perm) {};
void mu__subrange_242::SimpleLimit(PermSet& Perm) {};
void mu__subrange_242::ArrayLimit(PermSet& Perm) {};
void mu__subrange_242::Limit(PermSet& Perm) {};
void mu__subrange_242::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_243::Permute(PermSet& Perm, int i) {};
void mu__subrange_243::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_243::Canonicalize(PermSet& Perm) {};
void mu__subrange_243::SimpleLimit(PermSet& Perm) {};
void mu__subrange_243::ArrayLimit(PermSet& Perm) {};
void mu__subrange_243::Limit(PermSet& Perm) {};
void mu__subrange_243::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_244::Permute(PermSet& Perm, int i) {};
void mu__subrange_244::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_244::Canonicalize(PermSet& Perm) {};
void mu__subrange_244::SimpleLimit(PermSet& Perm) {};
void mu__subrange_244::ArrayLimit(PermSet& Perm) {};
void mu__subrange_244::Limit(PermSet& Perm) {};
void mu__subrange_244::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_245::Permute(PermSet& Perm, int i) {};
void mu__subrange_245::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_245::Canonicalize(PermSet& Perm) {};
void mu__subrange_245::SimpleLimit(PermSet& Perm) {};
void mu__subrange_245::ArrayLimit(PermSet& Perm) {};
void mu__subrange_245::Limit(PermSet& Perm) {};
void mu__subrange_245::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_246::Permute(PermSet& Perm, int i) {};
void mu__subrange_246::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_246::Canonicalize(PermSet& Perm) {};
void mu__subrange_246::SimpleLimit(PermSet& Perm) {};
void mu__subrange_246::ArrayLimit(PermSet& Perm) {};
void mu__subrange_246::Limit(PermSet& Perm) {};
void mu__subrange_246::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_247::Permute(PermSet& Perm, int i) {};
void mu__subrange_247::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_247::Canonicalize(PermSet& Perm) {};
void mu__subrange_247::SimpleLimit(PermSet& Perm) {};
void mu__subrange_247::ArrayLimit(PermSet& Perm) {};
void mu__subrange_247::Limit(PermSet& Perm) {};
void mu__subrange_247::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_248::Permute(PermSet& Perm, int i) {};
void mu__subrange_248::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_248::Canonicalize(PermSet& Perm) {};
void mu__subrange_248::SimpleLimit(PermSet& Perm) {};
void mu__subrange_248::ArrayLimit(PermSet& Perm) {};
void mu__subrange_248::Limit(PermSet& Perm) {};
void mu__subrange_248::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_249::Permute(PermSet& Perm, int i) {};
void mu__subrange_249::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_249::Canonicalize(PermSet& Perm) {};
void mu__subrange_249::SimpleLimit(PermSet& Perm) {};
void mu__subrange_249::ArrayLimit(PermSet& Perm) {};
void mu__subrange_249::Limit(PermSet& Perm) {};
void mu__subrange_249::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_250::Permute(PermSet& Perm, int i) {};
void mu__subrange_250::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_250::Canonicalize(PermSet& Perm) {};
void mu__subrange_250::SimpleLimit(PermSet& Perm) {};
void mu__subrange_250::ArrayLimit(PermSet& Perm) {};
void mu__subrange_250::Limit(PermSet& Perm) {};
void mu__subrange_250::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_251::Permute(PermSet& Perm, int i) {};
void mu__subrange_251::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_251::Canonicalize(PermSet& Perm) {};
void mu__subrange_251::SimpleLimit(PermSet& Perm) {};
void mu__subrange_251::ArrayLimit(PermSet& Perm) {};
void mu__subrange_251::Limit(PermSet& Perm) {};
void mu__subrange_251::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_252::Permute(PermSet& Perm, int i) {};
void mu__subrange_252::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_252::Canonicalize(PermSet& Perm) {};
void mu__subrange_252::SimpleLimit(PermSet& Perm) {};
void mu__subrange_252::ArrayLimit(PermSet& Perm) {};
void mu__subrange_252::Limit(PermSet& Perm) {};
void mu__subrange_252::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_253::Permute(PermSet& Perm, int i) {};
void mu__subrange_253::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_253::Canonicalize(PermSet& Perm) {};
void mu__subrange_253::SimpleLimit(PermSet& Perm) {};
void mu__subrange_253::ArrayLimit(PermSet& Perm) {};
void mu__subrange_253::Limit(PermSet& Perm) {};
void mu__subrange_253::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_254::Permute(PermSet& Perm, int i) {};
void mu__subrange_254::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_254::Canonicalize(PermSet& Perm) {};
void mu__subrange_254::SimpleLimit(PermSet& Perm) {};
void mu__subrange_254::ArrayLimit(PermSet& Perm) {};
void mu__subrange_254::Limit(PermSet& Perm) {};
void mu__subrange_254::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_255::Permute(PermSet& Perm, int i) {};
void mu__subrange_255::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_255::Canonicalize(PermSet& Perm) {};
void mu__subrange_255::SimpleLimit(PermSet& Perm) {};
void mu__subrange_255::ArrayLimit(PermSet& Perm) {};
void mu__subrange_255::Limit(PermSet& Perm) {};
void mu__subrange_255::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_256::Permute(PermSet& Perm, int i) {};
void mu__subrange_256::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_256::Canonicalize(PermSet& Perm) {};
void mu__subrange_256::SimpleLimit(PermSet& Perm) {};
void mu__subrange_256::ArrayLimit(PermSet& Perm) {};
void mu__subrange_256::Limit(PermSet& Perm) {};
void mu__subrange_256::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_257::Permute(PermSet& Perm, int i) {};
void mu__subrange_257::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_257::Canonicalize(PermSet& Perm) {};
void mu__subrange_257::SimpleLimit(PermSet& Perm) {};
void mu__subrange_257::ArrayLimit(PermSet& Perm) {};
void mu__subrange_257::Limit(PermSet& Perm) {};
void mu__subrange_257::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_258::Permute(PermSet& Perm, int i) {};
void mu__subrange_258::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_258::Canonicalize(PermSet& Perm) {};
void mu__subrange_258::SimpleLimit(PermSet& Perm) {};
void mu__subrange_258::ArrayLimit(PermSet& Perm) {};
void mu__subrange_258::Limit(PermSet& Perm) {};
void mu__subrange_258::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_259::Permute(PermSet& Perm, int i) {};
void mu__subrange_259::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_259::Canonicalize(PermSet& Perm) {};
void mu__subrange_259::SimpleLimit(PermSet& Perm) {};
void mu__subrange_259::ArrayLimit(PermSet& Perm) {};
void mu__subrange_259::Limit(PermSet& Perm) {};
void mu__subrange_259::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_260::Permute(PermSet& Perm, int i) {};
void mu__subrange_260::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_260::Canonicalize(PermSet& Perm) {};
void mu__subrange_260::SimpleLimit(PermSet& Perm) {};
void mu__subrange_260::ArrayLimit(PermSet& Perm) {};
void mu__subrange_260::Limit(PermSet& Perm) {};
void mu__subrange_260::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_261::Permute(PermSet& Perm, int i) {};
void mu__subrange_261::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_261::Canonicalize(PermSet& Perm) {};
void mu__subrange_261::SimpleLimit(PermSet& Perm) {};
void mu__subrange_261::ArrayLimit(PermSet& Perm) {};
void mu__subrange_261::Limit(PermSet& Perm) {};
void mu__subrange_261::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_262::Permute(PermSet& Perm, int i) {};
void mu__subrange_262::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_262::Canonicalize(PermSet& Perm) {};
void mu__subrange_262::SimpleLimit(PermSet& Perm) {};
void mu__subrange_262::ArrayLimit(PermSet& Perm) {};
void mu__subrange_262::Limit(PermSet& Perm) {};
void mu__subrange_262::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_263::Permute(PermSet& Perm, int i) {};
void mu__subrange_263::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_263::Canonicalize(PermSet& Perm) {};
void mu__subrange_263::SimpleLimit(PermSet& Perm) {};
void mu__subrange_263::ArrayLimit(PermSet& Perm) {};
void mu__subrange_263::Limit(PermSet& Perm) {};
void mu__subrange_263::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_264::Permute(PermSet& Perm, int i) {};
void mu__subrange_264::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_264::Canonicalize(PermSet& Perm) {};
void mu__subrange_264::SimpleLimit(PermSet& Perm) {};
void mu__subrange_264::ArrayLimit(PermSet& Perm) {};
void mu__subrange_264::Limit(PermSet& Perm) {};
void mu__subrange_264::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_265::Permute(PermSet& Perm, int i) {};
void mu__subrange_265::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_265::Canonicalize(PermSet& Perm) {};
void mu__subrange_265::SimpleLimit(PermSet& Perm) {};
void mu__subrange_265::ArrayLimit(PermSet& Perm) {};
void mu__subrange_265::Limit(PermSet& Perm) {};
void mu__subrange_265::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_266::Permute(PermSet& Perm, int i) {};
void mu__subrange_266::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_266::Canonicalize(PermSet& Perm) {};
void mu__subrange_266::SimpleLimit(PermSet& Perm) {};
void mu__subrange_266::ArrayLimit(PermSet& Perm) {};
void mu__subrange_266::Limit(PermSet& Perm) {};
void mu__subrange_266::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_267::Permute(PermSet& Perm, int i) {};
void mu__subrange_267::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_267::Canonicalize(PermSet& Perm) {};
void mu__subrange_267::SimpleLimit(PermSet& Perm) {};
void mu__subrange_267::ArrayLimit(PermSet& Perm) {};
void mu__subrange_267::Limit(PermSet& Perm) {};
void mu__subrange_267::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_268::Permute(PermSet& Perm, int i) {};
void mu__subrange_268::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_268::Canonicalize(PermSet& Perm) {};
void mu__subrange_268::SimpleLimit(PermSet& Perm) {};
void mu__subrange_268::ArrayLimit(PermSet& Perm) {};
void mu__subrange_268::Limit(PermSet& Perm) {};
void mu__subrange_268::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_269::Permute(PermSet& Perm, int i) {};
void mu__subrange_269::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_269::Canonicalize(PermSet& Perm) {};
void mu__subrange_269::SimpleLimit(PermSet& Perm) {};
void mu__subrange_269::ArrayLimit(PermSet& Perm) {};
void mu__subrange_269::Limit(PermSet& Perm) {};
void mu__subrange_269::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_270::Permute(PermSet& Perm, int i) {};
void mu__subrange_270::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_270::Canonicalize(PermSet& Perm) {};
void mu__subrange_270::SimpleLimit(PermSet& Perm) {};
void mu__subrange_270::ArrayLimit(PermSet& Perm) {};
void mu__subrange_270::Limit(PermSet& Perm) {};
void mu__subrange_270::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_271::Permute(PermSet& Perm, int i) {};
void mu__subrange_271::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_271::Canonicalize(PermSet& Perm) {};
void mu__subrange_271::SimpleLimit(PermSet& Perm) {};
void mu__subrange_271::ArrayLimit(PermSet& Perm) {};
void mu__subrange_271::Limit(PermSet& Perm) {};
void mu__subrange_271::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_272::Permute(PermSet& Perm, int i) {};
void mu__subrange_272::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_272::Canonicalize(PermSet& Perm) {};
void mu__subrange_272::SimpleLimit(PermSet& Perm) {};
void mu__subrange_272::ArrayLimit(PermSet& Perm) {};
void mu__subrange_272::Limit(PermSet& Perm) {};
void mu__subrange_272::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_273::Permute(PermSet& Perm, int i) {};
void mu__subrange_273::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_273::Canonicalize(PermSet& Perm) {};
void mu__subrange_273::SimpleLimit(PermSet& Perm) {};
void mu__subrange_273::ArrayLimit(PermSet& Perm) {};
void mu__subrange_273::Limit(PermSet& Perm) {};
void mu__subrange_273::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_274::Permute(PermSet& Perm, int i) {};
void mu__subrange_274::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_274::Canonicalize(PermSet& Perm) {};
void mu__subrange_274::SimpleLimit(PermSet& Perm) {};
void mu__subrange_274::ArrayLimit(PermSet& Perm) {};
void mu__subrange_274::Limit(PermSet& Perm) {};
void mu__subrange_274::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_275::Permute(PermSet& Perm, int i) {};
void mu__subrange_275::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_275::Canonicalize(PermSet& Perm) {};
void mu__subrange_275::SimpleLimit(PermSet& Perm) {};
void mu__subrange_275::ArrayLimit(PermSet& Perm) {};
void mu__subrange_275::Limit(PermSet& Perm) {};
void mu__subrange_275::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_276::Permute(PermSet& Perm, int i) {};
void mu__subrange_276::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_276::Canonicalize(PermSet& Perm) {};
void mu__subrange_276::SimpleLimit(PermSet& Perm) {};
void mu__subrange_276::ArrayLimit(PermSet& Perm) {};
void mu__subrange_276::Limit(PermSet& Perm) {};
void mu__subrange_276::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_277::Permute(PermSet& Perm, int i) {};
void mu__subrange_277::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_277::Canonicalize(PermSet& Perm) {};
void mu__subrange_277::SimpleLimit(PermSet& Perm) {};
void mu__subrange_277::ArrayLimit(PermSet& Perm) {};
void mu__subrange_277::Limit(PermSet& Perm) {};
void mu__subrange_277::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_278::Permute(PermSet& Perm, int i) {};
void mu__subrange_278::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_278::Canonicalize(PermSet& Perm) {};
void mu__subrange_278::SimpleLimit(PermSet& Perm) {};
void mu__subrange_278::ArrayLimit(PermSet& Perm) {};
void mu__subrange_278::Limit(PermSet& Perm) {};
void mu__subrange_278::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_279::Permute(PermSet& Perm, int i) {};
void mu__subrange_279::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_279::Canonicalize(PermSet& Perm) {};
void mu__subrange_279::SimpleLimit(PermSet& Perm) {};
void mu__subrange_279::ArrayLimit(PermSet& Perm) {};
void mu__subrange_279::Limit(PermSet& Perm) {};
void mu__subrange_279::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_280::Permute(PermSet& Perm, int i) {};
void mu__subrange_280::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_280::Canonicalize(PermSet& Perm) {};
void mu__subrange_280::SimpleLimit(PermSet& Perm) {};
void mu__subrange_280::ArrayLimit(PermSet& Perm) {};
void mu__subrange_280::Limit(PermSet& Perm) {};
void mu__subrange_280::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_281::Permute(PermSet& Perm, int i) {};
void mu__subrange_281::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_281::Canonicalize(PermSet& Perm) {};
void mu__subrange_281::SimpleLimit(PermSet& Perm) {};
void mu__subrange_281::ArrayLimit(PermSet& Perm) {};
void mu__subrange_281::Limit(PermSet& Perm) {};
void mu__subrange_281::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_282::Permute(PermSet& Perm, int i) {};
void mu__subrange_282::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_282::Canonicalize(PermSet& Perm) {};
void mu__subrange_282::SimpleLimit(PermSet& Perm) {};
void mu__subrange_282::ArrayLimit(PermSet& Perm) {};
void mu__subrange_282::Limit(PermSet& Perm) {};
void mu__subrange_282::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_283::Permute(PermSet& Perm, int i) {};
void mu__subrange_283::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_283::Canonicalize(PermSet& Perm) {};
void mu__subrange_283::SimpleLimit(PermSet& Perm) {};
void mu__subrange_283::ArrayLimit(PermSet& Perm) {};
void mu__subrange_283::Limit(PermSet& Perm) {};
void mu__subrange_283::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_284::Permute(PermSet& Perm, int i) {};
void mu__subrange_284::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_284::Canonicalize(PermSet& Perm) {};
void mu__subrange_284::SimpleLimit(PermSet& Perm) {};
void mu__subrange_284::ArrayLimit(PermSet& Perm) {};
void mu__subrange_284::Limit(PermSet& Perm) {};
void mu__subrange_284::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_285::Permute(PermSet& Perm, int i) {};
void mu__subrange_285::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_285::Canonicalize(PermSet& Perm) {};
void mu__subrange_285::SimpleLimit(PermSet& Perm) {};
void mu__subrange_285::ArrayLimit(PermSet& Perm) {};
void mu__subrange_285::Limit(PermSet& Perm) {};
void mu__subrange_285::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_286::Permute(PermSet& Perm, int i) {};
void mu__subrange_286::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_286::Canonicalize(PermSet& Perm) {};
void mu__subrange_286::SimpleLimit(PermSet& Perm) {};
void mu__subrange_286::ArrayLimit(PermSet& Perm) {};
void mu__subrange_286::Limit(PermSet& Perm) {};
void mu__subrange_286::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_287::Permute(PermSet& Perm, int i) {};
void mu__subrange_287::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_287::Canonicalize(PermSet& Perm) {};
void mu__subrange_287::SimpleLimit(PermSet& Perm) {};
void mu__subrange_287::ArrayLimit(PermSet& Perm) {};
void mu__subrange_287::Limit(PermSet& Perm) {};
void mu__subrange_287::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_288::Permute(PermSet& Perm, int i) {};
void mu__subrange_288::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_288::Canonicalize(PermSet& Perm) {};
void mu__subrange_288::SimpleLimit(PermSet& Perm) {};
void mu__subrange_288::ArrayLimit(PermSet& Perm) {};
void mu__subrange_288::Limit(PermSet& Perm) {};
void mu__subrange_288::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_289::Permute(PermSet& Perm, int i) {};
void mu__subrange_289::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_289::Canonicalize(PermSet& Perm) {};
void mu__subrange_289::SimpleLimit(PermSet& Perm) {};
void mu__subrange_289::ArrayLimit(PermSet& Perm) {};
void mu__subrange_289::Limit(PermSet& Perm) {};
void mu__subrange_289::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_290::Permute(PermSet& Perm, int i) {};
void mu__subrange_290::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_290::Canonicalize(PermSet& Perm) {};
void mu__subrange_290::SimpleLimit(PermSet& Perm) {};
void mu__subrange_290::ArrayLimit(PermSet& Perm) {};
void mu__subrange_290::Limit(PermSet& Perm) {};
void mu__subrange_290::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_291::Permute(PermSet& Perm, int i) {};
void mu__subrange_291::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_291::Canonicalize(PermSet& Perm) {};
void mu__subrange_291::SimpleLimit(PermSet& Perm) {};
void mu__subrange_291::ArrayLimit(PermSet& Perm) {};
void mu__subrange_291::Limit(PermSet& Perm) {};
void mu__subrange_291::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_292::Permute(PermSet& Perm, int i) {};
void mu__subrange_292::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_292::Canonicalize(PermSet& Perm) {};
void mu__subrange_292::SimpleLimit(PermSet& Perm) {};
void mu__subrange_292::ArrayLimit(PermSet& Perm) {};
void mu__subrange_292::Limit(PermSet& Perm) {};
void mu__subrange_292::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_293::Permute(PermSet& Perm, int i) {};
void mu__subrange_293::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_293::Canonicalize(PermSet& Perm) {};
void mu__subrange_293::SimpleLimit(PermSet& Perm) {};
void mu__subrange_293::ArrayLimit(PermSet& Perm) {};
void mu__subrange_293::Limit(PermSet& Perm) {};
void mu__subrange_293::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_294::Permute(PermSet& Perm, int i) {};
void mu__subrange_294::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_294::Canonicalize(PermSet& Perm) {};
void mu__subrange_294::SimpleLimit(PermSet& Perm) {};
void mu__subrange_294::ArrayLimit(PermSet& Perm) {};
void mu__subrange_294::Limit(PermSet& Perm) {};
void mu__subrange_294::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_295::Permute(PermSet& Perm, int i) {};
void mu__subrange_295::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_295::Canonicalize(PermSet& Perm) {};
void mu__subrange_295::SimpleLimit(PermSet& Perm) {};
void mu__subrange_295::ArrayLimit(PermSet& Perm) {};
void mu__subrange_295::Limit(PermSet& Perm) {};
void mu__subrange_295::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_296::Permute(PermSet& Perm, int i) {};
void mu__subrange_296::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_296::Canonicalize(PermSet& Perm) {};
void mu__subrange_296::SimpleLimit(PermSet& Perm) {};
void mu__subrange_296::ArrayLimit(PermSet& Perm) {};
void mu__subrange_296::Limit(PermSet& Perm) {};
void mu__subrange_296::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_297::Permute(PermSet& Perm, int i) {};
void mu__subrange_297::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_297::Canonicalize(PermSet& Perm) {};
void mu__subrange_297::SimpleLimit(PermSet& Perm) {};
void mu__subrange_297::ArrayLimit(PermSet& Perm) {};
void mu__subrange_297::Limit(PermSet& Perm) {};
void mu__subrange_297::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_298::Permute(PermSet& Perm, int i) {};
void mu__subrange_298::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_298::Canonicalize(PermSet& Perm) {};
void mu__subrange_298::SimpleLimit(PermSet& Perm) {};
void mu__subrange_298::ArrayLimit(PermSet& Perm) {};
void mu__subrange_298::Limit(PermSet& Perm) {};
void mu__subrange_298::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_299::Permute(PermSet& Perm, int i) {};
void mu__subrange_299::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_299::Canonicalize(PermSet& Perm) {};
void mu__subrange_299::SimpleLimit(PermSet& Perm) {};
void mu__subrange_299::ArrayLimit(PermSet& Perm) {};
void mu__subrange_299::Limit(PermSet& Perm) {};
void mu__subrange_299::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_300::Permute(PermSet& Perm, int i) {};
void mu__subrange_300::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_300::Canonicalize(PermSet& Perm) {};
void mu__subrange_300::SimpleLimit(PermSet& Perm) {};
void mu__subrange_300::ArrayLimit(PermSet& Perm) {};
void mu__subrange_300::Limit(PermSet& Perm) {};
void mu__subrange_300::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_301::Permute(PermSet& Perm, int i) {};
void mu__subrange_301::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_301::Canonicalize(PermSet& Perm) {};
void mu__subrange_301::SimpleLimit(PermSet& Perm) {};
void mu__subrange_301::ArrayLimit(PermSet& Perm) {};
void mu__subrange_301::Limit(PermSet& Perm) {};
void mu__subrange_301::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_302::Permute(PermSet& Perm, int i) {};
void mu__subrange_302::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_302::Canonicalize(PermSet& Perm) {};
void mu__subrange_302::SimpleLimit(PermSet& Perm) {};
void mu__subrange_302::ArrayLimit(PermSet& Perm) {};
void mu__subrange_302::Limit(PermSet& Perm) {};
void mu__subrange_302::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_303::Permute(PermSet& Perm, int i) {};
void mu__subrange_303::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_303::Canonicalize(PermSet& Perm) {};
void mu__subrange_303::SimpleLimit(PermSet& Perm) {};
void mu__subrange_303::ArrayLimit(PermSet& Perm) {};
void mu__subrange_303::Limit(PermSet& Perm) {};
void mu__subrange_303::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_304::Permute(PermSet& Perm, int i) {};
void mu__subrange_304::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_304::Canonicalize(PermSet& Perm) {};
void mu__subrange_304::SimpleLimit(PermSet& Perm) {};
void mu__subrange_304::ArrayLimit(PermSet& Perm) {};
void mu__subrange_304::Limit(PermSet& Perm) {};
void mu__subrange_304::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_305::Permute(PermSet& Perm, int i) {};
void mu__subrange_305::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_305::Canonicalize(PermSet& Perm) {};
void mu__subrange_305::SimpleLimit(PermSet& Perm) {};
void mu__subrange_305::ArrayLimit(PermSet& Perm) {};
void mu__subrange_305::Limit(PermSet& Perm) {};
void mu__subrange_305::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_306::Permute(PermSet& Perm, int i) {};
void mu__subrange_306::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_306::Canonicalize(PermSet& Perm) {};
void mu__subrange_306::SimpleLimit(PermSet& Perm) {};
void mu__subrange_306::ArrayLimit(PermSet& Perm) {};
void mu__subrange_306::Limit(PermSet& Perm) {};
void mu__subrange_306::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_307::Permute(PermSet& Perm, int i) {};
void mu__subrange_307::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_307::Canonicalize(PermSet& Perm) {};
void mu__subrange_307::SimpleLimit(PermSet& Perm) {};
void mu__subrange_307::ArrayLimit(PermSet& Perm) {};
void mu__subrange_307::Limit(PermSet& Perm) {};
void mu__subrange_307::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_308::Permute(PermSet& Perm, int i) {};
void mu__subrange_308::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_308::Canonicalize(PermSet& Perm) {};
void mu__subrange_308::SimpleLimit(PermSet& Perm) {};
void mu__subrange_308::ArrayLimit(PermSet& Perm) {};
void mu__subrange_308::Limit(PermSet& Perm) {};
void mu__subrange_308::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_309::Permute(PermSet& Perm, int i) {};
void mu__subrange_309::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_309::Canonicalize(PermSet& Perm) {};
void mu__subrange_309::SimpleLimit(PermSet& Perm) {};
void mu__subrange_309::ArrayLimit(PermSet& Perm) {};
void mu__subrange_309::Limit(PermSet& Perm) {};
void mu__subrange_309::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_310::Permute(PermSet& Perm, int i) {};
void mu__subrange_310::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_310::Canonicalize(PermSet& Perm) {};
void mu__subrange_310::SimpleLimit(PermSet& Perm) {};
void mu__subrange_310::ArrayLimit(PermSet& Perm) {};
void mu__subrange_310::Limit(PermSet& Perm) {};
void mu__subrange_310::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_311::Permute(PermSet& Perm, int i) {};
void mu__subrange_311::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_311::Canonicalize(PermSet& Perm) {};
void mu__subrange_311::SimpleLimit(PermSet& Perm) {};
void mu__subrange_311::ArrayLimit(PermSet& Perm) {};
void mu__subrange_311::Limit(PermSet& Perm) {};
void mu__subrange_311::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_312::Permute(PermSet& Perm, int i) {};
void mu__subrange_312::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_312::Canonicalize(PermSet& Perm) {};
void mu__subrange_312::SimpleLimit(PermSet& Perm) {};
void mu__subrange_312::ArrayLimit(PermSet& Perm) {};
void mu__subrange_312::Limit(PermSet& Perm) {};
void mu__subrange_312::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_313::Permute(PermSet& Perm, int i) {};
void mu__subrange_313::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_313::Canonicalize(PermSet& Perm) {};
void mu__subrange_313::SimpleLimit(PermSet& Perm) {};
void mu__subrange_313::ArrayLimit(PermSet& Perm) {};
void mu__subrange_313::Limit(PermSet& Perm) {};
void mu__subrange_313::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_314::Permute(PermSet& Perm, int i) {};
void mu__subrange_314::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_314::Canonicalize(PermSet& Perm) {};
void mu__subrange_314::SimpleLimit(PermSet& Perm) {};
void mu__subrange_314::ArrayLimit(PermSet& Perm) {};
void mu__subrange_314::Limit(PermSet& Perm) {};
void mu__subrange_314::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_315::Permute(PermSet& Perm, int i) {};
void mu__subrange_315::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_315::Canonicalize(PermSet& Perm) {};
void mu__subrange_315::SimpleLimit(PermSet& Perm) {};
void mu__subrange_315::ArrayLimit(PermSet& Perm) {};
void mu__subrange_315::Limit(PermSet& Perm) {};
void mu__subrange_315::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_316::Permute(PermSet& Perm, int i) {};
void mu__subrange_316::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_316::Canonicalize(PermSet& Perm) {};
void mu__subrange_316::SimpleLimit(PermSet& Perm) {};
void mu__subrange_316::ArrayLimit(PermSet& Perm) {};
void mu__subrange_316::Limit(PermSet& Perm) {};
void mu__subrange_316::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_317::Permute(PermSet& Perm, int i) {};
void mu__subrange_317::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_317::Canonicalize(PermSet& Perm) {};
void mu__subrange_317::SimpleLimit(PermSet& Perm) {};
void mu__subrange_317::ArrayLimit(PermSet& Perm) {};
void mu__subrange_317::Limit(PermSet& Perm) {};
void mu__subrange_317::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_318::Permute(PermSet& Perm, int i) {};
void mu__subrange_318::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_318::Canonicalize(PermSet& Perm) {};
void mu__subrange_318::SimpleLimit(PermSet& Perm) {};
void mu__subrange_318::ArrayLimit(PermSet& Perm) {};
void mu__subrange_318::Limit(PermSet& Perm) {};
void mu__subrange_318::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_319::Permute(PermSet& Perm, int i) {};
void mu__subrange_319::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_319::Canonicalize(PermSet& Perm) {};
void mu__subrange_319::SimpleLimit(PermSet& Perm) {};
void mu__subrange_319::ArrayLimit(PermSet& Perm) {};
void mu__subrange_319::Limit(PermSet& Perm) {};
void mu__subrange_319::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_320::Permute(PermSet& Perm, int i) {};
void mu__subrange_320::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_320::Canonicalize(PermSet& Perm) {};
void mu__subrange_320::SimpleLimit(PermSet& Perm) {};
void mu__subrange_320::ArrayLimit(PermSet& Perm) {};
void mu__subrange_320::Limit(PermSet& Perm) {};
void mu__subrange_320::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_321::Permute(PermSet& Perm, int i) {};
void mu__subrange_321::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_321::Canonicalize(PermSet& Perm) {};
void mu__subrange_321::SimpleLimit(PermSet& Perm) {};
void mu__subrange_321::ArrayLimit(PermSet& Perm) {};
void mu__subrange_321::Limit(PermSet& Perm) {};
void mu__subrange_321::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_322::Permute(PermSet& Perm, int i) {};
void mu__subrange_322::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_322::Canonicalize(PermSet& Perm) {};
void mu__subrange_322::SimpleLimit(PermSet& Perm) {};
void mu__subrange_322::ArrayLimit(PermSet& Perm) {};
void mu__subrange_322::Limit(PermSet& Perm) {};
void mu__subrange_322::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_323::Permute(PermSet& Perm, int i) {};
void mu__subrange_323::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_323::Canonicalize(PermSet& Perm) {};
void mu__subrange_323::SimpleLimit(PermSet& Perm) {};
void mu__subrange_323::ArrayLimit(PermSet& Perm) {};
void mu__subrange_323::Limit(PermSet& Perm) {};
void mu__subrange_323::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_324::Permute(PermSet& Perm, int i) {};
void mu__subrange_324::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_324::Canonicalize(PermSet& Perm) {};
void mu__subrange_324::SimpleLimit(PermSet& Perm) {};
void mu__subrange_324::ArrayLimit(PermSet& Perm) {};
void mu__subrange_324::Limit(PermSet& Perm) {};
void mu__subrange_324::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_325::Permute(PermSet& Perm, int i) {};
void mu__subrange_325::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_325::Canonicalize(PermSet& Perm) {};
void mu__subrange_325::SimpleLimit(PermSet& Perm) {};
void mu__subrange_325::ArrayLimit(PermSet& Perm) {};
void mu__subrange_325::Limit(PermSet& Perm) {};
void mu__subrange_325::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_326::Permute(PermSet& Perm, int i) {};
void mu__subrange_326::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_326::Canonicalize(PermSet& Perm) {};
void mu__subrange_326::SimpleLimit(PermSet& Perm) {};
void mu__subrange_326::ArrayLimit(PermSet& Perm) {};
void mu__subrange_326::Limit(PermSet& Perm) {};
void mu__subrange_326::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_327::Permute(PermSet& Perm, int i) {};
void mu__subrange_327::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_327::Canonicalize(PermSet& Perm) {};
void mu__subrange_327::SimpleLimit(PermSet& Perm) {};
void mu__subrange_327::ArrayLimit(PermSet& Perm) {};
void mu__subrange_327::Limit(PermSet& Perm) {};
void mu__subrange_327::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_328::Permute(PermSet& Perm, int i) {};
void mu__subrange_328::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_328::Canonicalize(PermSet& Perm) {};
void mu__subrange_328::SimpleLimit(PermSet& Perm) {};
void mu__subrange_328::ArrayLimit(PermSet& Perm) {};
void mu__subrange_328::Limit(PermSet& Perm) {};
void mu__subrange_328::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_329::Permute(PermSet& Perm, int i) {};
void mu__subrange_329::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_329::Canonicalize(PermSet& Perm) {};
void mu__subrange_329::SimpleLimit(PermSet& Perm) {};
void mu__subrange_329::ArrayLimit(PermSet& Perm) {};
void mu__subrange_329::Limit(PermSet& Perm) {};
void mu__subrange_329::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_330::Permute(PermSet& Perm, int i) {};
void mu__subrange_330::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_330::Canonicalize(PermSet& Perm) {};
void mu__subrange_330::SimpleLimit(PermSet& Perm) {};
void mu__subrange_330::ArrayLimit(PermSet& Perm) {};
void mu__subrange_330::Limit(PermSet& Perm) {};
void mu__subrange_330::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_331::Permute(PermSet& Perm, int i) {};
void mu__subrange_331::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_331::Canonicalize(PermSet& Perm) {};
void mu__subrange_331::SimpleLimit(PermSet& Perm) {};
void mu__subrange_331::ArrayLimit(PermSet& Perm) {};
void mu__subrange_331::Limit(PermSet& Perm) {};
void mu__subrange_331::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_332::Permute(PermSet& Perm, int i) {};
void mu__subrange_332::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_332::Canonicalize(PermSet& Perm) {};
void mu__subrange_332::SimpleLimit(PermSet& Perm) {};
void mu__subrange_332::ArrayLimit(PermSet& Perm) {};
void mu__subrange_332::Limit(PermSet& Perm) {};
void mu__subrange_332::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_333::Permute(PermSet& Perm, int i) {};
void mu__subrange_333::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_333::Canonicalize(PermSet& Perm) {};
void mu__subrange_333::SimpleLimit(PermSet& Perm) {};
void mu__subrange_333::ArrayLimit(PermSet& Perm) {};
void mu__subrange_333::Limit(PermSet& Perm) {};
void mu__subrange_333::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_334::Permute(PermSet& Perm, int i) {};
void mu__subrange_334::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_334::Canonicalize(PermSet& Perm) {};
void mu__subrange_334::SimpleLimit(PermSet& Perm) {};
void mu__subrange_334::ArrayLimit(PermSet& Perm) {};
void mu__subrange_334::Limit(PermSet& Perm) {};
void mu__subrange_334::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_335::Permute(PermSet& Perm, int i) {};
void mu__subrange_335::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_335::Canonicalize(PermSet& Perm) {};
void mu__subrange_335::SimpleLimit(PermSet& Perm) {};
void mu__subrange_335::ArrayLimit(PermSet& Perm) {};
void mu__subrange_335::Limit(PermSet& Perm) {};
void mu__subrange_335::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_336::Permute(PermSet& Perm, int i) {};
void mu__subrange_336::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_336::Canonicalize(PermSet& Perm) {};
void mu__subrange_336::SimpleLimit(PermSet& Perm) {};
void mu__subrange_336::ArrayLimit(PermSet& Perm) {};
void mu__subrange_336::Limit(PermSet& Perm) {};
void mu__subrange_336::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_337::Permute(PermSet& Perm, int i) {};
void mu__subrange_337::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_337::Canonicalize(PermSet& Perm) {};
void mu__subrange_337::SimpleLimit(PermSet& Perm) {};
void mu__subrange_337::ArrayLimit(PermSet& Perm) {};
void mu__subrange_337::Limit(PermSet& Perm) {};
void mu__subrange_337::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_338::Permute(PermSet& Perm, int i) {};
void mu__subrange_338::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_338::Canonicalize(PermSet& Perm) {};
void mu__subrange_338::SimpleLimit(PermSet& Perm) {};
void mu__subrange_338::ArrayLimit(PermSet& Perm) {};
void mu__subrange_338::Limit(PermSet& Perm) {};
void mu__subrange_338::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_339::Permute(PermSet& Perm, int i) {};
void mu__subrange_339::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_339::Canonicalize(PermSet& Perm) {};
void mu__subrange_339::SimpleLimit(PermSet& Perm) {};
void mu__subrange_339::ArrayLimit(PermSet& Perm) {};
void mu__subrange_339::Limit(PermSet& Perm) {};
void mu__subrange_339::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_340::Permute(PermSet& Perm, int i) {};
void mu__subrange_340::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_340::Canonicalize(PermSet& Perm) {};
void mu__subrange_340::SimpleLimit(PermSet& Perm) {};
void mu__subrange_340::ArrayLimit(PermSet& Perm) {};
void mu__subrange_340::Limit(PermSet& Perm) {};
void mu__subrange_340::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_341::Permute(PermSet& Perm, int i) {};
void mu__subrange_341::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_341::Canonicalize(PermSet& Perm) {};
void mu__subrange_341::SimpleLimit(PermSet& Perm) {};
void mu__subrange_341::ArrayLimit(PermSet& Perm) {};
void mu__subrange_341::Limit(PermSet& Perm) {};
void mu__subrange_341::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_342::Permute(PermSet& Perm, int i) {};
void mu__subrange_342::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_342::Canonicalize(PermSet& Perm) {};
void mu__subrange_342::SimpleLimit(PermSet& Perm) {};
void mu__subrange_342::ArrayLimit(PermSet& Perm) {};
void mu__subrange_342::Limit(PermSet& Perm) {};
void mu__subrange_342::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_343::Permute(PermSet& Perm, int i) {};
void mu__subrange_343::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_343::Canonicalize(PermSet& Perm) {};
void mu__subrange_343::SimpleLimit(PermSet& Perm) {};
void mu__subrange_343::ArrayLimit(PermSet& Perm) {};
void mu__subrange_343::Limit(PermSet& Perm) {};
void mu__subrange_343::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_344::Permute(PermSet& Perm, int i) {};
void mu__subrange_344::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_344::Canonicalize(PermSet& Perm) {};
void mu__subrange_344::SimpleLimit(PermSet& Perm) {};
void mu__subrange_344::ArrayLimit(PermSet& Perm) {};
void mu__subrange_344::Limit(PermSet& Perm) {};
void mu__subrange_344::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_345::Permute(PermSet& Perm, int i) {};
void mu__subrange_345::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_345::Canonicalize(PermSet& Perm) {};
void mu__subrange_345::SimpleLimit(PermSet& Perm) {};
void mu__subrange_345::ArrayLimit(PermSet& Perm) {};
void mu__subrange_345::Limit(PermSet& Perm) {};
void mu__subrange_345::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_346::Permute(PermSet& Perm, int i) {};
void mu__subrange_346::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_346::Canonicalize(PermSet& Perm) {};
void mu__subrange_346::SimpleLimit(PermSet& Perm) {};
void mu__subrange_346::ArrayLimit(PermSet& Perm) {};
void mu__subrange_346::Limit(PermSet& Perm) {};
void mu__subrange_346::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_347::Permute(PermSet& Perm, int i) {};
void mu__subrange_347::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_347::Canonicalize(PermSet& Perm) {};
void mu__subrange_347::SimpleLimit(PermSet& Perm) {};
void mu__subrange_347::ArrayLimit(PermSet& Perm) {};
void mu__subrange_347::Limit(PermSet& Perm) {};
void mu__subrange_347::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_348::Permute(PermSet& Perm, int i) {};
void mu__subrange_348::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_348::Canonicalize(PermSet& Perm) {};
void mu__subrange_348::SimpleLimit(PermSet& Perm) {};
void mu__subrange_348::ArrayLimit(PermSet& Perm) {};
void mu__subrange_348::Limit(PermSet& Perm) {};
void mu__subrange_348::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_349::Permute(PermSet& Perm, int i) {};
void mu__subrange_349::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_349::Canonicalize(PermSet& Perm) {};
void mu__subrange_349::SimpleLimit(PermSet& Perm) {};
void mu__subrange_349::ArrayLimit(PermSet& Perm) {};
void mu__subrange_349::Limit(PermSet& Perm) {};
void mu__subrange_349::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_350::Permute(PermSet& Perm, int i) {};
void mu__subrange_350::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_350::Canonicalize(PermSet& Perm) {};
void mu__subrange_350::SimpleLimit(PermSet& Perm) {};
void mu__subrange_350::ArrayLimit(PermSet& Perm) {};
void mu__subrange_350::Limit(PermSet& Perm) {};
void mu__subrange_350::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_351::Permute(PermSet& Perm, int i) {};
void mu__subrange_351::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_351::Canonicalize(PermSet& Perm) {};
void mu__subrange_351::SimpleLimit(PermSet& Perm) {};
void mu__subrange_351::ArrayLimit(PermSet& Perm) {};
void mu__subrange_351::Limit(PermSet& Perm) {};
void mu__subrange_351::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_352::Permute(PermSet& Perm, int i) {};
void mu__subrange_352::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_352::Canonicalize(PermSet& Perm) {};
void mu__subrange_352::SimpleLimit(PermSet& Perm) {};
void mu__subrange_352::ArrayLimit(PermSet& Perm) {};
void mu__subrange_352::Limit(PermSet& Perm) {};
void mu__subrange_352::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_353::Permute(PermSet& Perm, int i) {};
void mu__subrange_353::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_353::Canonicalize(PermSet& Perm) {};
void mu__subrange_353::SimpleLimit(PermSet& Perm) {};
void mu__subrange_353::ArrayLimit(PermSet& Perm) {};
void mu__subrange_353::Limit(PermSet& Perm) {};
void mu__subrange_353::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_354::Permute(PermSet& Perm, int i) {};
void mu__subrange_354::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_354::Canonicalize(PermSet& Perm) {};
void mu__subrange_354::SimpleLimit(PermSet& Perm) {};
void mu__subrange_354::ArrayLimit(PermSet& Perm) {};
void mu__subrange_354::Limit(PermSet& Perm) {};
void mu__subrange_354::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_355::Permute(PermSet& Perm, int i) {};
void mu__subrange_355::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_355::Canonicalize(PermSet& Perm) {};
void mu__subrange_355::SimpleLimit(PermSet& Perm) {};
void mu__subrange_355::ArrayLimit(PermSet& Perm) {};
void mu__subrange_355::Limit(PermSet& Perm) {};
void mu__subrange_355::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_356::Permute(PermSet& Perm, int i) {};
void mu__subrange_356::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_356::Canonicalize(PermSet& Perm) {};
void mu__subrange_356::SimpleLimit(PermSet& Perm) {};
void mu__subrange_356::ArrayLimit(PermSet& Perm) {};
void mu__subrange_356::Limit(PermSet& Perm) {};
void mu__subrange_356::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_357::Permute(PermSet& Perm, int i) {};
void mu__subrange_357::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_357::Canonicalize(PermSet& Perm) {};
void mu__subrange_357::SimpleLimit(PermSet& Perm) {};
void mu__subrange_357::ArrayLimit(PermSet& Perm) {};
void mu__subrange_357::Limit(PermSet& Perm) {};
void mu__subrange_357::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_358::Permute(PermSet& Perm, int i) {};
void mu__subrange_358::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_358::Canonicalize(PermSet& Perm) {};
void mu__subrange_358::SimpleLimit(PermSet& Perm) {};
void mu__subrange_358::ArrayLimit(PermSet& Perm) {};
void mu__subrange_358::Limit(PermSet& Perm) {};
void mu__subrange_358::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_359::Permute(PermSet& Perm, int i) {};
void mu__subrange_359::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_359::Canonicalize(PermSet& Perm) {};
void mu__subrange_359::SimpleLimit(PermSet& Perm) {};
void mu__subrange_359::ArrayLimit(PermSet& Perm) {};
void mu__subrange_359::Limit(PermSet& Perm) {};
void mu__subrange_359::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_360::Permute(PermSet& Perm, int i) {};
void mu__subrange_360::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_360::Canonicalize(PermSet& Perm) {};
void mu__subrange_360::SimpleLimit(PermSet& Perm) {};
void mu__subrange_360::ArrayLimit(PermSet& Perm) {};
void mu__subrange_360::Limit(PermSet& Perm) {};
void mu__subrange_360::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_361::Permute(PermSet& Perm, int i) {};
void mu__subrange_361::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_361::Canonicalize(PermSet& Perm) {};
void mu__subrange_361::SimpleLimit(PermSet& Perm) {};
void mu__subrange_361::ArrayLimit(PermSet& Perm) {};
void mu__subrange_361::Limit(PermSet& Perm) {};
void mu__subrange_361::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_362::Permute(PermSet& Perm, int i) {};
void mu__subrange_362::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_362::Canonicalize(PermSet& Perm) {};
void mu__subrange_362::SimpleLimit(PermSet& Perm) {};
void mu__subrange_362::ArrayLimit(PermSet& Perm) {};
void mu__subrange_362::Limit(PermSet& Perm) {};
void mu__subrange_362::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_363::Permute(PermSet& Perm, int i) {};
void mu__subrange_363::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_363::Canonicalize(PermSet& Perm) {};
void mu__subrange_363::SimpleLimit(PermSet& Perm) {};
void mu__subrange_363::ArrayLimit(PermSet& Perm) {};
void mu__subrange_363::Limit(PermSet& Perm) {};
void mu__subrange_363::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_364::Permute(PermSet& Perm, int i) {};
void mu__subrange_364::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_364::Canonicalize(PermSet& Perm) {};
void mu__subrange_364::SimpleLimit(PermSet& Perm) {};
void mu__subrange_364::ArrayLimit(PermSet& Perm) {};
void mu__subrange_364::Limit(PermSet& Perm) {};
void mu__subrange_364::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_365::Permute(PermSet& Perm, int i) {};
void mu__subrange_365::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_365::Canonicalize(PermSet& Perm) {};
void mu__subrange_365::SimpleLimit(PermSet& Perm) {};
void mu__subrange_365::ArrayLimit(PermSet& Perm) {};
void mu__subrange_365::Limit(PermSet& Perm) {};
void mu__subrange_365::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_366::Permute(PermSet& Perm, int i) {};
void mu__subrange_366::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_366::Canonicalize(PermSet& Perm) {};
void mu__subrange_366::SimpleLimit(PermSet& Perm) {};
void mu__subrange_366::ArrayLimit(PermSet& Perm) {};
void mu__subrange_366::Limit(PermSet& Perm) {};
void mu__subrange_366::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_367::Permute(PermSet& Perm, int i) {};
void mu__subrange_367::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_367::Canonicalize(PermSet& Perm) {};
void mu__subrange_367::SimpleLimit(PermSet& Perm) {};
void mu__subrange_367::ArrayLimit(PermSet& Perm) {};
void mu__subrange_367::Limit(PermSet& Perm) {};
void mu__subrange_367::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_368::Permute(PermSet& Perm, int i) {};
void mu__subrange_368::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_368::Canonicalize(PermSet& Perm) {};
void mu__subrange_368::SimpleLimit(PermSet& Perm) {};
void mu__subrange_368::ArrayLimit(PermSet& Perm) {};
void mu__subrange_368::Limit(PermSet& Perm) {};
void mu__subrange_368::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_369::Permute(PermSet& Perm, int i) {};
void mu__subrange_369::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_369::Canonicalize(PermSet& Perm) {};
void mu__subrange_369::SimpleLimit(PermSet& Perm) {};
void mu__subrange_369::ArrayLimit(PermSet& Perm) {};
void mu__subrange_369::Limit(PermSet& Perm) {};
void mu__subrange_369::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_370::Permute(PermSet& Perm, int i) {};
void mu__subrange_370::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_370::Canonicalize(PermSet& Perm) {};
void mu__subrange_370::SimpleLimit(PermSet& Perm) {};
void mu__subrange_370::ArrayLimit(PermSet& Perm) {};
void mu__subrange_370::Limit(PermSet& Perm) {};
void mu__subrange_370::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_371::Permute(PermSet& Perm, int i) {};
void mu__subrange_371::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_371::Canonicalize(PermSet& Perm) {};
void mu__subrange_371::SimpleLimit(PermSet& Perm) {};
void mu__subrange_371::ArrayLimit(PermSet& Perm) {};
void mu__subrange_371::Limit(PermSet& Perm) {};
void mu__subrange_371::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_372::Permute(PermSet& Perm, int i) {};
void mu__subrange_372::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_372::Canonicalize(PermSet& Perm) {};
void mu__subrange_372::SimpleLimit(PermSet& Perm) {};
void mu__subrange_372::ArrayLimit(PermSet& Perm) {};
void mu__subrange_372::Limit(PermSet& Perm) {};
void mu__subrange_372::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_373::Permute(PermSet& Perm, int i) {};
void mu__subrange_373::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_373::Canonicalize(PermSet& Perm) {};
void mu__subrange_373::SimpleLimit(PermSet& Perm) {};
void mu__subrange_373::ArrayLimit(PermSet& Perm) {};
void mu__subrange_373::Limit(PermSet& Perm) {};
void mu__subrange_373::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_374::Permute(PermSet& Perm, int i) {};
void mu__subrange_374::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_374::Canonicalize(PermSet& Perm) {};
void mu__subrange_374::SimpleLimit(PermSet& Perm) {};
void mu__subrange_374::ArrayLimit(PermSet& Perm) {};
void mu__subrange_374::Limit(PermSet& Perm) {};
void mu__subrange_374::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_375::Permute(PermSet& Perm, int i) {};
void mu__subrange_375::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_375::Canonicalize(PermSet& Perm) {};
void mu__subrange_375::SimpleLimit(PermSet& Perm) {};
void mu__subrange_375::ArrayLimit(PermSet& Perm) {};
void mu__subrange_375::Limit(PermSet& Perm) {};
void mu__subrange_375::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_376::Permute(PermSet& Perm, int i) {};
void mu__subrange_376::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_376::Canonicalize(PermSet& Perm) {};
void mu__subrange_376::SimpleLimit(PermSet& Perm) {};
void mu__subrange_376::ArrayLimit(PermSet& Perm) {};
void mu__subrange_376::Limit(PermSet& Perm) {};
void mu__subrange_376::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_377::Permute(PermSet& Perm, int i) {};
void mu__subrange_377::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_377::Canonicalize(PermSet& Perm) {};
void mu__subrange_377::SimpleLimit(PermSet& Perm) {};
void mu__subrange_377::ArrayLimit(PermSet& Perm) {};
void mu__subrange_377::Limit(PermSet& Perm) {};
void mu__subrange_377::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_378::Permute(PermSet& Perm, int i) {};
void mu__subrange_378::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_378::Canonicalize(PermSet& Perm) {};
void mu__subrange_378::SimpleLimit(PermSet& Perm) {};
void mu__subrange_378::ArrayLimit(PermSet& Perm) {};
void mu__subrange_378::Limit(PermSet& Perm) {};
void mu__subrange_378::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_379::Permute(PermSet& Perm, int i) {};
void mu__subrange_379::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_379::Canonicalize(PermSet& Perm) {};
void mu__subrange_379::SimpleLimit(PermSet& Perm) {};
void mu__subrange_379::ArrayLimit(PermSet& Perm) {};
void mu__subrange_379::Limit(PermSet& Perm) {};
void mu__subrange_379::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_380::Permute(PermSet& Perm, int i) {};
void mu__subrange_380::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_380::Canonicalize(PermSet& Perm) {};
void mu__subrange_380::SimpleLimit(PermSet& Perm) {};
void mu__subrange_380::ArrayLimit(PermSet& Perm) {};
void mu__subrange_380::Limit(PermSet& Perm) {};
void mu__subrange_380::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_381::Permute(PermSet& Perm, int i) {};
void mu__subrange_381::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_381::Canonicalize(PermSet& Perm) {};
void mu__subrange_381::SimpleLimit(PermSet& Perm) {};
void mu__subrange_381::ArrayLimit(PermSet& Perm) {};
void mu__subrange_381::Limit(PermSet& Perm) {};
void mu__subrange_381::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_382::Permute(PermSet& Perm, int i) {};
void mu__subrange_382::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_382::Canonicalize(PermSet& Perm) {};
void mu__subrange_382::SimpleLimit(PermSet& Perm) {};
void mu__subrange_382::ArrayLimit(PermSet& Perm) {};
void mu__subrange_382::Limit(PermSet& Perm) {};
void mu__subrange_382::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_383::Permute(PermSet& Perm, int i) {};
void mu__subrange_383::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_383::Canonicalize(PermSet& Perm) {};
void mu__subrange_383::SimpleLimit(PermSet& Perm) {};
void mu__subrange_383::ArrayLimit(PermSet& Perm) {};
void mu__subrange_383::Limit(PermSet& Perm) {};
void mu__subrange_383::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_384::Permute(PermSet& Perm, int i) {};
void mu__subrange_384::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_384::Canonicalize(PermSet& Perm) {};
void mu__subrange_384::SimpleLimit(PermSet& Perm) {};
void mu__subrange_384::ArrayLimit(PermSet& Perm) {};
void mu__subrange_384::Limit(PermSet& Perm) {};
void mu__subrange_384::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_385::Permute(PermSet& Perm, int i) {};
void mu__subrange_385::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_385::Canonicalize(PermSet& Perm) {};
void mu__subrange_385::SimpleLimit(PermSet& Perm) {};
void mu__subrange_385::ArrayLimit(PermSet& Perm) {};
void mu__subrange_385::Limit(PermSet& Perm) {};
void mu__subrange_385::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_386::Permute(PermSet& Perm, int i) {};
void mu__subrange_386::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_386::Canonicalize(PermSet& Perm) {};
void mu__subrange_386::SimpleLimit(PermSet& Perm) {};
void mu__subrange_386::ArrayLimit(PermSet& Perm) {};
void mu__subrange_386::Limit(PermSet& Perm) {};
void mu__subrange_386::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_387::Permute(PermSet& Perm, int i) {};
void mu__subrange_387::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_387::Canonicalize(PermSet& Perm) {};
void mu__subrange_387::SimpleLimit(PermSet& Perm) {};
void mu__subrange_387::ArrayLimit(PermSet& Perm) {};
void mu__subrange_387::Limit(PermSet& Perm) {};
void mu__subrange_387::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_388::Permute(PermSet& Perm, int i) {};
void mu__subrange_388::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_388::Canonicalize(PermSet& Perm) {};
void mu__subrange_388::SimpleLimit(PermSet& Perm) {};
void mu__subrange_388::ArrayLimit(PermSet& Perm) {};
void mu__subrange_388::Limit(PermSet& Perm) {};
void mu__subrange_388::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_389::Permute(PermSet& Perm, int i) {};
void mu__subrange_389::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_389::Canonicalize(PermSet& Perm) {};
void mu__subrange_389::SimpleLimit(PermSet& Perm) {};
void mu__subrange_389::ArrayLimit(PermSet& Perm) {};
void mu__subrange_389::Limit(PermSet& Perm) {};
void mu__subrange_389::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_390::Permute(PermSet& Perm, int i) {};
void mu__subrange_390::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_390::Canonicalize(PermSet& Perm) {};
void mu__subrange_390::SimpleLimit(PermSet& Perm) {};
void mu__subrange_390::ArrayLimit(PermSet& Perm) {};
void mu__subrange_390::Limit(PermSet& Perm) {};
void mu__subrange_390::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_391::Permute(PermSet& Perm, int i) {};
void mu__subrange_391::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_391::Canonicalize(PermSet& Perm) {};
void mu__subrange_391::SimpleLimit(PermSet& Perm) {};
void mu__subrange_391::ArrayLimit(PermSet& Perm) {};
void mu__subrange_391::Limit(PermSet& Perm) {};
void mu__subrange_391::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_392::Permute(PermSet& Perm, int i) {};
void mu__subrange_392::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_392::Canonicalize(PermSet& Perm) {};
void mu__subrange_392::SimpleLimit(PermSet& Perm) {};
void mu__subrange_392::ArrayLimit(PermSet& Perm) {};
void mu__subrange_392::Limit(PermSet& Perm) {};
void mu__subrange_392::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_393::Permute(PermSet& Perm, int i) {};
void mu__subrange_393::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_393::Canonicalize(PermSet& Perm) {};
void mu__subrange_393::SimpleLimit(PermSet& Perm) {};
void mu__subrange_393::ArrayLimit(PermSet& Perm) {};
void mu__subrange_393::Limit(PermSet& Perm) {};
void mu__subrange_393::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_394::Permute(PermSet& Perm, int i) {};
void mu__subrange_394::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_394::Canonicalize(PermSet& Perm) {};
void mu__subrange_394::SimpleLimit(PermSet& Perm) {};
void mu__subrange_394::ArrayLimit(PermSet& Perm) {};
void mu__subrange_394::Limit(PermSet& Perm) {};
void mu__subrange_394::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_395::Permute(PermSet& Perm, int i) {};
void mu__subrange_395::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_395::Canonicalize(PermSet& Perm) {};
void mu__subrange_395::SimpleLimit(PermSet& Perm) {};
void mu__subrange_395::ArrayLimit(PermSet& Perm) {};
void mu__subrange_395::Limit(PermSet& Perm) {};
void mu__subrange_395::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_396::Permute(PermSet& Perm, int i) {};
void mu__subrange_396::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_396::Canonicalize(PermSet& Perm) {};
void mu__subrange_396::SimpleLimit(PermSet& Perm) {};
void mu__subrange_396::ArrayLimit(PermSet& Perm) {};
void mu__subrange_396::Limit(PermSet& Perm) {};
void mu__subrange_396::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_397::Permute(PermSet& Perm, int i) {};
void mu__subrange_397::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_397::Canonicalize(PermSet& Perm) {};
void mu__subrange_397::SimpleLimit(PermSet& Perm) {};
void mu__subrange_397::ArrayLimit(PermSet& Perm) {};
void mu__subrange_397::Limit(PermSet& Perm) {};
void mu__subrange_397::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_398::Permute(PermSet& Perm, int i) {};
void mu__subrange_398::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_398::Canonicalize(PermSet& Perm) {};
void mu__subrange_398::SimpleLimit(PermSet& Perm) {};
void mu__subrange_398::ArrayLimit(PermSet& Perm) {};
void mu__subrange_398::Limit(PermSet& Perm) {};
void mu__subrange_398::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_399::Permute(PermSet& Perm, int i) {};
void mu__subrange_399::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_399::Canonicalize(PermSet& Perm) {};
void mu__subrange_399::SimpleLimit(PermSet& Perm) {};
void mu__subrange_399::ArrayLimit(PermSet& Perm) {};
void mu__subrange_399::Limit(PermSet& Perm) {};
void mu__subrange_399::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_400::Permute(PermSet& Perm, int i) {};
void mu__subrange_400::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_400::Canonicalize(PermSet& Perm) {};
void mu__subrange_400::SimpleLimit(PermSet& Perm) {};
void mu__subrange_400::ArrayLimit(PermSet& Perm) {};
void mu__subrange_400::Limit(PermSet& Perm) {};
void mu__subrange_400::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_401::Permute(PermSet& Perm, int i) {};
void mu__subrange_401::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_401::Canonicalize(PermSet& Perm) {};
void mu__subrange_401::SimpleLimit(PermSet& Perm) {};
void mu__subrange_401::ArrayLimit(PermSet& Perm) {};
void mu__subrange_401::Limit(PermSet& Perm) {};
void mu__subrange_401::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_402::Permute(PermSet& Perm, int i) {};
void mu__subrange_402::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_402::Canonicalize(PermSet& Perm) {};
void mu__subrange_402::SimpleLimit(PermSet& Perm) {};
void mu__subrange_402::ArrayLimit(PermSet& Perm) {};
void mu__subrange_402::Limit(PermSet& Perm) {};
void mu__subrange_402::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_403::Permute(PermSet& Perm, int i) {};
void mu__subrange_403::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_403::Canonicalize(PermSet& Perm) {};
void mu__subrange_403::SimpleLimit(PermSet& Perm) {};
void mu__subrange_403::ArrayLimit(PermSet& Perm) {};
void mu__subrange_403::Limit(PermSet& Perm) {};
void mu__subrange_403::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_404::Permute(PermSet& Perm, int i) {};
void mu__subrange_404::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_404::Canonicalize(PermSet& Perm) {};
void mu__subrange_404::SimpleLimit(PermSet& Perm) {};
void mu__subrange_404::ArrayLimit(PermSet& Perm) {};
void mu__subrange_404::Limit(PermSet& Perm) {};
void mu__subrange_404::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_405::Permute(PermSet& Perm, int i) {};
void mu__subrange_405::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_405::Canonicalize(PermSet& Perm) {};
void mu__subrange_405::SimpleLimit(PermSet& Perm) {};
void mu__subrange_405::ArrayLimit(PermSet& Perm) {};
void mu__subrange_405::Limit(PermSet& Perm) {};
void mu__subrange_405::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_406::Permute(PermSet& Perm, int i) {};
void mu__subrange_406::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_406::Canonicalize(PermSet& Perm) {};
void mu__subrange_406::SimpleLimit(PermSet& Perm) {};
void mu__subrange_406::ArrayLimit(PermSet& Perm) {};
void mu__subrange_406::Limit(PermSet& Perm) {};
void mu__subrange_406::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_407::Permute(PermSet& Perm, int i) {};
void mu__subrange_407::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_407::Canonicalize(PermSet& Perm) {};
void mu__subrange_407::SimpleLimit(PermSet& Perm) {};
void mu__subrange_407::ArrayLimit(PermSet& Perm) {};
void mu__subrange_407::Limit(PermSet& Perm) {};
void mu__subrange_407::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_408::Permute(PermSet& Perm, int i) {};
void mu__subrange_408::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_408::Canonicalize(PermSet& Perm) {};
void mu__subrange_408::SimpleLimit(PermSet& Perm) {};
void mu__subrange_408::ArrayLimit(PermSet& Perm) {};
void mu__subrange_408::Limit(PermSet& Perm) {};
void mu__subrange_408::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_409::Permute(PermSet& Perm, int i) {};
void mu__subrange_409::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_409::Canonicalize(PermSet& Perm) {};
void mu__subrange_409::SimpleLimit(PermSet& Perm) {};
void mu__subrange_409::ArrayLimit(PermSet& Perm) {};
void mu__subrange_409::Limit(PermSet& Perm) {};
void mu__subrange_409::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_410::Permute(PermSet& Perm, int i) {};
void mu__subrange_410::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_410::Canonicalize(PermSet& Perm) {};
void mu__subrange_410::SimpleLimit(PermSet& Perm) {};
void mu__subrange_410::ArrayLimit(PermSet& Perm) {};
void mu__subrange_410::Limit(PermSet& Perm) {};
void mu__subrange_410::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_411::Permute(PermSet& Perm, int i) {};
void mu__subrange_411::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_411::Canonicalize(PermSet& Perm) {};
void mu__subrange_411::SimpleLimit(PermSet& Perm) {};
void mu__subrange_411::ArrayLimit(PermSet& Perm) {};
void mu__subrange_411::Limit(PermSet& Perm) {};
void mu__subrange_411::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_412::Permute(PermSet& Perm, int i) {};
void mu__subrange_412::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_412::Canonicalize(PermSet& Perm) {};
void mu__subrange_412::SimpleLimit(PermSet& Perm) {};
void mu__subrange_412::ArrayLimit(PermSet& Perm) {};
void mu__subrange_412::Limit(PermSet& Perm) {};
void mu__subrange_412::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_413::Permute(PermSet& Perm, int i) {};
void mu__subrange_413::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_413::Canonicalize(PermSet& Perm) {};
void mu__subrange_413::SimpleLimit(PermSet& Perm) {};
void mu__subrange_413::ArrayLimit(PermSet& Perm) {};
void mu__subrange_413::Limit(PermSet& Perm) {};
void mu__subrange_413::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_414::Permute(PermSet& Perm, int i) {};
void mu__subrange_414::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_414::Canonicalize(PermSet& Perm) {};
void mu__subrange_414::SimpleLimit(PermSet& Perm) {};
void mu__subrange_414::ArrayLimit(PermSet& Perm) {};
void mu__subrange_414::Limit(PermSet& Perm) {};
void mu__subrange_414::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_415::Permute(PermSet& Perm, int i) {};
void mu__subrange_415::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_415::Canonicalize(PermSet& Perm) {};
void mu__subrange_415::SimpleLimit(PermSet& Perm) {};
void mu__subrange_415::ArrayLimit(PermSet& Perm) {};
void mu__subrange_415::Limit(PermSet& Perm) {};
void mu__subrange_415::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_416::Permute(PermSet& Perm, int i) {};
void mu__subrange_416::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_416::Canonicalize(PermSet& Perm) {};
void mu__subrange_416::SimpleLimit(PermSet& Perm) {};
void mu__subrange_416::ArrayLimit(PermSet& Perm) {};
void mu__subrange_416::Limit(PermSet& Perm) {};
void mu__subrange_416::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_417::Permute(PermSet& Perm, int i) {};
void mu__subrange_417::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_417::Canonicalize(PermSet& Perm) {};
void mu__subrange_417::SimpleLimit(PermSet& Perm) {};
void mu__subrange_417::ArrayLimit(PermSet& Perm) {};
void mu__subrange_417::Limit(PermSet& Perm) {};
void mu__subrange_417::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_418::Permute(PermSet& Perm, int i) {};
void mu__subrange_418::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_418::Canonicalize(PermSet& Perm) {};
void mu__subrange_418::SimpleLimit(PermSet& Perm) {};
void mu__subrange_418::ArrayLimit(PermSet& Perm) {};
void mu__subrange_418::Limit(PermSet& Perm) {};
void mu__subrange_418::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_419::Permute(PermSet& Perm, int i) {};
void mu__subrange_419::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_419::Canonicalize(PermSet& Perm) {};
void mu__subrange_419::SimpleLimit(PermSet& Perm) {};
void mu__subrange_419::ArrayLimit(PermSet& Perm) {};
void mu__subrange_419::Limit(PermSet& Perm) {};
void mu__subrange_419::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_420::Permute(PermSet& Perm, int i) {};
void mu__subrange_420::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_420::Canonicalize(PermSet& Perm) {};
void mu__subrange_420::SimpleLimit(PermSet& Perm) {};
void mu__subrange_420::ArrayLimit(PermSet& Perm) {};
void mu__subrange_420::Limit(PermSet& Perm) {};
void mu__subrange_420::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_421::Permute(PermSet& Perm, int i) {};
void mu__subrange_421::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_421::Canonicalize(PermSet& Perm) {};
void mu__subrange_421::SimpleLimit(PermSet& Perm) {};
void mu__subrange_421::ArrayLimit(PermSet& Perm) {};
void mu__subrange_421::Limit(PermSet& Perm) {};
void mu__subrange_421::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_422::Permute(PermSet& Perm, int i) {};
void mu__subrange_422::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_422::Canonicalize(PermSet& Perm) {};
void mu__subrange_422::SimpleLimit(PermSet& Perm) {};
void mu__subrange_422::ArrayLimit(PermSet& Perm) {};
void mu__subrange_422::Limit(PermSet& Perm) {};
void mu__subrange_422::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_423::Permute(PermSet& Perm, int i) {};
void mu__subrange_423::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_423::Canonicalize(PermSet& Perm) {};
void mu__subrange_423::SimpleLimit(PermSet& Perm) {};
void mu__subrange_423::ArrayLimit(PermSet& Perm) {};
void mu__subrange_423::Limit(PermSet& Perm) {};
void mu__subrange_423::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_424::Permute(PermSet& Perm, int i) {};
void mu__subrange_424::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_424::Canonicalize(PermSet& Perm) {};
void mu__subrange_424::SimpleLimit(PermSet& Perm) {};
void mu__subrange_424::ArrayLimit(PermSet& Perm) {};
void mu__subrange_424::Limit(PermSet& Perm) {};
void mu__subrange_424::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_425::Permute(PermSet& Perm, int i) {};
void mu__subrange_425::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_425::Canonicalize(PermSet& Perm) {};
void mu__subrange_425::SimpleLimit(PermSet& Perm) {};
void mu__subrange_425::ArrayLimit(PermSet& Perm) {};
void mu__subrange_425::Limit(PermSet& Perm) {};
void mu__subrange_425::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_426::Permute(PermSet& Perm, int i) {};
void mu__subrange_426::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_426::Canonicalize(PermSet& Perm) {};
void mu__subrange_426::SimpleLimit(PermSet& Perm) {};
void mu__subrange_426::ArrayLimit(PermSet& Perm) {};
void mu__subrange_426::Limit(PermSet& Perm) {};
void mu__subrange_426::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_427::Permute(PermSet& Perm, int i) {};
void mu__subrange_427::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_427::Canonicalize(PermSet& Perm) {};
void mu__subrange_427::SimpleLimit(PermSet& Perm) {};
void mu__subrange_427::ArrayLimit(PermSet& Perm) {};
void mu__subrange_427::Limit(PermSet& Perm) {};
void mu__subrange_427::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_428::Permute(PermSet& Perm, int i) {};
void mu__subrange_428::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_428::Canonicalize(PermSet& Perm) {};
void mu__subrange_428::SimpleLimit(PermSet& Perm) {};
void mu__subrange_428::ArrayLimit(PermSet& Perm) {};
void mu__subrange_428::Limit(PermSet& Perm) {};
void mu__subrange_428::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_429::Permute(PermSet& Perm, int i) {};
void mu__subrange_429::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_429::Canonicalize(PermSet& Perm) {};
void mu__subrange_429::SimpleLimit(PermSet& Perm) {};
void mu__subrange_429::ArrayLimit(PermSet& Perm) {};
void mu__subrange_429::Limit(PermSet& Perm) {};
void mu__subrange_429::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_430::Permute(PermSet& Perm, int i) {};
void mu__subrange_430::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_430::Canonicalize(PermSet& Perm) {};
void mu__subrange_430::SimpleLimit(PermSet& Perm) {};
void mu__subrange_430::ArrayLimit(PermSet& Perm) {};
void mu__subrange_430::Limit(PermSet& Perm) {};
void mu__subrange_430::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_431::Permute(PermSet& Perm, int i) {};
void mu__subrange_431::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_431::Canonicalize(PermSet& Perm) {};
void mu__subrange_431::SimpleLimit(PermSet& Perm) {};
void mu__subrange_431::ArrayLimit(PermSet& Perm) {};
void mu__subrange_431::Limit(PermSet& Perm) {};
void mu__subrange_431::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_432::Permute(PermSet& Perm, int i) {};
void mu__subrange_432::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_432::Canonicalize(PermSet& Perm) {};
void mu__subrange_432::SimpleLimit(PermSet& Perm) {};
void mu__subrange_432::ArrayLimit(PermSet& Perm) {};
void mu__subrange_432::Limit(PermSet& Perm) {};
void mu__subrange_432::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_433::Permute(PermSet& Perm, int i) {};
void mu__subrange_433::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_433::Canonicalize(PermSet& Perm) {};
void mu__subrange_433::SimpleLimit(PermSet& Perm) {};
void mu__subrange_433::ArrayLimit(PermSet& Perm) {};
void mu__subrange_433::Limit(PermSet& Perm) {};
void mu__subrange_433::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_434::Permute(PermSet& Perm, int i) {};
void mu__subrange_434::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_434::Canonicalize(PermSet& Perm) {};
void mu__subrange_434::SimpleLimit(PermSet& Perm) {};
void mu__subrange_434::ArrayLimit(PermSet& Perm) {};
void mu__subrange_434::Limit(PermSet& Perm) {};
void mu__subrange_434::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_435::Permute(PermSet& Perm, int i) {};
void mu__subrange_435::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_435::Canonicalize(PermSet& Perm) {};
void mu__subrange_435::SimpleLimit(PermSet& Perm) {};
void mu__subrange_435::ArrayLimit(PermSet& Perm) {};
void mu__subrange_435::Limit(PermSet& Perm) {};
void mu__subrange_435::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_436::Permute(PermSet& Perm, int i) {};
void mu__subrange_436::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_436::Canonicalize(PermSet& Perm) {};
void mu__subrange_436::SimpleLimit(PermSet& Perm) {};
void mu__subrange_436::ArrayLimit(PermSet& Perm) {};
void mu__subrange_436::Limit(PermSet& Perm) {};
void mu__subrange_436::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_437::Permute(PermSet& Perm, int i) {};
void mu__subrange_437::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_437::Canonicalize(PermSet& Perm) {};
void mu__subrange_437::SimpleLimit(PermSet& Perm) {};
void mu__subrange_437::ArrayLimit(PermSet& Perm) {};
void mu__subrange_437::Limit(PermSet& Perm) {};
void mu__subrange_437::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_438::Permute(PermSet& Perm, int i) {};
void mu__subrange_438::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_438::Canonicalize(PermSet& Perm) {};
void mu__subrange_438::SimpleLimit(PermSet& Perm) {};
void mu__subrange_438::ArrayLimit(PermSet& Perm) {};
void mu__subrange_438::Limit(PermSet& Perm) {};
void mu__subrange_438::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_439::Permute(PermSet& Perm, int i) {};
void mu__subrange_439::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_439::Canonicalize(PermSet& Perm) {};
void mu__subrange_439::SimpleLimit(PermSet& Perm) {};
void mu__subrange_439::ArrayLimit(PermSet& Perm) {};
void mu__subrange_439::Limit(PermSet& Perm) {};
void mu__subrange_439::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_440::Permute(PermSet& Perm, int i) {};
void mu__subrange_440::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_440::Canonicalize(PermSet& Perm) {};
void mu__subrange_440::SimpleLimit(PermSet& Perm) {};
void mu__subrange_440::ArrayLimit(PermSet& Perm) {};
void mu__subrange_440::Limit(PermSet& Perm) {};
void mu__subrange_440::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_441::Permute(PermSet& Perm, int i) {};
void mu__subrange_441::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_441::Canonicalize(PermSet& Perm) {};
void mu__subrange_441::SimpleLimit(PermSet& Perm) {};
void mu__subrange_441::ArrayLimit(PermSet& Perm) {};
void mu__subrange_441::Limit(PermSet& Perm) {};
void mu__subrange_441::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_442::Permute(PermSet& Perm, int i) {};
void mu__subrange_442::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_442::Canonicalize(PermSet& Perm) {};
void mu__subrange_442::SimpleLimit(PermSet& Perm) {};
void mu__subrange_442::ArrayLimit(PermSet& Perm) {};
void mu__subrange_442::Limit(PermSet& Perm) {};
void mu__subrange_442::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_443::Permute(PermSet& Perm, int i) {};
void mu__subrange_443::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_443::Canonicalize(PermSet& Perm) {};
void mu__subrange_443::SimpleLimit(PermSet& Perm) {};
void mu__subrange_443::ArrayLimit(PermSet& Perm) {};
void mu__subrange_443::Limit(PermSet& Perm) {};
void mu__subrange_443::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_444::Permute(PermSet& Perm, int i) {};
void mu__subrange_444::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_444::Canonicalize(PermSet& Perm) {};
void mu__subrange_444::SimpleLimit(PermSet& Perm) {};
void mu__subrange_444::ArrayLimit(PermSet& Perm) {};
void mu__subrange_444::Limit(PermSet& Perm) {};
void mu__subrange_444::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_445::Permute(PermSet& Perm, int i) {};
void mu__subrange_445::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_445::Canonicalize(PermSet& Perm) {};
void mu__subrange_445::SimpleLimit(PermSet& Perm) {};
void mu__subrange_445::ArrayLimit(PermSet& Perm) {};
void mu__subrange_445::Limit(PermSet& Perm) {};
void mu__subrange_445::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_446::Permute(PermSet& Perm, int i) {};
void mu__subrange_446::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_446::Canonicalize(PermSet& Perm) {};
void mu__subrange_446::SimpleLimit(PermSet& Perm) {};
void mu__subrange_446::ArrayLimit(PermSet& Perm) {};
void mu__subrange_446::Limit(PermSet& Perm) {};
void mu__subrange_446::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_447::Permute(PermSet& Perm, int i) {};
void mu__subrange_447::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_447::Canonicalize(PermSet& Perm) {};
void mu__subrange_447::SimpleLimit(PermSet& Perm) {};
void mu__subrange_447::ArrayLimit(PermSet& Perm) {};
void mu__subrange_447::Limit(PermSet& Perm) {};
void mu__subrange_447::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_448::Permute(PermSet& Perm, int i) {};
void mu__subrange_448::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_448::Canonicalize(PermSet& Perm) {};
void mu__subrange_448::SimpleLimit(PermSet& Perm) {};
void mu__subrange_448::ArrayLimit(PermSet& Perm) {};
void mu__subrange_448::Limit(PermSet& Perm) {};
void mu__subrange_448::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_449::Permute(PermSet& Perm, int i) {};
void mu__subrange_449::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_449::Canonicalize(PermSet& Perm) {};
void mu__subrange_449::SimpleLimit(PermSet& Perm) {};
void mu__subrange_449::ArrayLimit(PermSet& Perm) {};
void mu__subrange_449::Limit(PermSet& Perm) {};
void mu__subrange_449::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_450::Permute(PermSet& Perm, int i) {};
void mu__subrange_450::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_450::Canonicalize(PermSet& Perm) {};
void mu__subrange_450::SimpleLimit(PermSet& Perm) {};
void mu__subrange_450::ArrayLimit(PermSet& Perm) {};
void mu__subrange_450::Limit(PermSet& Perm) {};
void mu__subrange_450::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_451::Permute(PermSet& Perm, int i) {};
void mu__subrange_451::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_451::Canonicalize(PermSet& Perm) {};
void mu__subrange_451::SimpleLimit(PermSet& Perm) {};
void mu__subrange_451::ArrayLimit(PermSet& Perm) {};
void mu__subrange_451::Limit(PermSet& Perm) {};
void mu__subrange_451::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_452::Permute(PermSet& Perm, int i) {};
void mu__subrange_452::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_452::Canonicalize(PermSet& Perm) {};
void mu__subrange_452::SimpleLimit(PermSet& Perm) {};
void mu__subrange_452::ArrayLimit(PermSet& Perm) {};
void mu__subrange_452::Limit(PermSet& Perm) {};
void mu__subrange_452::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_453::Permute(PermSet& Perm, int i) {};
void mu__subrange_453::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_453::Canonicalize(PermSet& Perm) {};
void mu__subrange_453::SimpleLimit(PermSet& Perm) {};
void mu__subrange_453::ArrayLimit(PermSet& Perm) {};
void mu__subrange_453::Limit(PermSet& Perm) {};
void mu__subrange_453::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_454::Permute(PermSet& Perm, int i) {};
void mu__subrange_454::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_454::Canonicalize(PermSet& Perm) {};
void mu__subrange_454::SimpleLimit(PermSet& Perm) {};
void mu__subrange_454::ArrayLimit(PermSet& Perm) {};
void mu__subrange_454::Limit(PermSet& Perm) {};
void mu__subrange_454::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_455::Permute(PermSet& Perm, int i) {};
void mu__subrange_455::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_455::Canonicalize(PermSet& Perm) {};
void mu__subrange_455::SimpleLimit(PermSet& Perm) {};
void mu__subrange_455::ArrayLimit(PermSet& Perm) {};
void mu__subrange_455::Limit(PermSet& Perm) {};
void mu__subrange_455::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_456::Permute(PermSet& Perm, int i) {};
void mu__subrange_456::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_456::Canonicalize(PermSet& Perm) {};
void mu__subrange_456::SimpleLimit(PermSet& Perm) {};
void mu__subrange_456::ArrayLimit(PermSet& Perm) {};
void mu__subrange_456::Limit(PermSet& Perm) {};
void mu__subrange_456::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_457::Permute(PermSet& Perm, int i) {};
void mu__subrange_457::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_457::Canonicalize(PermSet& Perm) {};
void mu__subrange_457::SimpleLimit(PermSet& Perm) {};
void mu__subrange_457::ArrayLimit(PermSet& Perm) {};
void mu__subrange_457::Limit(PermSet& Perm) {};
void mu__subrange_457::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_458::Permute(PermSet& Perm, int i) {};
void mu__subrange_458::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_458::Canonicalize(PermSet& Perm) {};
void mu__subrange_458::SimpleLimit(PermSet& Perm) {};
void mu__subrange_458::ArrayLimit(PermSet& Perm) {};
void mu__subrange_458::Limit(PermSet& Perm) {};
void mu__subrange_458::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_459::Permute(PermSet& Perm, int i) {};
void mu__subrange_459::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_459::Canonicalize(PermSet& Perm) {};
void mu__subrange_459::SimpleLimit(PermSet& Perm) {};
void mu__subrange_459::ArrayLimit(PermSet& Perm) {};
void mu__subrange_459::Limit(PermSet& Perm) {};
void mu__subrange_459::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_460::Permute(PermSet& Perm, int i) {};
void mu__subrange_460::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_460::Canonicalize(PermSet& Perm) {};
void mu__subrange_460::SimpleLimit(PermSet& Perm) {};
void mu__subrange_460::ArrayLimit(PermSet& Perm) {};
void mu__subrange_460::Limit(PermSet& Perm) {};
void mu__subrange_460::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_461::Permute(PermSet& Perm, int i) {};
void mu__subrange_461::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_461::Canonicalize(PermSet& Perm) {};
void mu__subrange_461::SimpleLimit(PermSet& Perm) {};
void mu__subrange_461::ArrayLimit(PermSet& Perm) {};
void mu__subrange_461::Limit(PermSet& Perm) {};
void mu__subrange_461::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_462::Permute(PermSet& Perm, int i) {};
void mu__subrange_462::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_462::Canonicalize(PermSet& Perm) {};
void mu__subrange_462::SimpleLimit(PermSet& Perm) {};
void mu__subrange_462::ArrayLimit(PermSet& Perm) {};
void mu__subrange_462::Limit(PermSet& Perm) {};
void mu__subrange_462::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_463::Permute(PermSet& Perm, int i) {};
void mu__subrange_463::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_463::Canonicalize(PermSet& Perm) {};
void mu__subrange_463::SimpleLimit(PermSet& Perm) {};
void mu__subrange_463::ArrayLimit(PermSet& Perm) {};
void mu__subrange_463::Limit(PermSet& Perm) {};
void mu__subrange_463::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_464::Permute(PermSet& Perm, int i) {};
void mu__subrange_464::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_464::Canonicalize(PermSet& Perm) {};
void mu__subrange_464::SimpleLimit(PermSet& Perm) {};
void mu__subrange_464::ArrayLimit(PermSet& Perm) {};
void mu__subrange_464::Limit(PermSet& Perm) {};
void mu__subrange_464::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_465::Permute(PermSet& Perm, int i) {};
void mu__subrange_465::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_465::Canonicalize(PermSet& Perm) {};
void mu__subrange_465::SimpleLimit(PermSet& Perm) {};
void mu__subrange_465::ArrayLimit(PermSet& Perm) {};
void mu__subrange_465::Limit(PermSet& Perm) {};
void mu__subrange_465::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_466::Permute(PermSet& Perm, int i) {};
void mu__subrange_466::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_466::Canonicalize(PermSet& Perm) {};
void mu__subrange_466::SimpleLimit(PermSet& Perm) {};
void mu__subrange_466::ArrayLimit(PermSet& Perm) {};
void mu__subrange_466::Limit(PermSet& Perm) {};
void mu__subrange_466::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_467::Permute(PermSet& Perm, int i) {};
void mu__subrange_467::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_467::Canonicalize(PermSet& Perm) {};
void mu__subrange_467::SimpleLimit(PermSet& Perm) {};
void mu__subrange_467::ArrayLimit(PermSet& Perm) {};
void mu__subrange_467::Limit(PermSet& Perm) {};
void mu__subrange_467::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_468::Permute(PermSet& Perm, int i) {};
void mu__subrange_468::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_468::Canonicalize(PermSet& Perm) {};
void mu__subrange_468::SimpleLimit(PermSet& Perm) {};
void mu__subrange_468::ArrayLimit(PermSet& Perm) {};
void mu__subrange_468::Limit(PermSet& Perm) {};
void mu__subrange_468::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_469::Permute(PermSet& Perm, int i) {};
void mu__subrange_469::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_469::Canonicalize(PermSet& Perm) {};
void mu__subrange_469::SimpleLimit(PermSet& Perm) {};
void mu__subrange_469::ArrayLimit(PermSet& Perm) {};
void mu__subrange_469::Limit(PermSet& Perm) {};
void mu__subrange_469::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_470::Permute(PermSet& Perm, int i) {};
void mu__subrange_470::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_470::Canonicalize(PermSet& Perm) {};
void mu__subrange_470::SimpleLimit(PermSet& Perm) {};
void mu__subrange_470::ArrayLimit(PermSet& Perm) {};
void mu__subrange_470::Limit(PermSet& Perm) {};
void mu__subrange_470::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_471::Permute(PermSet& Perm, int i) {};
void mu__subrange_471::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_471::Canonicalize(PermSet& Perm) {};
void mu__subrange_471::SimpleLimit(PermSet& Perm) {};
void mu__subrange_471::ArrayLimit(PermSet& Perm) {};
void mu__subrange_471::Limit(PermSet& Perm) {};
void mu__subrange_471::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_472::Permute(PermSet& Perm, int i) {};
void mu__subrange_472::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_472::Canonicalize(PermSet& Perm) {};
void mu__subrange_472::SimpleLimit(PermSet& Perm) {};
void mu__subrange_472::ArrayLimit(PermSet& Perm) {};
void mu__subrange_472::Limit(PermSet& Perm) {};
void mu__subrange_472::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_473::Permute(PermSet& Perm, int i) {};
void mu__subrange_473::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_473::Canonicalize(PermSet& Perm) {};
void mu__subrange_473::SimpleLimit(PermSet& Perm) {};
void mu__subrange_473::ArrayLimit(PermSet& Perm) {};
void mu__subrange_473::Limit(PermSet& Perm) {};
void mu__subrange_473::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_474::Permute(PermSet& Perm, int i) {};
void mu__subrange_474::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_474::Canonicalize(PermSet& Perm) {};
void mu__subrange_474::SimpleLimit(PermSet& Perm) {};
void mu__subrange_474::ArrayLimit(PermSet& Perm) {};
void mu__subrange_474::Limit(PermSet& Perm) {};
void mu__subrange_474::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_475::Permute(PermSet& Perm, int i) {};
void mu__subrange_475::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_475::Canonicalize(PermSet& Perm) {};
void mu__subrange_475::SimpleLimit(PermSet& Perm) {};
void mu__subrange_475::ArrayLimit(PermSet& Perm) {};
void mu__subrange_475::Limit(PermSet& Perm) {};
void mu__subrange_475::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_476::Permute(PermSet& Perm, int i) {};
void mu__subrange_476::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_476::Canonicalize(PermSet& Perm) {};
void mu__subrange_476::SimpleLimit(PermSet& Perm) {};
void mu__subrange_476::ArrayLimit(PermSet& Perm) {};
void mu__subrange_476::Limit(PermSet& Perm) {};
void mu__subrange_476::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_477::Permute(PermSet& Perm, int i) {};
void mu__subrange_477::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_477::Canonicalize(PermSet& Perm) {};
void mu__subrange_477::SimpleLimit(PermSet& Perm) {};
void mu__subrange_477::ArrayLimit(PermSet& Perm) {};
void mu__subrange_477::Limit(PermSet& Perm) {};
void mu__subrange_477::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_478::Permute(PermSet& Perm, int i) {};
void mu__subrange_478::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_478::Canonicalize(PermSet& Perm) {};
void mu__subrange_478::SimpleLimit(PermSet& Perm) {};
void mu__subrange_478::ArrayLimit(PermSet& Perm) {};
void mu__subrange_478::Limit(PermSet& Perm) {};
void mu__subrange_478::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_479::Permute(PermSet& Perm, int i) {};
void mu__subrange_479::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_479::Canonicalize(PermSet& Perm) {};
void mu__subrange_479::SimpleLimit(PermSet& Perm) {};
void mu__subrange_479::ArrayLimit(PermSet& Perm) {};
void mu__subrange_479::Limit(PermSet& Perm) {};
void mu__subrange_479::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_480::Permute(PermSet& Perm, int i) {};
void mu__subrange_480::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_480::Canonicalize(PermSet& Perm) {};
void mu__subrange_480::SimpleLimit(PermSet& Perm) {};
void mu__subrange_480::ArrayLimit(PermSet& Perm) {};
void mu__subrange_480::Limit(PermSet& Perm) {};
void mu__subrange_480::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_481::Permute(PermSet& Perm, int i) {};
void mu__subrange_481::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_481::Canonicalize(PermSet& Perm) {};
void mu__subrange_481::SimpleLimit(PermSet& Perm) {};
void mu__subrange_481::ArrayLimit(PermSet& Perm) {};
void mu__subrange_481::Limit(PermSet& Perm) {};
void mu__subrange_481::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_482::Permute(PermSet& Perm, int i) {};
void mu__subrange_482::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_482::Canonicalize(PermSet& Perm) {};
void mu__subrange_482::SimpleLimit(PermSet& Perm) {};
void mu__subrange_482::ArrayLimit(PermSet& Perm) {};
void mu__subrange_482::Limit(PermSet& Perm) {};
void mu__subrange_482::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_483::Permute(PermSet& Perm, int i) {};
void mu__subrange_483::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_483::Canonicalize(PermSet& Perm) {};
void mu__subrange_483::SimpleLimit(PermSet& Perm) {};
void mu__subrange_483::ArrayLimit(PermSet& Perm) {};
void mu__subrange_483::Limit(PermSet& Perm) {};
void mu__subrange_483::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_484::Permute(PermSet& Perm, int i) {};
void mu__subrange_484::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_484::Canonicalize(PermSet& Perm) {};
void mu__subrange_484::SimpleLimit(PermSet& Perm) {};
void mu__subrange_484::ArrayLimit(PermSet& Perm) {};
void mu__subrange_484::Limit(PermSet& Perm) {};
void mu__subrange_484::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_485::Permute(PermSet& Perm, int i) {};
void mu__subrange_485::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_485::Canonicalize(PermSet& Perm) {};
void mu__subrange_485::SimpleLimit(PermSet& Perm) {};
void mu__subrange_485::ArrayLimit(PermSet& Perm) {};
void mu__subrange_485::Limit(PermSet& Perm) {};
void mu__subrange_485::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_486::Permute(PermSet& Perm, int i) {};
void mu__subrange_486::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_486::Canonicalize(PermSet& Perm) {};
void mu__subrange_486::SimpleLimit(PermSet& Perm) {};
void mu__subrange_486::ArrayLimit(PermSet& Perm) {};
void mu__subrange_486::Limit(PermSet& Perm) {};
void mu__subrange_486::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_487::Permute(PermSet& Perm, int i) {};
void mu__subrange_487::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_487::Canonicalize(PermSet& Perm) {};
void mu__subrange_487::SimpleLimit(PermSet& Perm) {};
void mu__subrange_487::ArrayLimit(PermSet& Perm) {};
void mu__subrange_487::Limit(PermSet& Perm) {};
void mu__subrange_487::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_488::Permute(PermSet& Perm, int i) {};
void mu__subrange_488::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_488::Canonicalize(PermSet& Perm) {};
void mu__subrange_488::SimpleLimit(PermSet& Perm) {};
void mu__subrange_488::ArrayLimit(PermSet& Perm) {};
void mu__subrange_488::Limit(PermSet& Perm) {};
void mu__subrange_488::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_489::Permute(PermSet& Perm, int i) {};
void mu__subrange_489::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_489::Canonicalize(PermSet& Perm) {};
void mu__subrange_489::SimpleLimit(PermSet& Perm) {};
void mu__subrange_489::ArrayLimit(PermSet& Perm) {};
void mu__subrange_489::Limit(PermSet& Perm) {};
void mu__subrange_489::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_490::Permute(PermSet& Perm, int i) {};
void mu__subrange_490::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_490::Canonicalize(PermSet& Perm) {};
void mu__subrange_490::SimpleLimit(PermSet& Perm) {};
void mu__subrange_490::ArrayLimit(PermSet& Perm) {};
void mu__subrange_490::Limit(PermSet& Perm) {};
void mu__subrange_490::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_491::Permute(PermSet& Perm, int i) {};
void mu__subrange_491::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_491::Canonicalize(PermSet& Perm) {};
void mu__subrange_491::SimpleLimit(PermSet& Perm) {};
void mu__subrange_491::ArrayLimit(PermSet& Perm) {};
void mu__subrange_491::Limit(PermSet& Perm) {};
void mu__subrange_491::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_492::Permute(PermSet& Perm, int i) {};
void mu__subrange_492::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_492::Canonicalize(PermSet& Perm) {};
void mu__subrange_492::SimpleLimit(PermSet& Perm) {};
void mu__subrange_492::ArrayLimit(PermSet& Perm) {};
void mu__subrange_492::Limit(PermSet& Perm) {};
void mu__subrange_492::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_493::Permute(PermSet& Perm, int i) {};
void mu__subrange_493::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_493::Canonicalize(PermSet& Perm) {};
void mu__subrange_493::SimpleLimit(PermSet& Perm) {};
void mu__subrange_493::ArrayLimit(PermSet& Perm) {};
void mu__subrange_493::Limit(PermSet& Perm) {};
void mu__subrange_493::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_494::Permute(PermSet& Perm, int i) {};
void mu__subrange_494::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_494::Canonicalize(PermSet& Perm) {};
void mu__subrange_494::SimpleLimit(PermSet& Perm) {};
void mu__subrange_494::ArrayLimit(PermSet& Perm) {};
void mu__subrange_494::Limit(PermSet& Perm) {};
void mu__subrange_494::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_495::Permute(PermSet& Perm, int i) {};
void mu__subrange_495::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_495::Canonicalize(PermSet& Perm) {};
void mu__subrange_495::SimpleLimit(PermSet& Perm) {};
void mu__subrange_495::ArrayLimit(PermSet& Perm) {};
void mu__subrange_495::Limit(PermSet& Perm) {};
void mu__subrange_495::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_496::Permute(PermSet& Perm, int i) {};
void mu__subrange_496::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_496::Canonicalize(PermSet& Perm) {};
void mu__subrange_496::SimpleLimit(PermSet& Perm) {};
void mu__subrange_496::ArrayLimit(PermSet& Perm) {};
void mu__subrange_496::Limit(PermSet& Perm) {};
void mu__subrange_496::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_497::Permute(PermSet& Perm, int i) {};
void mu__subrange_497::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_497::Canonicalize(PermSet& Perm) {};
void mu__subrange_497::SimpleLimit(PermSet& Perm) {};
void mu__subrange_497::ArrayLimit(PermSet& Perm) {};
void mu__subrange_497::Limit(PermSet& Perm) {};
void mu__subrange_497::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_498::Permute(PermSet& Perm, int i) {};
void mu__subrange_498::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_498::Canonicalize(PermSet& Perm) {};
void mu__subrange_498::SimpleLimit(PermSet& Perm) {};
void mu__subrange_498::ArrayLimit(PermSet& Perm) {};
void mu__subrange_498::Limit(PermSet& Perm) {};
void mu__subrange_498::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_499::Permute(PermSet& Perm, int i) {};
void mu__subrange_499::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_499::Canonicalize(PermSet& Perm) {};
void mu__subrange_499::SimpleLimit(PermSet& Perm) {};
void mu__subrange_499::ArrayLimit(PermSet& Perm) {};
void mu__subrange_499::Limit(PermSet& Perm) {};
void mu__subrange_499::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_500::Permute(PermSet& Perm, int i) {};
void mu__subrange_500::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_500::Canonicalize(PermSet& Perm) {};
void mu__subrange_500::SimpleLimit(PermSet& Perm) {};
void mu__subrange_500::ArrayLimit(PermSet& Perm) {};
void mu__subrange_500::Limit(PermSet& Perm) {};
void mu__subrange_500::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_501::Permute(PermSet& Perm, int i) {};
void mu__subrange_501::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_501::Canonicalize(PermSet& Perm) {};
void mu__subrange_501::SimpleLimit(PermSet& Perm) {};
void mu__subrange_501::ArrayLimit(PermSet& Perm) {};
void mu__subrange_501::Limit(PermSet& Perm) {};
void mu__subrange_501::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_502::Permute(PermSet& Perm, int i) {};
void mu__subrange_502::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_502::Canonicalize(PermSet& Perm) {};
void mu__subrange_502::SimpleLimit(PermSet& Perm) {};
void mu__subrange_502::ArrayLimit(PermSet& Perm) {};
void mu__subrange_502::Limit(PermSet& Perm) {};
void mu__subrange_502::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_503::Permute(PermSet& Perm, int i) {};
void mu__subrange_503::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_503::Canonicalize(PermSet& Perm) {};
void mu__subrange_503::SimpleLimit(PermSet& Perm) {};
void mu__subrange_503::ArrayLimit(PermSet& Perm) {};
void mu__subrange_503::Limit(PermSet& Perm) {};
void mu__subrange_503::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_504::Permute(PermSet& Perm, int i) {};
void mu__subrange_504::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_504::Canonicalize(PermSet& Perm) {};
void mu__subrange_504::SimpleLimit(PermSet& Perm) {};
void mu__subrange_504::ArrayLimit(PermSet& Perm) {};
void mu__subrange_504::Limit(PermSet& Perm) {};
void mu__subrange_504::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_505::Permute(PermSet& Perm, int i) {};
void mu__subrange_505::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_505::Canonicalize(PermSet& Perm) {};
void mu__subrange_505::SimpleLimit(PermSet& Perm) {};
void mu__subrange_505::ArrayLimit(PermSet& Perm) {};
void mu__subrange_505::Limit(PermSet& Perm) {};
void mu__subrange_505::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_506::Permute(PermSet& Perm, int i) {};
void mu__subrange_506::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_506::Canonicalize(PermSet& Perm) {};
void mu__subrange_506::SimpleLimit(PermSet& Perm) {};
void mu__subrange_506::ArrayLimit(PermSet& Perm) {};
void mu__subrange_506::Limit(PermSet& Perm) {};
void mu__subrange_506::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_507::Permute(PermSet& Perm, int i) {};
void mu__subrange_507::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_507::Canonicalize(PermSet& Perm) {};
void mu__subrange_507::SimpleLimit(PermSet& Perm) {};
void mu__subrange_507::ArrayLimit(PermSet& Perm) {};
void mu__subrange_507::Limit(PermSet& Perm) {};
void mu__subrange_507::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_508::Permute(PermSet& Perm, int i) {};
void mu__subrange_508::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_508::Canonicalize(PermSet& Perm) {};
void mu__subrange_508::SimpleLimit(PermSet& Perm) {};
void mu__subrange_508::ArrayLimit(PermSet& Perm) {};
void mu__subrange_508::Limit(PermSet& Perm) {};
void mu__subrange_508::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_509::Permute(PermSet& Perm, int i) {};
void mu__subrange_509::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_509::Canonicalize(PermSet& Perm) {};
void mu__subrange_509::SimpleLimit(PermSet& Perm) {};
void mu__subrange_509::ArrayLimit(PermSet& Perm) {};
void mu__subrange_509::Limit(PermSet& Perm) {};
void mu__subrange_509::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_510::Permute(PermSet& Perm, int i) {};
void mu__subrange_510::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_510::Canonicalize(PermSet& Perm) {};
void mu__subrange_510::SimpleLimit(PermSet& Perm) {};
void mu__subrange_510::ArrayLimit(PermSet& Perm) {};
void mu__subrange_510::Limit(PermSet& Perm) {};
void mu__subrange_510::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_511::Permute(PermSet& Perm, int i) {};
void mu__subrange_511::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_511::Canonicalize(PermSet& Perm) {};
void mu__subrange_511::SimpleLimit(PermSet& Perm) {};
void mu__subrange_511::ArrayLimit(PermSet& Perm) {};
void mu__subrange_511::Limit(PermSet& Perm) {};
void mu__subrange_511::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_512::Permute(PermSet& Perm, int i) {};
void mu__subrange_512::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_512::Canonicalize(PermSet& Perm) {};
void mu__subrange_512::SimpleLimit(PermSet& Perm) {};
void mu__subrange_512::ArrayLimit(PermSet& Perm) {};
void mu__subrange_512::Limit(PermSet& Perm) {};
void mu__subrange_512::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_513::Permute(PermSet& Perm, int i) {};
void mu__subrange_513::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_513::Canonicalize(PermSet& Perm) {};
void mu__subrange_513::SimpleLimit(PermSet& Perm) {};
void mu__subrange_513::ArrayLimit(PermSet& Perm) {};
void mu__subrange_513::Limit(PermSet& Perm) {};
void mu__subrange_513::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_514::Permute(PermSet& Perm, int i) {};
void mu__subrange_514::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_514::Canonicalize(PermSet& Perm) {};
void mu__subrange_514::SimpleLimit(PermSet& Perm) {};
void mu__subrange_514::ArrayLimit(PermSet& Perm) {};
void mu__subrange_514::Limit(PermSet& Perm) {};
void mu__subrange_514::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_515::Permute(PermSet& Perm, int i) {};
void mu__subrange_515::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_515::Canonicalize(PermSet& Perm) {};
void mu__subrange_515::SimpleLimit(PermSet& Perm) {};
void mu__subrange_515::ArrayLimit(PermSet& Perm) {};
void mu__subrange_515::Limit(PermSet& Perm) {};
void mu__subrange_515::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_516::Permute(PermSet& Perm, int i) {};
void mu__subrange_516::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_516::Canonicalize(PermSet& Perm) {};
void mu__subrange_516::SimpleLimit(PermSet& Perm) {};
void mu__subrange_516::ArrayLimit(PermSet& Perm) {};
void mu__subrange_516::Limit(PermSet& Perm) {};
void mu__subrange_516::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_517::Permute(PermSet& Perm, int i) {};
void mu__subrange_517::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_517::Canonicalize(PermSet& Perm) {};
void mu__subrange_517::SimpleLimit(PermSet& Perm) {};
void mu__subrange_517::ArrayLimit(PermSet& Perm) {};
void mu__subrange_517::Limit(PermSet& Perm) {};
void mu__subrange_517::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_518::Permute(PermSet& Perm, int i) {};
void mu__subrange_518::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_518::Canonicalize(PermSet& Perm) {};
void mu__subrange_518::SimpleLimit(PermSet& Perm) {};
void mu__subrange_518::ArrayLimit(PermSet& Perm) {};
void mu__subrange_518::Limit(PermSet& Perm) {};
void mu__subrange_518::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_519::Permute(PermSet& Perm, int i) {};
void mu__subrange_519::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_519::Canonicalize(PermSet& Perm) {};
void mu__subrange_519::SimpleLimit(PermSet& Perm) {};
void mu__subrange_519::ArrayLimit(PermSet& Perm) {};
void mu__subrange_519::Limit(PermSet& Perm) {};
void mu__subrange_519::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_520::Permute(PermSet& Perm, int i) {};
void mu__subrange_520::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_520::Canonicalize(PermSet& Perm) {};
void mu__subrange_520::SimpleLimit(PermSet& Perm) {};
void mu__subrange_520::ArrayLimit(PermSet& Perm) {};
void mu__subrange_520::Limit(PermSet& Perm) {};
void mu__subrange_520::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_521::Permute(PermSet& Perm, int i) {};
void mu__subrange_521::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_521::Canonicalize(PermSet& Perm) {};
void mu__subrange_521::SimpleLimit(PermSet& Perm) {};
void mu__subrange_521::ArrayLimit(PermSet& Perm) {};
void mu__subrange_521::Limit(PermSet& Perm) {};
void mu__subrange_521::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_522::Permute(PermSet& Perm, int i) {};
void mu__subrange_522::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_522::Canonicalize(PermSet& Perm) {};
void mu__subrange_522::SimpleLimit(PermSet& Perm) {};
void mu__subrange_522::ArrayLimit(PermSet& Perm) {};
void mu__subrange_522::Limit(PermSet& Perm) {};
void mu__subrange_522::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_523::Permute(PermSet& Perm, int i) {};
void mu__subrange_523::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_523::Canonicalize(PermSet& Perm) {};
void mu__subrange_523::SimpleLimit(PermSet& Perm) {};
void mu__subrange_523::ArrayLimit(PermSet& Perm) {};
void mu__subrange_523::Limit(PermSet& Perm) {};
void mu__subrange_523::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_524::Permute(PermSet& Perm, int i) {};
void mu__subrange_524::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_524::Canonicalize(PermSet& Perm) {};
void mu__subrange_524::SimpleLimit(PermSet& Perm) {};
void mu__subrange_524::ArrayLimit(PermSet& Perm) {};
void mu__subrange_524::Limit(PermSet& Perm) {};
void mu__subrange_524::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_525::Permute(PermSet& Perm, int i) {};
void mu__subrange_525::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_525::Canonicalize(PermSet& Perm) {};
void mu__subrange_525::SimpleLimit(PermSet& Perm) {};
void mu__subrange_525::ArrayLimit(PermSet& Perm) {};
void mu__subrange_525::Limit(PermSet& Perm) {};
void mu__subrange_525::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_526::Permute(PermSet& Perm, int i) {};
void mu__subrange_526::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_526::Canonicalize(PermSet& Perm) {};
void mu__subrange_526::SimpleLimit(PermSet& Perm) {};
void mu__subrange_526::ArrayLimit(PermSet& Perm) {};
void mu__subrange_526::Limit(PermSet& Perm) {};
void mu__subrange_526::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_527::Permute(PermSet& Perm, int i) {};
void mu__subrange_527::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_527::Canonicalize(PermSet& Perm) {};
void mu__subrange_527::SimpleLimit(PermSet& Perm) {};
void mu__subrange_527::ArrayLimit(PermSet& Perm) {};
void mu__subrange_527::Limit(PermSet& Perm) {};
void mu__subrange_527::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_528::Permute(PermSet& Perm, int i) {};
void mu__subrange_528::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_528::Canonicalize(PermSet& Perm) {};
void mu__subrange_528::SimpleLimit(PermSet& Perm) {};
void mu__subrange_528::ArrayLimit(PermSet& Perm) {};
void mu__subrange_528::Limit(PermSet& Perm) {};
void mu__subrange_528::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_529::Permute(PermSet& Perm, int i) {};
void mu__subrange_529::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_529::Canonicalize(PermSet& Perm) {};
void mu__subrange_529::SimpleLimit(PermSet& Perm) {};
void mu__subrange_529::ArrayLimit(PermSet& Perm) {};
void mu__subrange_529::Limit(PermSet& Perm) {};
void mu__subrange_529::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_530::Permute(PermSet& Perm, int i) {};
void mu__subrange_530::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_530::Canonicalize(PermSet& Perm) {};
void mu__subrange_530::SimpleLimit(PermSet& Perm) {};
void mu__subrange_530::ArrayLimit(PermSet& Perm) {};
void mu__subrange_530::Limit(PermSet& Perm) {};
void mu__subrange_530::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_531::Permute(PermSet& Perm, int i) {};
void mu__subrange_531::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_531::Canonicalize(PermSet& Perm) {};
void mu__subrange_531::SimpleLimit(PermSet& Perm) {};
void mu__subrange_531::ArrayLimit(PermSet& Perm) {};
void mu__subrange_531::Limit(PermSet& Perm) {};
void mu__subrange_531::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };
void mu__subrange_532::Permute(PermSet& Perm, int i) {};
void mu__subrange_532::SimpleCanonicalize(PermSet& Perm) {};
void mu__subrange_532::Canonicalize(PermSet& Perm) {};
void mu__subrange_532::SimpleLimit(PermSet& Perm) {};
void mu__subrange_532::ArrayLimit(PermSet& Perm) {};
void mu__subrange_532::Limit(PermSet& Perm) {};
void mu__subrange_532::MultisetLimit(PermSet& Perm)
{ Error.Error("Internal: calling MultisetLimit for subrange type.\n"); };

/********************
 Auxiliary function for error trace printing
 ********************/
bool match(state* ns, StatePtr p)
{
  int i;
  static PermSet Perm;
  static state temp;
  StateCopy(&temp, ns);
  if (args->symmetry_reduction.value)
    {
      if (  args->sym_alg.mode == argsym_alg::Exhaustive_Fast_Canonicalize) {
        Perm.ResetToExplicit();
        for (i=0; i<Perm.count; i++)
          if (Perm.In(i))
            {
              if (ns != workingstate)
                  StateCopy(workingstate, ns);
              
              mu_Tokens.Permute(Perm,i);
              if (args->multiset_reduction.value)
                mu_Tokens.MultisetSort();
              mu_TailPointers.Permute(Perm,i);
              if (args->multiset_reduction.value)
                mu_TailPointers.MultisetSort();
              mu_IncomingQueue.Permute(Perm,i);
              if (args->multiset_reduction.value)
                mu_IncomingQueue.MultisetSort();
              mu_RouterStatus.Permute(Perm,i);
              if (args->multiset_reduction.value)
                mu_RouterStatus.MultisetSort();
              mu_Routers.Permute(Perm,i);
              if (args->multiset_reduction.value)
                mu_Routers.MultisetSort();
              mu_ExitPath.Permute(Perm,i);
              if (args->multiset_reduction.value)
                mu_ExitPath.MultisetSort();
              mu_EntryPath.Permute(Perm,i);
              if (args->multiset_reduction.value)
                mu_EntryPath.MultisetSort();
            if (p.compare(workingstate)) {
              StateCopy(workingstate,&temp); return TRUE; }
          }
        StateCopy(workingstate,&temp);
        return FALSE;
      }
      else {
        Perm.ResetToSimple();
        Perm.SimpleToOne();
        if (ns != workingstate)
          StateCopy(workingstate, ns);

          mu_Tokens.Permute(Perm,0);
          if (args->multiset_reduction.value)
            mu_Tokens.MultisetSort();
          mu_TailPointers.Permute(Perm,0);
          if (args->multiset_reduction.value)
            mu_TailPointers.MultisetSort();
          mu_IncomingQueue.Permute(Perm,0);
          if (args->multiset_reduction.value)
            mu_IncomingQueue.MultisetSort();
          mu_RouterStatus.Permute(Perm,0);
          if (args->multiset_reduction.value)
            mu_RouterStatus.MultisetSort();
          mu_Routers.Permute(Perm,0);
          if (args->multiset_reduction.value)
            mu_Routers.MultisetSort();
          mu_ExitPath.Permute(Perm,0);
          if (args->multiset_reduction.value)
            mu_ExitPath.MultisetSort();
          mu_EntryPath.Permute(Perm,0);
          if (args->multiset_reduction.value)
            mu_EntryPath.MultisetSort();
        if (p.compare(workingstate)) {
          StateCopy(workingstate,&temp); return TRUE; }

        while (Perm.NextPermutation())
          {
            if (ns != workingstate)
              StateCopy(workingstate, ns);
              
              mu_Tokens.Permute(Perm,0);
              if (args->multiset_reduction.value)
                mu_Tokens.MultisetSort();
              mu_TailPointers.Permute(Perm,0);
              if (args->multiset_reduction.value)
                mu_TailPointers.MultisetSort();
              mu_IncomingQueue.Permute(Perm,0);
              if (args->multiset_reduction.value)
                mu_IncomingQueue.MultisetSort();
              mu_RouterStatus.Permute(Perm,0);
              if (args->multiset_reduction.value)
                mu_RouterStatus.MultisetSort();
              mu_Routers.Permute(Perm,0);
              if (args->multiset_reduction.value)
                mu_Routers.MultisetSort();
              mu_ExitPath.Permute(Perm,0);
              if (args->multiset_reduction.value)
                mu_ExitPath.MultisetSort();
              mu_EntryPath.Permute(Perm,0);
              if (args->multiset_reduction.value)
                mu_EntryPath.MultisetSort();
            if (p.compare(workingstate)) {
              StateCopy(workingstate,&temp); return TRUE; }
          }
        StateCopy(workingstate,&temp);
        return FALSE;
      }
    }
  if (!args->symmetry_reduction.value
      && args->multiset_reduction.value)
    {
      if (ns != workingstate)
          StateCopy(workingstate, ns);
      mu_Tokens.MultisetSort();
      mu_TailPointers.MultisetSort();
      mu_IncomingQueue.MultisetSort();
      mu_RouterStatus.MultisetSort();
      mu_Routers.MultisetSort();
      mu_ExitPath.MultisetSort();
      mu_EntryPath.MultisetSort();
      if (p.compare(workingstate)) {
        StateCopy(workingstate,&temp); return TRUE; }
      StateCopy(workingstate,&temp);
      return FALSE;
    }
  return (p.compare(ns));
}

/********************
 Canonicalization by fast exhaustive generation of
 all permutations
 ********************/
void SymmetryClass::Exhaustive_Fast_Canonicalize(state* s)
{
  int i;
  static state temp;
  Perm.ResetToExplicit();

  StateCopy(&temp, workingstate);
  ResetBestResult();
  for (i=0; i<Perm.count; i++)
    if (Perm.In(i))
      {
        StateCopy(workingstate, &temp);
        mu_Tokens.Permute(Perm,i);
        if (args->multiset_reduction.value)
          mu_Tokens.MultisetSort();
        SetBestResult(i, workingstate);
      }
  StateCopy(workingstate, &BestPermutedState);

  StateCopy(&temp, workingstate);
  ResetBestResult();
  for (i=0; i<Perm.count; i++)
    if (Perm.In(i))
      {
        StateCopy(workingstate, &temp);
        mu_TailPointers.Permute(Perm,i);
        if (args->multiset_reduction.value)
          mu_TailPointers.MultisetSort();
        SetBestResult(i, workingstate);
      }
  StateCopy(workingstate, &BestPermutedState);

  StateCopy(&temp, workingstate);
  ResetBestResult();
  for (i=0; i<Perm.count; i++)
    if (Perm.In(i))
      {
        StateCopy(workingstate, &temp);
        mu_IncomingQueue.Permute(Perm,i);
        if (args->multiset_reduction.value)
          mu_IncomingQueue.MultisetSort();
        SetBestResult(i, workingstate);
      }
  StateCopy(workingstate, &BestPermutedState);

  StateCopy(&temp, workingstate);
  ResetBestResult();
  for (i=0; i<Perm.count; i++)
    if (Perm.In(i))
      {
        StateCopy(workingstate, &temp);
        mu_RouterStatus.Permute(Perm,i);
        if (args->multiset_reduction.value)
          mu_RouterStatus.MultisetSort();
        SetBestResult(i, workingstate);
      }
  StateCopy(workingstate, &BestPermutedState);

  StateCopy(&temp, workingstate);
  ResetBestResult();
  for (i=0; i<Perm.count; i++)
    if (Perm.In(i))
      {
        StateCopy(workingstate, &temp);
        mu_Routers.Permute(Perm,i);
        if (args->multiset_reduction.value)
          mu_Routers.MultisetSort();
        SetBestResult(i, workingstate);
      }
  StateCopy(workingstate, &BestPermutedState);

  StateCopy(&temp, workingstate);
  ResetBestResult();
  for (i=0; i<Perm.count; i++)
    if (Perm.In(i))
      {
        StateCopy(workingstate, &temp);
        mu_ExitPath.Permute(Perm,i);
        if (args->multiset_reduction.value)
          mu_ExitPath.MultisetSort();
        SetBestResult(i, workingstate);
      }
  StateCopy(workingstate, &BestPermutedState);

  StateCopy(&temp, workingstate);
  ResetBestResult();
  for (i=0; i<Perm.count; i++)
    if (Perm.In(i))
      {
        StateCopy(workingstate, &temp);
        mu_EntryPath.Permute(Perm,i);
        if (args->multiset_reduction.value)
          mu_EntryPath.MultisetSort();
        SetBestResult(i, workingstate);
      }
  StateCopy(workingstate, &BestPermutedState);

};

/********************
 Canonicalization by fast simple variable canonicalization,
 fast simple scalarset array canonicalization,
 fast restriction on permutation set with simple scalarset array of scalarset,
 and fast exhaustive generation of
 all permutations for other variables
 ********************/
void SymmetryClass::Heuristic_Fast_Canonicalize(state* s)
{
  int i;
  static state temp;

  Perm.ResetToSimple();

};

/********************
 Canonicalization by fast simple variable canonicalization,
 fast simple scalarset array canonicalization,
 fast restriction on permutation set with simple scalarset array of scalarset,
 and fast exhaustive generation of
 all permutations for other variables
 and use less local memory
 ********************/
void SymmetryClass::Heuristic_Small_Mem_Canonicalize(state* s)
{
  unsigned long cycle;
  static state temp;

  Perm.ResetToSimple();

};

/********************
 Normalization by fast simple variable canonicalization,
 fast simple scalarset array canonicalization,
 fast restriction on permutation set with simple scalarset array of scalarset,
 and for all other variables, pick any remaining permutation
 ********************/
void SymmetryClass::Heuristic_Fast_Normalize(state* s)
{
  int i;
  static state temp;

  Perm.ResetToSimple();

};

/********************
  Include
 ********************/
#include "mu_epilog.hpp"
